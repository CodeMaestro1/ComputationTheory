Nonterminals useless in grammar

    type_decls
    type_basic_decl
    complex_type_decls
    array_decls


Terminals unused in grammar

    DOT


Rules useless in grammar

  114 type_decls: ε
  115           | type_decls type_basic_decl
  116           | type_decls complex_type_decls

  117 type_basic_decl: KEYWORD_INTEGER
  118                | KEYWORD_SCALAR
  119                | KEYWORD_STR
  120                | KEYWORD_BOOL

  121 complex_type_decls: comp_decl
  122                   | array_decls

  123 array_decls: id_decl LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type SEMICOLON
  124            | id_decl LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON


State 159 conflicts: 1 shift/reduce
State 192 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: comp_decls const_decls var_decls func_decls main_func

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON

    3 comp_decls: ε
    4           | comp_decls comp_decl

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    6 var_decls: ε
    7          | var_decls var_decl

    8 var_decl: id_list COLON type SEMICOLON

    9 id_list: id_decl
   10        | id_list COMMA id_decl

   11 id_decl: IDENTIFIER
   12        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   14 func_decls: ε
   15           | func_decls func_decl

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   17 return_type_decl: ε
   18                 | ARROW return_type_opt

   19 param: id_decl COLON type

   20 param_list_opt: ε
   21               | param_list

   22 param_list: param
   23           | param_list COMMA param

   24 local_decls: ε
   25            | local_decls const_decl
   26            | local_decls var_decl

   27 stmts: ε
   28      | stmts stmt

   29 stmt: simple_stmt
   30     | compound_stmt

   31 simple_stmt: assignment_statement
   32            | function_call SEMICOLON
   33            | KEYWORD_BREAK SEMICOLON
   34            | KEYWORD_CONTINUE SEMICOLON
   35            | SEMICOLON

   36 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON
   37                     | lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | lvalue OP_MOD_ASSIGN expr SEMICOLON

   42 lvalue: IDENTIFIER
   43       | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

   50 member_decls: ε
   51             | member_decl_list

   52 member_decl_list: member_decl
   53                 | member_decl_list member_decl

   54 member_decl: id_list COLON type SEMICOLON

   55 method_decls: ε
   56             | method_decls method_decl

   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   58 const_decls: ε
   59            | const_decls const_decl

   60 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

   61 return_type_opt: ε
   62                | type

   63 return_opt: ε
   64           | KEYWORD_RETURN SEMICOLON
   65           | KEYWORD_RETURN expr SEMICOLON

   66 else_part: ε
   67          | KEYWORD_ELSE COLON stmts

   68 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

   69 arg_list_opt: ε
   70             | arg_list

   71 arg_list: expr
   72         | arg_list COMMA expr

   73 expr: logical_expr

   74 logical_expr: relational_expr
   75             | logical_expr OP_AND relational_expr
   76             | logical_expr OP_OR relational_expr

   77 relational_expr: arithmetic_expr
   78                | relational_expr OP_LT arithmetic_expr
   79                | relational_expr OP_LE arithmetic_expr
   80                | relational_expr OP_GT arithmetic_expr
   81                | relational_expr OP_GE arithmetic_expr
   82                | relational_expr OP_EQ arithmetic_expr
   83                | relational_expr OP_NEQ arithmetic_expr

   84 arithmetic_expr: term
   85                | arithmetic_expr OP_PLUS term
   86                | arithmetic_expr OP_MINUS term

   87 term: factor
   88     | term OP_MULT factor
   89     | term OP_DIV factor
   90     | term OP_MOD factor

   91 factor: primary
   92       | OP_MINUS factor
   93       | OP_NOT factor
   94       | factor OP_POWER primary

   95 primary: IDENTIFIER
   96        | literal
   97        | function_call
   98        | LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

   99 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET
  100           | LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

  101 literal: CONST_INT
  102        | CONST_REAL
  103        | CONST_STRING
  104        | BOOL_TRUE
  105        | BOOL_FALSE

  106 type: KEYWORD_INTEGER
  107     | KEYWORD_SCALAR
  108     | KEYWORD_STR
  109     | KEYWORD_BOOL
  110     | KEYWORD_COMP
  111     | IDENTIFIER
  112     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | LEFT_BRACKET RIGHT_BRACKET COLON type


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <stringVal> (258) 5 11 12 13 16 42 43 47 48 49 57 60 68 95 111
    CONST_STRING <stringVal> (259) 103
    CONST_INT <integerVal> (260) 101 112
    CONST_REAL <floatVal> (261) 102
    KEYWORD_SCALAR (262) 107
    KEYWORD_STR <stringVal> (263) 108
    OP_COLON_ASSIGN <stringVal> (264) 48 49
    KEYWORD_INTEGER <integerVal> (265) 106
    KEYWORD_IF (266) 44
    KEYWORD_ELSE (267) 67
    KEYWORD_ENDIF (268) 44
    KEYWORD_WHILE (269) 45 46
    KEYWORD_ENDWHILE (270) 45 46
    KEYWORD_FOR (271) 47 48 49
    KEYWORD_IN (272) 47 49
    KEYWORD_ENDFOR (273) 47
    KEYWORD_DEF (274) 2 16 57
    KEYWORD_ENDDEF (275) 2 16 57
    KEYWORD_MAIN (276) 2
    KEYWORD_RETURN (277) 64 65
    KEYWORD_CONST (278) 60
    KEYWORD_COMP (279) 5 110
    KEYWORD_ENDCOMP (280) 5
    KEYWORD_OF (281) 49
    KEYWORD_BOOL (282) 109
    BOOL_TRUE (283) 104
    BOOL_FALSE (284) 105
    KEYWORD_BREAK (285) 33
    KEYWORD_CONTINUE (286) 34
    OP_PLUS (287) 85
    OP_MINUS (288) 86 92
    OP_MULT (289) 88
    OP_DIV (290) 89
    OP_MOD (291) 90
    OP_POWER (292) 94
    OP_EQ (293) 82
    OP_NEQ (294) 83
    OP_LT (295) 78
    OP_LE (296) 79
    OP_GT (297) 80
    OP_GE (298) 81
    OP_AND (299) 75
    OP_OR (300) 76
    OP_NOT (301) 93
    OP_ASSIGN (302) 36 60
    OP_PLUS_ASSIGN (303) 37
    OP_MINUS_ASSIGN (304) 38
    OP_MULT_ASSIGN (305) 39
    OP_DIV_ASSIGN (306) 40
    OP_MOD_ASSIGN (307) 41
    SEMICOLON (308) 2 5 8 16 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 54 57 60 64 65
    COLON (309) 2 5 8 16 19 44 45 46 47 48 49 54 57 60 67 99 100 112 113
    COMMA (310) 10 23 72
    DOT (311)
    LEFT_PARENTHESIS (312) 2 16 44 46 57 68 98
    RIGHT_PARENTHESIS (313) 2 16 44 46 57 68 98
    LEFT_BRACKET (314) 12 13 43 48 49 99 100 112 113
    RIGHT_BRACKET (315) 12 13 43 48 49 99 100 112 113
    ARROW (316) 18


Nonterminals, with rules where they appear

    $accept (62)
        on left: 0
    program (63)
        on left: 1
        on right: 0
    main_func (64)
        on left: 2
        on right: 1
    comp_decls (65)
        on left: 3 4
        on right: 1 4
    comp_decl (66)
        on left: 5
        on right: 4
    var_decls (67)
        on left: 6 7
        on right: 1 7
    var_decl (68)
        on left: 8
        on right: 7 26
    id_list (69)
        on left: 9 10
        on right: 8 10 54
    id_decl <stringVal> (70)
        on left: 11 12 13
        on right: 9 10 19 48 49
    func_decls (71)
        on left: 14 15
        on right: 1 15
    func_decl (72)
        on left: 16
        on right: 15
    return_type_decl (73)
        on left: 17 18
        on right: 16
    param (74)
        on left: 19
        on right: 22 23
    param_list_opt (75)
        on left: 20 21
        on right: 16 57
    param_list (76)
        on left: 22 23
        on right: 21 23
    local_decls (77)
        on left: 24 25 26
        on right: 16 25 26 57
    stmts (78)
        on left: 27 28
        on right: 2 16 28 44 45 46 47 57 67
    stmt (79)
        on left: 29 30
        on right: 28
    simple_stmt (80)
        on left: 31 32 33 34 35
        on right: 29
    assignment_statement (81)
        on left: 36 37 38 39 40 41
        on right: 31
    lvalue (82)
        on left: 42 43
        on right: 36 37 38 39 40 41
    compound_stmt (83)
        on left: 44 45 46 47 48 49
        on right: 30
    member_decls (84)
        on left: 50 51
        on right: 5
    member_decl_list (85)
        on left: 52 53
        on right: 51 53
    member_decl (86)
        on left: 54
        on right: 52 53
    method_decls (87)
        on left: 55 56
        on right: 5 56
    method_decl (88)
        on left: 57
        on right: 56
    const_decls (89)
        on left: 58 59
        on right: 1 59
    const_decl (90)
        on left: 60
        on right: 25 59
    return_type_opt (91)
        on left: 61 62
        on right: 18 57
    return_opt (92)
        on left: 63 64 65
        on right: 16 57
    else_part (93)
        on left: 66 67
        on right: 44
    function_call (94)
        on left: 68
        on right: 32 97
    arg_list_opt (95)
        on left: 69 70
        on right: 68
    arg_list (96)
        on left: 71 72
        on right: 70 72
    expr (97)
        on left: 73
        on right: 12 36 37 38 39 40 41 43 44 45 46 48 49 65 71 72 98 99 100
    logical_expr (98)
        on left: 74 75 76
        on right: 73 75 76
    relational_expr (99)
        on left: 77 78 79 80 81 82 83
        on right: 74 75 76 78 79 80 81 82 83
    arithmetic_expr (100)
        on left: 84 85 86
        on right: 77 78 79 80 81 82 83 85 86
    term (101)
        on left: 87 88 89 90
        on right: 84 85 86 88 89 90
    factor (102)
        on left: 91 92 93 94
        on right: 87 88 89 90 92 93 94
    primary (103)
        on left: 95 96 97 98
        on right: 91 94
    range_expr (104)
        on left: 99 100
        on right: 47
    literal (105)
        on left: 101 102 103 104 105
        on right: 60 96
    type (106)
        on left: 106 107 108 109 110 111 112 113
        on right: 8 19 48 49 54 60 62 112 113


State 0

    0 $accept: • program $end
    1 program: • comp_decls const_decls var_decls func_decls main_func
    3 comp_decls: ε •
    4           | • comp_decls comp_decl

    $default  reduce using rule 3 (comp_decls)

    program     go to state 1
    comp_decls  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: comp_decls • const_decls var_decls func_decls main_func
    4 comp_decls: comp_decls • comp_decl
    5 comp_decl: • KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
   58 const_decls: ε •  [IDENTIFIER, KEYWORD_DEF, KEYWORD_CONST]
   59            | • const_decls const_decl

    KEYWORD_COMP  shift, and go to state 4

    $default  reduce using rule 58 (const_decls)

    comp_decl    go to state 5
    const_decls  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    5 comp_decl: KEYWORD_COMP • IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    4 comp_decls: comp_decls comp_decl •

    $default  reduce using rule 4 (comp_decls)


State 6

    1 program: comp_decls const_decls • var_decls func_decls main_func
    6 var_decls: ε •  [IDENTIFIER, KEYWORD_DEF]
    7          | • var_decls var_decl
   59 const_decls: const_decls • const_decl
   60 const_decl: • KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    KEYWORD_CONST  shift, and go to state 8

    $default  reduce using rule 6 (var_decls)

    var_decls   go to state 9
    const_decl  go to state 10


State 7

    5 comp_decl: KEYWORD_COMP IDENTIFIER • COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    COLON  shift, and go to state 11


State 8

   60 const_decl: KEYWORD_CONST • IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    IDENTIFIER  shift, and go to state 12


State 9

    1 program: comp_decls const_decls var_decls • func_decls main_func
    7 var_decls: var_decls • var_decl
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14 func_decls: ε •  [KEYWORD_DEF]
   15           | • func_decls func_decl

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 14 (func_decls)

    var_decl    go to state 14
    id_list     go to state 15
    id_decl     go to state 16
    func_decls  go to state 17


State 10

   59 const_decls: const_decls const_decl •

    $default  reduce using rule 59 (const_decls)


State 11

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON • member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   50 member_decls: ε •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   51             | • member_decl_list
   52 member_decl_list: • member_decl
   53                 | • member_decl_list member_decl
   54 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 50 (member_decls)

    id_list           go to state 18
    id_decl           go to state 16
    member_decls      go to state 19
    member_decl_list  go to state 20
    member_decl       go to state 21


State 12

   60 const_decl: KEYWORD_CONST IDENTIFIER • COLON type OP_ASSIGN literal SEMICOLON

    COLON  shift, and go to state 22


State 13

   11 id_decl: IDENTIFIER •  [COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 23

    $default  reduce using rule 11 (id_decl)


State 14

    7 var_decls: var_decls var_decl •

    $default  reduce using rule 7 (var_decls)


State 15

    8 var_decl: id_list • COLON type SEMICOLON
   10 id_list: id_list • COMMA id_decl

    COLON  shift, and go to state 24
    COMMA  shift, and go to state 25


State 16

    9 id_list: id_decl •

    $default  reduce using rule 9 (id_list)


State 17

    1 program: comp_decls const_decls var_decls func_decls • main_func
    2 main_func: • KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON
   15 func_decls: func_decls • func_decl
   16 func_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF  shift, and go to state 26

    main_func  go to state 27
    func_decl  go to state 28


State 18

   10 id_list: id_list • COMMA id_decl
   54 member_decl: id_list • COLON type SEMICOLON

    COLON  shift, and go to state 29
    COMMA  shift, and go to state 25


State 19

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls • method_decls KEYWORD_ENDCOMP SEMICOLON
   55 method_decls: ε •
   56             | • method_decls method_decl

    $default  reduce using rule 55 (method_decls)

    method_decls  go to state 30


State 20

    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   51 member_decls: member_decl_list •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   53 member_decl_list: member_decl_list • member_decl
   54 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 51 (member_decls)

    id_list      go to state 18
    id_decl      go to state 16
    member_decl  go to state 31


State 21

   52 member_decl_list: member_decl •

    $default  reduce using rule 52 (member_decl_list)


State 22

   60 const_decl: KEYWORD_CONST IDENTIFIER COLON • type OP_ASSIGN literal SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 39


State 23

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48
    RIGHT_BRACKET     shift, and go to state 49

    function_call    go to state 50
    expr             go to state 51
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 24

    8 var_decl: id_list COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 59


State 25

   10 id_list: id_list COMMA • id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 13

    id_decl  go to state 60


State 26

    2 main_func: KEYWORD_DEF • KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON
   16 func_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER    shift, and go to state 61
    KEYWORD_MAIN  shift, and go to state 62


State 27

    1 program: comp_decls const_decls var_decls func_decls main_func •

    $default  reduce using rule 1 (program)


State 28

   15 func_decls: func_decls func_decl •

    $default  reduce using rule 15 (func_decls)


State 29

   54 member_decl: id_list COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 63


State 30

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls • KEYWORD_ENDCOMP SEMICOLON
   56 method_decls: method_decls • method_decl
   57 method_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF      shift, and go to state 64
    KEYWORD_ENDCOMP  shift, and go to state 65

    method_decl  go to state 66


State 31

   53 member_decl_list: member_decl_list member_decl •

    $default  reduce using rule 53 (member_decl_list)


State 32

  111 type: IDENTIFIER •

    $default  reduce using rule 111 (type)


State 33

  107 type: KEYWORD_SCALAR •

    $default  reduce using rule 107 (type)


State 34

  108 type: KEYWORD_STR •

    $default  reduce using rule 108 (type)


State 35

  106 type: KEYWORD_INTEGER •

    $default  reduce using rule 106 (type)


State 36

  110 type: KEYWORD_COMP •

    $default  reduce using rule 110 (type)


State 37

  109 type: KEYWORD_BOOL •

    $default  reduce using rule 109 (type)


State 38

  112 type: LEFT_BRACKET • CONST_INT RIGHT_BRACKET COLON type
  113     | LEFT_BRACKET • RIGHT_BRACKET COLON type

    CONST_INT      shift, and go to state 67
    RIGHT_BRACKET  shift, and go to state 68


State 39

   60 const_decl: KEYWORD_CONST IDENTIFIER COLON type • OP_ASSIGN literal SEMICOLON

    OP_ASSIGN  shift, and go to state 69


State 40

   68 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   95 primary: IDENTIFIER •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]

    LEFT_PARENTHESIS  shift, and go to state 70

    $default  reduce using rule 95 (primary)


State 41

  103 literal: CONST_STRING •

    $default  reduce using rule 103 (literal)


State 42

  101 literal: CONST_INT •

    $default  reduce using rule 101 (literal)


State 43

  102 literal: CONST_REAL •

    $default  reduce using rule 102 (literal)


State 44

  104 literal: BOOL_TRUE •

    $default  reduce using rule 104 (literal)


State 45

  105 literal: BOOL_FALSE •

    $default  reduce using rule 105 (literal)


State 46

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   91 factor: • primary
   92       | • OP_MINUS factor
   92       | OP_MINUS • factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    factor         go to state 71
    primary        go to state 57
    literal        go to state 58


State 47

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   93       | OP_NOT • factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    factor         go to state 72
    primary        go to state 57
    literal        go to state 58


State 48

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   98        | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 73
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 49

   13 id_decl: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 13 (id_decl)


State 50

   97 primary: function_call •

    $default  reduce using rule 97 (primary)


State 51

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 74


State 52

   73 expr: logical_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   75 logical_expr: logical_expr • OP_AND relational_expr
   76             | logical_expr • OP_OR relational_expr

    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 73 (expr)


State 53

   74 logical_expr: relational_expr •  [KEYWORD_FOR, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   78 relational_expr: relational_expr • OP_LT arithmetic_expr
   79                | relational_expr • OP_LE arithmetic_expr
   80                | relational_expr • OP_GT arithmetic_expr
   81                | relational_expr • OP_GE arithmetic_expr
   82                | relational_expr • OP_EQ arithmetic_expr
   83                | relational_expr • OP_NEQ arithmetic_expr

    OP_EQ   shift, and go to state 77
    OP_NEQ  shift, and go to state 78
    OP_LT   shift, and go to state 79
    OP_LE   shift, and go to state 80
    OP_GT   shift, and go to state 81
    OP_GE   shift, and go to state 82

    $default  reduce using rule 74 (logical_expr)


State 54

   77 relational_expr: arithmetic_expr •  [KEYWORD_FOR, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   85 arithmetic_expr: arithmetic_expr • OP_PLUS term
   86                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 83
    OP_MINUS  shift, and go to state 84

    $default  reduce using rule 77 (relational_expr)


State 55

   84 arithmetic_expr: term •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   88 term: term • OP_MULT factor
   89     | term • OP_DIV factor
   90     | term • OP_MOD factor

    OP_MULT  shift, and go to state 85
    OP_DIV   shift, and go to state 86
    OP_MOD   shift, and go to state 87

    $default  reduce using rule 84 (arithmetic_expr)


State 56

   87 term: factor •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   94 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 88

    $default  reduce using rule 87 (term)


State 57

   91 factor: primary •

    $default  reduce using rule 91 (factor)


State 58

   96 primary: literal •

    $default  reduce using rule 96 (primary)


State 59

    8 var_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 89


State 60

   10 id_list: id_list COMMA id_decl •

    $default  reduce using rule 10 (id_list)


State 61

   16 func_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 90


State 62

    2 main_func: KEYWORD_DEF KEYWORD_MAIN • LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 91


State 63

   54 member_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 92


State 64

   57 method_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 93


State 65

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 94


State 66

   56 method_decls: method_decls method_decl •

    $default  reduce using rule 56 (method_decls)


State 67

  112 type: LEFT_BRACKET CONST_INT • RIGHT_BRACKET COLON type

    RIGHT_BRACKET  shift, and go to state 95


State 68

  113 type: LEFT_BRACKET RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 96


State 69

   60 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN • literal SEMICOLON
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    CONST_STRING  shift, and go to state 41
    CONST_INT     shift, and go to state 42
    CONST_REAL    shift, and go to state 43
    BOOL_TRUE     shift, and go to state 44
    BOOL_FALSE    shift, and go to state 45

    literal  go to state 97


State 70

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   68              | IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   69 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   70             | • arg_list
   71 arg_list: • expr
   72         | • arg_list COMMA expr
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    $default  reduce using rule 69 (arg_list_opt)

    function_call    go to state 50
    arg_list_opt     go to state 98
    arg_list         go to state 99
    expr             go to state 100
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 71

   92 factor: OP_MINUS factor •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   94       | factor • OP_POWER primary

    OP_POWER  shift, and go to state 88

    $default  reduce using rule 92 (factor)

    Conflict between rule 92 and token OP_POWER resolved as shift (OP_MINUS < OP_POWER).


State 72

   93 factor: OP_NOT factor •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   94       | factor • OP_POWER primary

    $default  reduce using rule 93 (factor)

    Conflict between rule 93 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT).


State 73

   98 primary: LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 101


State 74

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 12 (id_decl)


State 75

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75 logical_expr: logical_expr OP_AND • relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    relational_expr  go to state 102
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 76

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   76 logical_expr: logical_expr OP_OR • relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    relational_expr  go to state 103
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 77

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   82 relational_expr: relational_expr OP_EQ • arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    arithmetic_expr  go to state 104
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 78

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   83 relational_expr: relational_expr OP_NEQ • arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    arithmetic_expr  go to state 105
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 79

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78 relational_expr: relational_expr OP_LT • arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    arithmetic_expr  go to state 106
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 80

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79 relational_expr: relational_expr OP_LE • arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    arithmetic_expr  go to state 107
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 81

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   80 relational_expr: relational_expr OP_GT • arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    arithmetic_expr  go to state 108
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 82

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   81 relational_expr: relational_expr OP_GE • arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    arithmetic_expr  go to state 109
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 83

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   85 arithmetic_expr: arithmetic_expr OP_PLUS • term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    term           go to state 110
    factor         go to state 56
    primary        go to state 57
    literal        go to state 58


State 84

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   86 arithmetic_expr: arithmetic_expr OP_MINUS • term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    term           go to state 111
    factor         go to state 56
    primary        go to state 57
    literal        go to state 58


State 85

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   88 term: term OP_MULT • factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    factor         go to state 112
    primary        go to state 57
    literal        go to state 58


State 86

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   89 term: term OP_DIV • factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    factor         go to state 113
    primary        go to state 57
    literal        go to state 58


State 87

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   90 term: term OP_MOD • factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    factor         go to state 114
    primary        go to state 57
    literal        go to state 58


State 88

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   94 factor: factor OP_POWER • primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call  go to state 50
    primary        go to state 115
    literal        go to state 58


State 89

    8 var_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 8 (var_decl)


State 90

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   19 param: • id_decl COLON type
   20 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   21               | • param_list
   22 param_list: • param
   23           | • param_list COMMA param

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 20 (param_list_opt)

    id_decl         go to state 116
    param           go to state 117
    param_list_opt  go to state 118
    param_list      go to state 119


State 91

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 120


State 92

   54 member_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 54 (member_decl)


State 93

   57 method_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 121


State 94

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON •

    $default  reduce using rule 5 (comp_decl)


State 95

  112 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 122


State 96

  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type
  113     | LEFT_BRACKET RIGHT_BRACKET COLON • type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 123


State 97

   60 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal • SEMICOLON

    SEMICOLON  shift, and go to state 124


State 98

   68 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 125


State 99

   70 arg_list_opt: arg_list •  [RIGHT_PARENTHESIS]
   72 arg_list: arg_list • COMMA expr

    COMMA  shift, and go to state 126

    $default  reduce using rule 70 (arg_list_opt)


State 100

   71 arg_list: expr •

    $default  reduce using rule 71 (arg_list)


State 101

   98 primary: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •

    $default  reduce using rule 98 (primary)


State 102

   75 logical_expr: logical_expr OP_AND relational_expr •  [KEYWORD_FOR, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   78 relational_expr: relational_expr • OP_LT arithmetic_expr
   79                | relational_expr • OP_LE arithmetic_expr
   80                | relational_expr • OP_GT arithmetic_expr
   81                | relational_expr • OP_GE arithmetic_expr
   82                | relational_expr • OP_EQ arithmetic_expr
   83                | relational_expr • OP_NEQ arithmetic_expr

    OP_EQ   shift, and go to state 77
    OP_NEQ  shift, and go to state 78
    OP_LT   shift, and go to state 79
    OP_LE   shift, and go to state 80
    OP_GT   shift, and go to state 81
    OP_GE   shift, and go to state 82

    $default  reduce using rule 75 (logical_expr)


State 103

   76 logical_expr: logical_expr OP_OR relational_expr •  [KEYWORD_FOR, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   78 relational_expr: relational_expr • OP_LT arithmetic_expr
   79                | relational_expr • OP_LE arithmetic_expr
   80                | relational_expr • OP_GT arithmetic_expr
   81                | relational_expr • OP_GE arithmetic_expr
   82                | relational_expr • OP_EQ arithmetic_expr
   83                | relational_expr • OP_NEQ arithmetic_expr

    OP_EQ   shift, and go to state 77
    OP_NEQ  shift, and go to state 78
    OP_LT   shift, and go to state 79
    OP_LE   shift, and go to state 80
    OP_GT   shift, and go to state 81
    OP_GE   shift, and go to state 82

    $default  reduce using rule 76 (logical_expr)


State 104

   82 relational_expr: relational_expr OP_EQ arithmetic_expr •  [KEYWORD_FOR, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   85 arithmetic_expr: arithmetic_expr • OP_PLUS term
   86                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 83
    OP_MINUS  shift, and go to state 84

    $default  reduce using rule 82 (relational_expr)


State 105

   83 relational_expr: relational_expr OP_NEQ arithmetic_expr •  [KEYWORD_FOR, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   85 arithmetic_expr: arithmetic_expr • OP_PLUS term
   86                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 83
    OP_MINUS  shift, and go to state 84

    $default  reduce using rule 83 (relational_expr)


State 106

   78 relational_expr: relational_expr OP_LT arithmetic_expr •  [KEYWORD_FOR, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   85 arithmetic_expr: arithmetic_expr • OP_PLUS term
   86                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 83
    OP_MINUS  shift, and go to state 84

    $default  reduce using rule 78 (relational_expr)


State 107

   79 relational_expr: relational_expr OP_LE arithmetic_expr •  [KEYWORD_FOR, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   85 arithmetic_expr: arithmetic_expr • OP_PLUS term
   86                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 83
    OP_MINUS  shift, and go to state 84

    $default  reduce using rule 79 (relational_expr)


State 108

   80 relational_expr: relational_expr OP_GT arithmetic_expr •  [KEYWORD_FOR, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   85 arithmetic_expr: arithmetic_expr • OP_PLUS term
   86                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 83
    OP_MINUS  shift, and go to state 84

    $default  reduce using rule 80 (relational_expr)


State 109

   81 relational_expr: relational_expr OP_GE arithmetic_expr •  [KEYWORD_FOR, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   85 arithmetic_expr: arithmetic_expr • OP_PLUS term
   86                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 83
    OP_MINUS  shift, and go to state 84

    $default  reduce using rule 81 (relational_expr)


State 110

   85 arithmetic_expr: arithmetic_expr OP_PLUS term •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   88 term: term • OP_MULT factor
   89     | term • OP_DIV factor
   90     | term • OP_MOD factor

    OP_MULT  shift, and go to state 85
    OP_DIV   shift, and go to state 86
    OP_MOD   shift, and go to state 87

    $default  reduce using rule 85 (arithmetic_expr)


State 111

   86 arithmetic_expr: arithmetic_expr OP_MINUS term •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   88 term: term • OP_MULT factor
   89     | term • OP_DIV factor
   90     | term • OP_MOD factor

    OP_MULT  shift, and go to state 85
    OP_DIV   shift, and go to state 86
    OP_MOD   shift, and go to state 87

    $default  reduce using rule 86 (arithmetic_expr)


State 112

   88 term: term OP_MULT factor •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   94 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 88

    $default  reduce using rule 88 (term)


State 113

   89 term: term OP_DIV factor •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   94 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 88

    $default  reduce using rule 89 (term)


State 114

   90 term: term OP_MOD factor •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   94 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 88

    $default  reduce using rule 90 (term)


State 115

   94 factor: factor OP_POWER primary •

    $default  reduce using rule 94 (factor)


State 116

   19 param: id_decl • COLON type

    COLON  shift, and go to state 127


State 117

   22 param_list: param •

    $default  reduce using rule 22 (param_list)


State 118

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 128


State 119

   21 param_list_opt: param_list •  [RIGHT_PARENTHESIS]
   23 param_list: param_list • COMMA param

    COMMA  shift, and go to state 129

    $default  reduce using rule 21 (param_list_opt)


State 120

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 130


State 121

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 param: • id_decl COLON type
   20 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   21               | • param_list
   22 param_list: • param
   23           | • param_list COMMA param
   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 20 (param_list_opt)

    id_decl         go to state 116
    param           go to state 117
    param_list_opt  go to state 131
    param_list      go to state 119


State 122

  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  112     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON • type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 132


State 123

  113 type: LEFT_BRACKET RIGHT_BRACKET COLON type •

    $default  reduce using rule 113 (type)


State 124

   60 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON •

    $default  reduce using rule 60 (const_decl)


State 125

   68 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 68 (function_call)


State 126

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 arg_list: arg_list COMMA • expr
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 133
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 127

   19 param: id_decl COLON • type
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 134


State 128

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   17 return_type_decl: ε •  [COLON]
   18                 | • ARROW return_type_opt

    ARROW  shift, and go to state 135

    $default  reduce using rule 17 (return_type_decl)

    return_type_decl  go to state 136


State 129

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 param: • id_decl COLON type
   23 param_list: param_list COMMA • param

    IDENTIFIER  shift, and go to state 13

    id_decl  go to state 116
    param    go to state 137


State 130

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDDEF SEMICOLON
   27 stmts: ε •
   28      | • stmts stmt

    $default  reduce using rule 27 (stmts)

    stmts  go to state 138


State 131

   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 139


State 132

  112 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type •

    $default  reduce using rule 112 (type)


State 133

   72 arg_list: arg_list COMMA expr •

    $default  reduce using rule 72 (arg_list)


State 134

   19 param: id_decl COLON type •

    $default  reduce using rule 19 (param)


State 135

   18 return_type_decl: ARROW • return_type_opt
   61 return_type_opt: ε •  [COLON]
   62                | • type
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    $default  reduce using rule 61 (return_type_opt)

    return_type_opt  go to state 140
    type             go to state 141


State 136

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 142


State 137

   23 param_list: param_list COMMA param •

    $default  reduce using rule 23 (param_list)


State 138

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDDEF SEMICOLON
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_ENDDEF    shift, and go to state 147
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    function_call         go to state 157


State 139

   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   61 return_type_opt: ε •  [COLON]
   62                | • type
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    $default  reduce using rule 61 (return_type_opt)

    return_type_opt  go to state 158
    type             go to state 141


State 140

   18 return_type_decl: ARROW return_type_opt •

    $default  reduce using rule 18 (return_type_decl)


State 141

   62 return_type_opt: type •

    $default  reduce using rule 62 (return_type_opt)


State 142

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   24 local_decls: ε •
   25            | • local_decls const_decl
   26            | • local_decls var_decl

    $default  reduce using rule 24 (local_decls)

    local_decls  go to state 159


State 143

   11 id_decl: IDENTIFIER •  [OP_COLON_ASSIGN]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   42 lvalue: IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   43       | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   68 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 70
    LEFT_BRACKET      shift, and go to state 160

    OP_COLON_ASSIGN  reduce using rule 11 (id_decl)
    $default         reduce using rule 42 (lvalue)


State 144

   44 compound_stmt: KEYWORD_IF • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 161


State 145

   45 compound_stmt: KEYWORD_WHILE • expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | KEYWORD_WHILE • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 162

    function_call    go to state 50
    expr             go to state 163
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 146

   47 compound_stmt: KEYWORD_FOR • IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 164


State 147

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 165


State 148

   33 simple_stmt: KEYWORD_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 166


State 149

   34 simple_stmt: KEYWORD_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 167


State 150

   35 simple_stmt: SEMICOLON •

    $default  reduce using rule 35 (simple_stmt)


State 151

   48 compound_stmt: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 168


State 152

   28 stmts: stmts stmt •

    $default  reduce using rule 28 (stmts)


State 153

   29 stmt: simple_stmt •

    $default  reduce using rule 29 (stmt)


State 154

   31 simple_stmt: assignment_statement •

    $default  reduce using rule 31 (simple_stmt)


State 155

   36 assignment_statement: lvalue • OP_ASSIGN expr SEMICOLON
   37                     | lvalue • OP_PLUS_ASSIGN expr SEMICOLON
   38                     | lvalue • OP_MINUS_ASSIGN expr SEMICOLON
   39                     | lvalue • OP_MULT_ASSIGN expr SEMICOLON
   40                     | lvalue • OP_DIV_ASSIGN expr SEMICOLON
   41                     | lvalue • OP_MOD_ASSIGN expr SEMICOLON

    OP_ASSIGN        shift, and go to state 169
    OP_PLUS_ASSIGN   shift, and go to state 170
    OP_MINUS_ASSIGN  shift, and go to state 171
    OP_MULT_ASSIGN   shift, and go to state 172
    OP_DIV_ASSIGN    shift, and go to state 173
    OP_MOD_ASSIGN    shift, and go to state 174


State 156

   30 stmt: compound_stmt •

    $default  reduce using rule 30 (stmt)


State 157

   32 simple_stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 175


State 158

   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 176


State 159

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   25 local_decls: local_decls • const_decl
   26            | local_decls • var_decl
   27 stmts: ε •  [IDENTIFIER, KEYWORD_IF, KEYWORD_WHILE, KEYWORD_FOR, KEYWORD_ENDDEF, KEYWORD_RETURN, KEYWORD_BREAK, KEYWORD_CONTINUE, SEMICOLON]
   28      | • stmts stmt
   60 const_decl: • KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    IDENTIFIER     shift, and go to state 13
    KEYWORD_CONST  shift, and go to state 8

    IDENTIFIER  [reduce using rule 27 (stmts)]
    $default    reduce using rule 27 (stmts)

    var_decl    go to state 177
    id_list     go to state 15
    id_decl     go to state 16
    stmts       go to state 178
    const_decl  go to state 179

    shift/reduce conflict on token IDENTIFIER:
       27 stmts: ε •
       11 id_decl: • IDENTIFIER
      First example: comp_decls const_decls var_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON func_decl main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                          main_func
                                                   ↳ 15: func_decl                                                                                                                                                                                                           func_decl
                                                         ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                               ↳ 26: local_decls var_decl
                                                                                                                                                                                 ↳ 8: id_list                 COLON type SEMICOLON
                                                                                                                                                                                      ↳ 9: id_decl
                                                                                                                                                                                           ↳ 11: • IDENTIFIER
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                                                                    main_func
                                                   ↳ 15: func_decls func_decl
                                                                    ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts                                                                                                  return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                      ↳ 28: stmts     stmt
                                                                                                                                                                                            ↳ 27: ε • ↳ 29: simple_stmt
                                                                                                                                                                                                            ↳ 32: function_call                                                    SEMICOLON
                                                                                                                                                                                                                  ↳ 68: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    shift/reduce conflict on token IDENTIFIER:
       27 stmts: ε •
       12 id_decl: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON func_decl main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                                                          main_func
                                                   ↳ 15: func_decl                                                                                                                                                                                                                                           func_decl
                                                         ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls                                                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                               ↳ 26: local_decls var_decl
                                                                                                                                                                                 ↳ 8: id_list                                                 COLON type SEMICOLON
                                                                                                                                                                                      ↳ 9: id_decl
                                                                                                                                                                                           ↳ 12: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                                                                    main_func
                                                   ↳ 15: func_decls func_decl
                                                                    ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts                                                                                                  return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                      ↳ 28: stmts     stmt
                                                                                                                                                                                            ↳ 27: ε • ↳ 29: simple_stmt
                                                                                                                                                                                                            ↳ 32: function_call                                                    SEMICOLON
                                                                                                                                                                                                                  ↳ 68: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    shift/reduce conflict on token IDENTIFIER:
       27 stmts: ε •
       13 id_decl: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON func_decl main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                                                     main_func
                                                   ↳ 15: func_decl                                                                                                                                                                                                                                      func_decl
                                                         ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls                                                                                    stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                               ↳ 26: local_decls var_decl
                                                                                                                                                                                 ↳ 8: id_list                                            COLON type SEMICOLON
                                                                                                                                                                                      ↳ 9: id_decl
                                                                                                                                                                                           ↳ 13: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                       $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                                                                    main_func
                                                   ↳ 15: func_decls func_decl
                                                                    ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts                                                                                                  return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                      ↳ 28: stmts     stmt
                                                                                                                                                                                            ↳ 27: ε • ↳ 29: simple_stmt
                                                                                                                                                                                                            ↳ 32: function_call                                                    SEMICOLON
                                                                                                                                                                                                                  ↳ 68: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS



State 160

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   43 lvalue: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48
    RIGHT_BRACKET     shift, and go to state 49

    function_call    go to state 50
    expr             go to state 180
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 161

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 181
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 162

   46 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   98        | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 182
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 163

   45 compound_stmt: KEYWORD_WHILE expr • COLON stmts KEYWORD_ENDWHILE SEMICOLON

    COLON  shift, and go to state 183


State 164

   47 compound_stmt: KEYWORD_FOR IDENTIFIER • KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    KEYWORD_IN  shift, and go to state 184


State 165

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 2 (main_func)


State 166

   33 simple_stmt: KEYWORD_BREAK SEMICOLON •

    $default  reduce using rule 33 (simple_stmt)


State 167

   34 simple_stmt: KEYWORD_CONTINUE SEMICOLON •

    $default  reduce using rule 34 (simple_stmt)


State 168

   48 compound_stmt: id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    LEFT_BRACKET  shift, and go to state 185


State 169

   36 assignment_statement: lvalue OP_ASSIGN • expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 186
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 170

   37 assignment_statement: lvalue OP_PLUS_ASSIGN • expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 187
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 171

   38 assignment_statement: lvalue OP_MINUS_ASSIGN • expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 188
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 172

   39 assignment_statement: lvalue OP_MULT_ASSIGN • expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 189
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 173

   40 assignment_statement: lvalue OP_DIV_ASSIGN • expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 190
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 174

   41 assignment_statement: lvalue OP_MOD_ASSIGN • expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 191
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 175

   32 simple_stmt: function_call SEMICOLON •

    $default  reduce using rule 32 (simple_stmt)


State 176

   24 local_decls: ε •
   25            | • local_decls const_decl
   26            | • local_decls var_decl
   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    $default  reduce using rule 24 (local_decls)

    local_decls  go to state 192


State 177

   26 local_decls: local_decls var_decl •

    $default  reduce using rule 26 (local_decls)


State 178

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   63 return_opt: ε •  [KEYWORD_ENDDEF]
   64           | • KEYWORD_RETURN SEMICOLON
   65           | • KEYWORD_RETURN expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_RETURN    shift, and go to state 193
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    $default  reduce using rule 63 (return_opt)

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    return_opt            go to state 194
    function_call         go to state 157


State 179

   25 local_decls: local_decls const_decl •

    $default  reduce using rule 25 (local_decls)


State 180

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   43 lvalue: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 195


State 181

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 196


State 182

   46 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   98 primary: LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 197


State 183

   27 stmts: ε •
   28      | • stmts stmt
   45 compound_stmt: KEYWORD_WHILE expr COLON • stmts KEYWORD_ENDWHILE SEMICOLON

    $default  reduce using rule 27 (stmts)

    stmts  go to state 198


State 184

   47 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN • range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   99 range_expr: • LEFT_BRACKET expr COLON expr RIGHT_BRACKET
  100           | • LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 199

    range_expr  go to state 200


State 185

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 201
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 186

   36 assignment_statement: lvalue OP_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 202


State 187

   37 assignment_statement: lvalue OP_PLUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 203


State 188

   38 assignment_statement: lvalue OP_MINUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 204


State 189

   39 assignment_statement: lvalue OP_MULT_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 205


State 190

   40 assignment_statement: lvalue OP_DIV_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 206


State 191

   41 assignment_statement: lvalue OP_MOD_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 207


State 192

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   25 local_decls: local_decls • const_decl
   26            | local_decls • var_decl
   27 stmts: ε •  [IDENTIFIER, KEYWORD_IF, KEYWORD_WHILE, KEYWORD_FOR, KEYWORD_ENDDEF, KEYWORD_RETURN, KEYWORD_BREAK, KEYWORD_CONTINUE, SEMICOLON]
   28      | • stmts stmt
   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   60 const_decl: • KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    IDENTIFIER     shift, and go to state 13
    KEYWORD_CONST  shift, and go to state 8

    IDENTIFIER  [reduce using rule 27 (stmts)]
    $default    reduce using rule 27 (stmts)

    var_decl    go to state 177
    id_list     go to state 15
    id_decl     go to state 16
    stmts       go to state 208
    const_decl  go to state 179

    shift/reduce conflict on token IDENTIFIER:
       27 stmts: ε •
       11 id_decl: • IDENTIFIER
      First example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON method_decl KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                     const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                         KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 56: method_decl                                                                                                                                                                                                        method_decl
                                                                                        ↳ 57: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                             ↳ 26: local_decls var_decl
                                                                                                                                                                                                               ↳ 8: id_list                 COLON type SEMICOLON
                                                                                                                                                                                                                    ↳ 9: id_decl
                                                                                                                                                                                                                         ↳ 11: • IDENTIFIER
      Second example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                                                               const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                                                                   KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 56: method_decls method_decl
                                                                                                     ↳ 57: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts                                                                                                  return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                                                      ↳ 28: stmts     stmt
                                                                                                                                                                                                                            ↳ 27: ε • ↳ 29: simple_stmt
                                                                                                                                                                                                                                            ↳ 32: function_call                                                    SEMICOLON
                                                                                                                                                                                                                                                  ↳ 68: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    shift/reduce conflict on token IDENTIFIER:
       27 stmts: ε •
       12 id_decl: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON method_decl KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                                                     const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                                                         KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 56: method_decl                                                                                                                                                                                                                                        method_decl
                                                                                        ↳ 57: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls                                                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                             ↳ 26: local_decls var_decl
                                                                                                                                                                                                               ↳ 8: id_list                                                 COLON type SEMICOLON
                                                                                                                                                                                                                    ↳ 9: id_decl
                                                                                                                                                                                                                         ↳ 12: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                                                               const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                                                                   KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 56: method_decls method_decl
                                                                                                     ↳ 57: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts                                                                                                  return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                                                      ↳ 28: stmts     stmt
                                                                                                                                                                                                                            ↳ 27: ε • ↳ 29: simple_stmt
                                                                                                                                                                                                                                            ↳ 32: function_call                                                    SEMICOLON
                                                                                                                                                                                                                                                  ↳ 68: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    shift/reduce conflict on token IDENTIFIER:
       27 stmts: ε •
       13 id_decl: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      First example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON method_decl KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                                                const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                                                    KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 56: method_decl                                                                                                                                                                                                                                   method_decl
                                                                                        ↳ 57: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls                                                                                    stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                             ↳ 26: local_decls var_decl
                                                                                                                                                                                                               ↳ 8: id_list                                            COLON type SEMICOLON
                                                                                                                                                                                                                    ↳ 9: id_decl
                                                                                                                                                                                                                         ↳ 13: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      Second example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                                                               const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                                                                   KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 56: method_decls method_decl
                                                                                                     ↳ 57: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts                                                                                                  return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                                                      ↳ 28: stmts     stmt
                                                                                                                                                                                                                            ↳ 27: ε • ↳ 29: simple_stmt
                                                                                                                                                                                                                                            ↳ 32: function_call                                                    SEMICOLON
                                                                                                                                                                                                                                                  ↳ 68: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS



State 193

   64 return_opt: KEYWORD_RETURN • SEMICOLON
   65           | KEYWORD_RETURN • expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    SEMICOLON         shift, and go to state 209
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 210
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 194

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 211


State 195

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN]
   43 lvalue: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]

    OP_COLON_ASSIGN  reduce using rule 12 (id_decl)
    $default         reduce using rule 43 (lvalue)


State 196

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    COLON  shift, and go to state 212


State 197

   46 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDWHILE SEMICOLON
   98 primary: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR]

    COLON  shift, and go to state 213

    $default  reduce using rule 98 (primary)

    Conflict between rule 98 and token COLON resolved as shift (RIGHT_PARENTHESIS < COLON).


State 198

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   45              | KEYWORD_WHILE expr COLON stmts • KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_ENDWHILE  shift, and go to state 214
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    function_call         go to state 157


State 199

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   99 range_expr: LEFT_BRACKET • expr COLON expr RIGHT_BRACKET
  100           | LEFT_BRACKET • expr COLON expr COLON expr RIGHT_BRACKET
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 215
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 200

   47 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 216


State 201

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_FOR  shift, and go to state 217


State 202

   36 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON •

    $default  reduce using rule 36 (assignment_statement)


State 203

   37 assignment_statement: lvalue OP_PLUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 37 (assignment_statement)


State 204

   38 assignment_statement: lvalue OP_MINUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 38 (assignment_statement)


State 205

   39 assignment_statement: lvalue OP_MULT_ASSIGN expr SEMICOLON •

    $default  reduce using rule 39 (assignment_statement)


State 206

   40 assignment_statement: lvalue OP_DIV_ASSIGN expr SEMICOLON •

    $default  reduce using rule 40 (assignment_statement)


State 207

   41 assignment_statement: lvalue OP_MOD_ASSIGN expr SEMICOLON •

    $default  reduce using rule 41 (assignment_statement)


State 208

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   63 return_opt: ε •  [KEYWORD_ENDDEF]
   64           | • KEYWORD_RETURN SEMICOLON
   65           | • KEYWORD_RETURN expr SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_RETURN    shift, and go to state 193
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    $default  reduce using rule 63 (return_opt)

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    return_opt            go to state 218
    function_call         go to state 157


State 209

   64 return_opt: KEYWORD_RETURN SEMICOLON •

    $default  reduce using rule 64 (return_opt)


State 210

   65 return_opt: KEYWORD_RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 219


State 211

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 220


State 212

   27 stmts: ε •
   28      | • stmts stmt
   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts else_part KEYWORD_ENDIF SEMICOLON

    $default  reduce using rule 27 (stmts)

    stmts  go to state 221


State 213

   27 stmts: ε •
   28      | • stmts stmt
   46 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDWHILE SEMICOLON

    $default  reduce using rule 27 (stmts)

    stmts  go to state 222


State 214

   45 compound_stmt: KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 223


State 215

   99 range_expr: LEFT_BRACKET expr • COLON expr RIGHT_BRACKET
  100           | LEFT_BRACKET expr • COLON expr COLON expr RIGHT_BRACKET

    COLON  shift, and go to state 224


State 216

   27 stmts: ε •
   28      | • stmts stmt
   47 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON • stmts KEYWORD_ENDFOR SEMICOLON

    $default  reduce using rule 27 (stmts)

    stmts  go to state 225


State 217

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 226


State 218

   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 227


State 219

   65 return_opt: KEYWORD_RETURN expr SEMICOLON •

    $default  reduce using rule 65 (return_opt)


State 220

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 16 (func_decl)


State 221

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   44              | KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   66 else_part: ε •  [KEYWORD_ENDIF]
   67          | • KEYWORD_ELSE COLON stmts
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_ELSE      shift, and go to state 228
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    $default  reduce using rule 66 (else_part)

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    else_part             go to state 229
    function_call         go to state 157


State 222

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_ENDWHILE  shift, and go to state 230
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    function_call         go to state 157


State 223

   45 compound_stmt: KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 45 (compound_stmt)


State 224

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   99 range_expr: LEFT_BRACKET expr COLON • expr RIGHT_BRACKET
  100           | LEFT_BRACKET expr COLON • expr COLON expr RIGHT_BRACKET
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 231
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 225

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts • KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_ENDFOR    shift, and go to state 232
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    function_call         go to state 157


State 226

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    COLON  shift, and go to state 233


State 227

   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 234


State 228

   67 else_part: KEYWORD_ELSE • COLON stmts

    COLON  shift, and go to state 235


State 229

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part • KEYWORD_ENDIF SEMICOLON

    KEYWORD_ENDIF  shift, and go to state 236


State 230

   46 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 237


State 231

   99 range_expr: LEFT_BRACKET expr COLON expr • RIGHT_BRACKET
  100           | LEFT_BRACKET expr COLON expr • COLON expr RIGHT_BRACKET

    COLON          shift, and go to state 238
    RIGHT_BRACKET  shift, and go to state 239


State 232

   47 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 240


State 233

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • expr RIGHT_BRACKET COLON type SEMICOLON
   49              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER        shift, and go to state 241
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    KEYWORD_SCALAR    shift, and go to state 33
    KEYWORD_STR       shift, and go to state 34
    KEYWORD_INTEGER   shift, and go to state 35
    KEYWORD_COMP      shift, and go to state 36
    KEYWORD_BOOL      shift, and go to state 37
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48
    LEFT_BRACKET      shift, and go to state 38

    function_call    go to state 50
    expr             go to state 242
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58
    type             go to state 243


State 234

   57 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 57 (method_decl)


State 235

   27 stmts: ε •
   28      | • stmts stmt
   67 else_part: KEYWORD_ELSE COLON • stmts

    $default  reduce using rule 27 (stmts)

    stmts  go to state 244


State 236

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 245


State 237

   46 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 46 (compound_stmt)


State 238

   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  100 range_expr: LEFT_BRACKET expr COLON expr COLON • expr RIGHT_BRACKET
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 246
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 239

   99 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 99 (range_expr)


State 240

   47 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 47 (compound_stmt)


State 241

   68 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   95 primary: IDENTIFIER •  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, RIGHT_BRACKET]
  111 type: IDENTIFIER •  [KEYWORD_IN]

    LEFT_PARENTHESIS  shift, and go to state 70

    KEYWORD_IN  reduce using rule 111 (type)
    $default    reduce using rule 95 (primary)


State 242

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 247


State 243

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type • KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_IN  shift, and go to state 248


State 244

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 stmts: stmts • stmt
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   47              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   49              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   67 else_part: KEYWORD_ELSE COLON stmts •  [KEYWORD_ENDIF]
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 143
    KEYWORD_IF        shift, and go to state 144
    KEYWORD_WHILE     shift, and go to state 145
    KEYWORD_FOR       shift, and go to state 146
    KEYWORD_BREAK     shift, and go to state 148
    KEYWORD_CONTINUE  shift, and go to state 149
    SEMICOLON         shift, and go to state 150

    $default  reduce using rule 67 (else_part)

    id_decl               go to state 151
    stmt                  go to state 152
    simple_stmt           go to state 153
    assignment_statement  go to state 154
    lvalue                go to state 155
    compound_stmt         go to state 156
    function_call         go to state 157


State 245

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON •

    $default  reduce using rule 44 (compound_stmt)


State 246

  100 range_expr: LEFT_BRACKET expr COLON expr COLON expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 249


State 247

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 250


State 248

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN • IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 251


State 249

  100 range_expr: LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 100 (range_expr)


State 250

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 252


State 251

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER • KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_OF  shift, and go to state 253


State 252

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 254


State 253

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF • expr RIGHT_BRACKET COLON type SEMICOLON
   68 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 expr: • logical_expr
   74 logical_expr: • relational_expr
   75             | • logical_expr OP_AND relational_expr
   76             | • logical_expr OP_OR relational_expr
   77 relational_expr: • arithmetic_expr
   78                | • relational_expr OP_LT arithmetic_expr
   79                | • relational_expr OP_LE arithmetic_expr
   80                | • relational_expr OP_GT arithmetic_expr
   81                | • relational_expr OP_GE arithmetic_expr
   82                | • relational_expr OP_EQ arithmetic_expr
   83                | • relational_expr OP_NEQ arithmetic_expr
   84 arithmetic_expr: • term
   85                | • arithmetic_expr OP_PLUS term
   86                | • arithmetic_expr OP_MINUS term
   87 term: • factor
   88     | • term OP_MULT factor
   89     | • term OP_DIV factor
   90     | • term OP_MOD factor
   91 factor: • primary
   92       | • OP_MINUS factor
   93       | • OP_NOT factor
   94       | • factor OP_POWER primary
   95 primary: • IDENTIFIER
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 41
    CONST_INT         shift, and go to state 42
    CONST_REAL        shift, and go to state 43
    BOOL_TRUE         shift, and go to state 44
    BOOL_FALSE        shift, and go to state 45
    OP_MINUS          shift, and go to state 46
    OP_NOT            shift, and go to state 47
    LEFT_PARENTHESIS  shift, and go to state 48

    function_call    go to state 50
    expr             go to state 255
    logical_expr     go to state 52
    relational_expr  go to state 53
    arithmetic_expr  go to state 54
    term             go to state 55
    factor           go to state 56
    primary          go to state 57
    literal          go to state 58


State 254

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 48 (compound_stmt)


State 255

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 256


State 256

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 257


State 257

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 32
    KEYWORD_SCALAR   shift, and go to state 33
    KEYWORD_STR      shift, and go to state 34
    KEYWORD_INTEGER  shift, and go to state 35
    KEYWORD_COMP     shift, and go to state 36
    KEYWORD_BOOL     shift, and go to state 37
    LEFT_BRACKET     shift, and go to state 38

    type  go to state 258


State 258

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 259


State 259

   49 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 49 (compound_stmt)
