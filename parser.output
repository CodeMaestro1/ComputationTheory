Nonterminals useless in grammar

    type_decls
    type_basic_decl
    complex_type_decls
    array_decls


Terminals unused in grammar

    OP_PLUS_ASSIGN
    OP_MINUS_ASSIGN
    OP_MULT_ASSIGN
    OP_DIV_ASSIGN
    OP_MOD_ASSIGN
    DOT


Rules useless in grammar

   96 type_decls: ε
   97           | type_decls type_basic_decl
   98           | type_decls complex_type_decls

   99 type_basic_decl: KEYWORD_INTEGER
  100                | KEYWORD_SCALAR
  101                | KEYWORD_STR
  102                | KEYWORD_BOOL

  103 complex_type_decls: comp_decls
  104                   | array_decls

  105 array_decls: IDENTIFIER LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type SEMICOLON
  106            | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON


State 148 conflicts: 1 shift/reduce
State 169 conflicts: 1 shift/reduce
State 175 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: comp_decls const_decls var_decls func_decls main_func

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON

    3 comp_decls: ε
    4           | comp_decls comp_decl

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    6 var_decls: ε
    7          | var_decls var_decl

    8 var_decl: id_list COLON type SEMICOLON

    9 id_list: id_decl
   10        | id_list COMMA id_decl

   11 id_decl: IDENTIFIER
   12        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   14 func_decls: ε
   15           | func_decls func_decl

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   17 return_type_decl: ε
   18                 | ARROW return_type_opt

   19 param: IDENTIFIER COLON type
   20      | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type

   21 param_list_opt: ε
   22               | param_list

   23 param_list: param
   24           | param_list COMMA param

   25 local_decls: ε
   26            | local_decls const_decl
   27            | local_decls var_decl

   28 stmts: ε
   29      | stmts stmt

   30 stmt: IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | KEYWORD_BREAK SEMICOLON
   38     | KEYWORD_CONTINUE SEMICOLON
   39     | function_call SEMICOLON
   40     | SEMICOLON

   41 member_decls: ε
   42             | member_decls member_decl

   43 member_decl: id_list COLON type SEMICOLON

   44 method_decls: ε
   45             | method_decls method_decl

   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   47 const_decls: ε
   48            | const_decls const_decl

   49 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

   50 return_type_opt: ε
   51                | type

   52 return_opt: ε
   53           | KEYWORD_RETURN SEMICOLON
   54           | KEYWORD_RETURN expr SEMICOLON

   55 else_part: ε
   56          | KEYWORD_ELSE COLON stmts

   57 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

   58 arg_list_opt: ε
   59             | arg_list

   60 arg_list: expr
   61         | arg_list COMMA expr

   62 expr: expr OP_PLUS expr
   63     | expr OP_MINUS expr
   64     | expr OP_MULT expr
   65     | expr OP_DIV expr
   66     | expr OP_MOD expr
   67     | expr OP_POWER expr
   68     | expr OP_EQ expr
   69     | expr OP_NEQ expr
   70     | expr OP_LT expr
   71     | expr OP_LE expr
   72     | expr OP_GT expr
   73     | expr OP_GE expr
   74     | expr OP_AND expr
   75     | expr OP_OR expr
   76     | OP_NOT expr
   77     | LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | literal
   79     | IDENTIFIER
   80     | function_call

   81 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET
   82           | LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

   83 literal: CONST_INT
   84        | CONST_REAL
   85        | CONST_STRING
   86        | BOOL_TRUE
   87        | BOOL_FALSE

   88 type: KEYWORD_INTEGER
   89     | KEYWORD_SCALAR
   90     | KEYWORD_STR
   91     | KEYWORD_BOOL
   92     | KEYWORD_COMP
   93     | IDENTIFIER
   94     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | LEFT_BRACKET RIGHT_BRACKET COLON type


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <stringVal> (258) 5 11 12 13 16 19 20 30 31 32 36 46 49 57 79 93
    CONST_STRING <stringVal> (259) 85
    CONST_INT <integerVal> (260) 83 94
    CONST_REAL <floatVal> (261) 84
    KEYWORD_SCALAR (262) 89
    KEYWORD_STR <stringVal> (263) 90
    OP_COLON_ASSIGN <stringVal> (264) 31 32
    KEYWORD_INTEGER <integerVal> (265) 88
    KEYWORD_IF (266) 33
    KEYWORD_ELSE (267) 56
    KEYWORD_ENDIF (268) 33
    KEYWORD_WHILE (269) 34 35
    KEYWORD_ENDWHILE (270) 34 35
    KEYWORD_FOR (271) 31 32 36
    KEYWORD_IN (272) 32 36
    KEYWORD_ENDFOR (273) 36
    KEYWORD_DEF (274) 2 16 46
    KEYWORD_ENDDEF (275) 2 16 46
    KEYWORD_MAIN (276) 2
    KEYWORD_RETURN (277) 53 54
    KEYWORD_CONST (278) 49
    KEYWORD_COMP (279) 5 92
    KEYWORD_ENDCOMP (280) 5
    KEYWORD_OF (281) 32
    KEYWORD_BOOL (282) 91
    BOOL_TRUE (283) 86
    BOOL_FALSE (284) 87
    KEYWORD_BREAK (285) 37
    KEYWORD_CONTINUE (286) 38
    OP_PLUS (287) 62
    OP_MINUS (288) 63
    OP_MULT (289) 64
    OP_DIV (290) 65
    OP_MOD (291) 66
    OP_POWER (292) 67
    OP_EQ (293) 68
    OP_NEQ (294) 69
    OP_LT (295) 70
    OP_LE (296) 71
    OP_GT (297) 72
    OP_GE (298) 73
    OP_AND (299) 74
    OP_OR (300) 75
    OP_NOT (301) 76
    OP_ASSIGN (302) 30 49
    OP_PLUS_ASSIGN (303)
    OP_MINUS_ASSIGN (304)
    OP_MULT_ASSIGN (305)
    OP_DIV_ASSIGN (306)
    OP_MOD_ASSIGN (307)
    SEMICOLON (308) 2 5 8 16 30 31 32 33 34 35 36 37 38 39 40 43 46 49 53 54
    COLON (309) 2 5 8 16 19 20 31 32 33 34 35 36 43 46 49 56 81 82 94 95
    COMMA (310) 10 24 61
    DOT (311)
    LEFT_PARENTHESIS (312) 2 16 33 35 46 57 77
    RIGHT_PARENTHESIS (313) 2 16 33 35 46 57 77
    LEFT_BRACKET (314) 12 13 20 31 32 81 82 94 95
    RIGHT_BRACKET (315) 12 13 20 31 32 81 82 94 95
    ARROW (316) 18


Nonterminals, with rules where they appear

    $accept (62)
        on left: 0
    program (63)
        on left: 1
        on right: 0
    main_func (64)
        on left: 2
        on right: 1
    comp_decls (65)
        on left: 3 4
        on right: 1 4
    comp_decl (66)
        on left: 5
        on right: 4
    var_decls (67)
        on left: 6 7
        on right: 1 7
    var_decl (68)
        on left: 8
        on right: 7 27
    id_list (69)
        on left: 9 10
        on right: 8 10 43
    id_decl (70)
        on left: 11 12 13
        on right: 9 10
    func_decls (71)
        on left: 14 15
        on right: 1 15
    func_decl (72)
        on left: 16
        on right: 15
    return_type_decl (73)
        on left: 17 18
        on right: 16
    param (74)
        on left: 19 20
        on right: 23 24
    param_list_opt (75)
        on left: 21 22
        on right: 16 46
    param_list (76)
        on left: 23 24
        on right: 22 24
    local_decls (77)
        on left: 25 26 27
        on right: 16 26 27 46
    stmts (78)
        on left: 28 29
        on right: 2 16 29 33 34 35 36 46 56
    stmt (79)
        on left: 30 31 32 33 34 35 36 37 38 39 40
        on right: 29
    member_decls (80)
        on left: 41 42
        on right: 5 42
    member_decl (81)
        on left: 43
        on right: 42
    method_decls (82)
        on left: 44 45
        on right: 5 45
    method_decl (83)
        on left: 46
        on right: 45
    const_decls (84)
        on left: 47 48
        on right: 1 48
    const_decl (85)
        on left: 49
        on right: 26 48
    return_type_opt (86)
        on left: 50 51
        on right: 18 46
    return_opt (87)
        on left: 52 53 54
        on right: 16 46
    else_part (88)
        on left: 55 56
        on right: 33
    function_call (89)
        on left: 57
        on right: 39 80
    arg_list_opt (90)
        on left: 58 59
        on right: 57
    arg_list (91)
        on left: 60 61
        on right: 59 61
    expr (92)
        on left: 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
        on right: 12 30 31 32 33 34 35 54 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 81 82
    range_expr (93)
        on left: 81 82
        on right: 36
    literal (94)
        on left: 83 84 85 86 87
        on right: 49 78
    type (95)
        on left: 88 89 90 91 92 93 94 95
        on right: 8 19 20 31 32 43 49 51 94 95


State 0

    0 $accept: • program $end
    1 program: • comp_decls const_decls var_decls func_decls main_func
    3 comp_decls: ε •
    4           | • comp_decls comp_decl

    $default  reduce using rule 3 (comp_decls)

    program     go to state 1
    comp_decls  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: comp_decls • const_decls var_decls func_decls main_func
    4 comp_decls: comp_decls • comp_decl
    5 comp_decl: • KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
   47 const_decls: ε •  [IDENTIFIER, KEYWORD_DEF, KEYWORD_CONST]
   48            | • const_decls const_decl

    KEYWORD_COMP  shift, and go to state 4

    $default  reduce using rule 47 (const_decls)

    comp_decl    go to state 5
    const_decls  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    5 comp_decl: KEYWORD_COMP • IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    4 comp_decls: comp_decls comp_decl •

    $default  reduce using rule 4 (comp_decls)


State 6

    1 program: comp_decls const_decls • var_decls func_decls main_func
    6 var_decls: ε •  [IDENTIFIER, KEYWORD_DEF]
    7          | • var_decls var_decl
   48 const_decls: const_decls • const_decl
   49 const_decl: • KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    KEYWORD_CONST  shift, and go to state 8

    $default  reduce using rule 6 (var_decls)

    var_decls   go to state 9
    const_decl  go to state 10


State 7

    5 comp_decl: KEYWORD_COMP IDENTIFIER • COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    COLON  shift, and go to state 11


State 8

   49 const_decl: KEYWORD_CONST • IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    IDENTIFIER  shift, and go to state 12


State 9

    1 program: comp_decls const_decls var_decls • func_decls main_func
    7 var_decls: var_decls • var_decl
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14 func_decls: ε •  [KEYWORD_DEF]
   15           | • func_decls func_decl

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 14 (func_decls)

    var_decl    go to state 14
    id_list     go to state 15
    id_decl     go to state 16
    func_decls  go to state 17


State 10

   48 const_decls: const_decls const_decl •

    $default  reduce using rule 48 (const_decls)


State 11

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON • member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
   41 member_decls: ε •
   42             | • member_decls member_decl

    $default  reduce using rule 41 (member_decls)

    member_decls  go to state 18


State 12

   49 const_decl: KEYWORD_CONST IDENTIFIER • COLON type OP_ASSIGN literal SEMICOLON

    COLON  shift, and go to state 19


State 13

   11 id_decl: IDENTIFIER •  [COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 20

    $default  reduce using rule 11 (id_decl)


State 14

    7 var_decls: var_decls var_decl •

    $default  reduce using rule 7 (var_decls)


State 15

    8 var_decl: id_list • COLON type SEMICOLON
   10 id_list: id_list • COMMA id_decl

    COLON  shift, and go to state 21
    COMMA  shift, and go to state 22


State 16

    9 id_list: id_decl •

    $default  reduce using rule 9 (id_list)


State 17

    1 program: comp_decls const_decls var_decls func_decls • main_func
    2 main_func: • KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON
   15 func_decls: func_decls • func_decl
   16 func_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF  shift, and go to state 23

    main_func  go to state 24
    func_decl  go to state 25


State 18

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls • method_decls KEYWORD_ENDCOMP SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   42 member_decls: member_decls • member_decl
   43 member_decl: • id_list COLON type SEMICOLON
   44 method_decls: ε •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   45             | • method_decls method_decl

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 44 (method_decls)

    id_list       go to state 26
    id_decl       go to state 16
    member_decl   go to state 27
    method_decls  go to state 28


State 19

   49 const_decl: KEYWORD_CONST IDENTIFIER COLON • type OP_ASSIGN literal SEMICOLON
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 36


State 20

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44
    RIGHT_BRACKET     shift, and go to state 45

    function_call  go to state 46
    expr           go to state 47
    literal        go to state 48


State 21

    8 var_decl: id_list COLON • type SEMICOLON
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 49


State 22

   10 id_list: id_list COMMA • id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 13

    id_decl  go to state 50


State 23

    2 main_func: KEYWORD_DEF • KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON
   16 func_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER    shift, and go to state 51
    KEYWORD_MAIN  shift, and go to state 52


State 24

    1 program: comp_decls const_decls var_decls func_decls main_func •

    $default  reduce using rule 1 (program)


State 25

   15 func_decls: func_decls func_decl •

    $default  reduce using rule 15 (func_decls)


State 26

   10 id_list: id_list • COMMA id_decl
   43 member_decl: id_list • COLON type SEMICOLON

    COLON  shift, and go to state 53
    COMMA  shift, and go to state 22


State 27

   42 member_decls: member_decls member_decl •

    $default  reduce using rule 42 (member_decls)


State 28

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls • KEYWORD_ENDCOMP SEMICOLON
   45 method_decls: method_decls • method_decl
   46 method_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF      shift, and go to state 54
    KEYWORD_ENDCOMP  shift, and go to state 55

    method_decl  go to state 56


State 29

   93 type: IDENTIFIER •

    $default  reduce using rule 93 (type)


State 30

   89 type: KEYWORD_SCALAR •

    $default  reduce using rule 89 (type)


State 31

   90 type: KEYWORD_STR •

    $default  reduce using rule 90 (type)


State 32

   88 type: KEYWORD_INTEGER •

    $default  reduce using rule 88 (type)


State 33

   92 type: KEYWORD_COMP •

    $default  reduce using rule 92 (type)


State 34

   91 type: KEYWORD_BOOL •

    $default  reduce using rule 91 (type)


State 35

   94 type: LEFT_BRACKET • CONST_INT RIGHT_BRACKET COLON type
   95     | LEFT_BRACKET • RIGHT_BRACKET COLON type

    CONST_INT      shift, and go to state 57
    RIGHT_BRACKET  shift, and go to state 58


State 36

   49 const_decl: KEYWORD_CONST IDENTIFIER COLON type • OP_ASSIGN literal SEMICOLON

    OP_ASSIGN  shift, and go to state 59


State 37

   57 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79 expr: IDENTIFIER •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]

    LEFT_PARENTHESIS  shift, and go to state 60

    $default  reduce using rule 79 (expr)


State 38

   85 literal: CONST_STRING •

    $default  reduce using rule 85 (literal)


State 39

   83 literal: CONST_INT •

    $default  reduce using rule 83 (literal)


State 40

   84 literal: CONST_REAL •

    $default  reduce using rule 84 (literal)


State 41

   86 literal: BOOL_TRUE •

    $default  reduce using rule 86 (literal)


State 42

   87 literal: BOOL_FALSE •

    $default  reduce using rule 87 (literal)


State 43

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   76     | OP_NOT • expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 61
    literal        go to state 48


State 44

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   77     | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 62
    literal        go to state 48


State 45

   13 id_decl: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 13 (id_decl)


State 46

   80 expr: function_call •

    $default  reduce using rule 80 (expr)


State 47

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS        shift, and go to state 63
    OP_MINUS       shift, and go to state 64
    OP_MULT        shift, and go to state 65
    OP_DIV         shift, and go to state 66
    OP_MOD         shift, and go to state 67
    OP_POWER       shift, and go to state 68
    OP_EQ          shift, and go to state 69
    OP_NEQ         shift, and go to state 70
    OP_LT          shift, and go to state 71
    OP_LE          shift, and go to state 72
    OP_GT          shift, and go to state 73
    OP_GE          shift, and go to state 74
    OP_AND         shift, and go to state 75
    OP_OR          shift, and go to state 76
    RIGHT_BRACKET  shift, and go to state 77


State 48

   78 expr: literal •

    $default  reduce using rule 78 (expr)


State 49

    8 var_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 78


State 50

   10 id_list: id_list COMMA id_decl •

    $default  reduce using rule 10 (id_list)


State 51

   16 func_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 79


State 52

    2 main_func: KEYWORD_DEF KEYWORD_MAIN • LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 80


State 53

   43 member_decl: id_list COLON • type SEMICOLON
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 81


State 54

   46 method_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 82


State 55

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 83


State 56

   45 method_decls: method_decls method_decl •

    $default  reduce using rule 45 (method_decls)


State 57

   94 type: LEFT_BRACKET CONST_INT • RIGHT_BRACKET COLON type

    RIGHT_BRACKET  shift, and go to state 84


State 58

   95 type: LEFT_BRACKET RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 85


State 59

   49 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN • literal SEMICOLON
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    CONST_STRING  shift, and go to state 38
    CONST_INT     shift, and go to state 39
    CONST_REAL    shift, and go to state 40
    BOOL_TRUE     shift, and go to state 41
    BOOL_FALSE    shift, and go to state 42

    literal  go to state 86


State 60

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   57              | IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   58 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   59             | • arg_list
   60 arg_list: • expr
   61         | • arg_list COMMA expr
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    $default  reduce using rule 58 (arg_list_opt)

    function_call  go to state 46
    arg_list_opt   go to state 87
    arg_list       go to state 88
    expr           go to state 89
    literal        go to state 48


State 61

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr
   76     | OP_NOT expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]

    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 76 (expr)

    Conflict between rule 76 and token OP_PLUS resolved as reduce (OP_PLUS < OP_NOT).
    Conflict between rule 76 and token OP_MINUS resolved as reduce (OP_MINUS < OP_NOT).
    Conflict between rule 76 and token OP_MULT resolved as reduce (OP_MULT < OP_NOT).
    Conflict between rule 76 and token OP_DIV resolved as reduce (OP_DIV < OP_NOT).
    Conflict between rule 76 and token OP_MOD resolved as reduce (OP_MOD < OP_NOT).
    Conflict between rule 76 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT).
    Conflict between rule 76 and token OP_EQ resolved as reduce (OP_EQ < OP_NOT).
    Conflict between rule 76 and token OP_NEQ resolved as reduce (OP_NEQ < OP_NOT).
    Conflict between rule 76 and token OP_LT resolved as reduce (OP_LT < OP_NOT).
    Conflict between rule 76 and token OP_LE resolved as reduce (OP_LE < OP_NOT).
    Conflict between rule 76 and token OP_GT resolved as reduce (OP_GT < OP_NOT).
    Conflict between rule 76 and token OP_GE resolved as reduce (OP_GE < OP_NOT).
    Conflict between rule 76 and token OP_AND resolved as shift (OP_NOT < OP_AND).
    Conflict between rule 76 and token OP_OR resolved as shift (OP_NOT < OP_OR).


State 62

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr
   77     | LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    OP_PLUS            shift, and go to state 63
    OP_MINUS           shift, and go to state 64
    OP_MULT            shift, and go to state 65
    OP_DIV             shift, and go to state 66
    OP_MOD             shift, and go to state 67
    OP_POWER           shift, and go to state 68
    OP_EQ              shift, and go to state 69
    OP_NEQ             shift, and go to state 70
    OP_LT              shift, and go to state 71
    OP_LE              shift, and go to state 72
    OP_GT              shift, and go to state 73
    OP_GE              shift, and go to state 74
    OP_AND             shift, and go to state 75
    OP_OR              shift, and go to state 76
    RIGHT_PARENTHESIS  shift, and go to state 90


State 63

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   62     | expr OP_PLUS • expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 91
    literal        go to state 48


State 64

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   63     | expr OP_MINUS • expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 92
    literal        go to state 48


State 65

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   64     | expr OP_MULT • expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 93
    literal        go to state 48


State 66

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   65     | expr OP_DIV • expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 94
    literal        go to state 48


State 67

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   66     | expr OP_MOD • expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 95
    literal        go to state 48


State 68

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   67     | expr OP_POWER • expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 96
    literal        go to state 48


State 69

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   68     | expr OP_EQ • expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 97
    literal        go to state 48


State 70

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   69     | expr OP_NEQ • expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 98
    literal        go to state 48


State 71

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   70     | expr OP_LT • expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 99
    literal        go to state 48


State 72

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   71     | expr OP_LE • expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 100
    literal        go to state 48


State 73

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   72     | expr OP_GT • expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 101
    literal        go to state 48


State 74

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   73     | expr OP_GE • expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 102
    literal        go to state 48


State 75

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   74     | expr OP_AND • expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 103
    literal        go to state 48


State 76

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   75     | expr OP_OR • expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 104
    literal        go to state 48


State 77

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 12 (id_decl)


State 78

    8 var_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 8 (var_decl)


State 79

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   19 param: • IDENTIFIER COLON type
   20      | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type
   21 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   22               | • param_list
   23 param_list: • param
   24           | • param_list COMMA param

    IDENTIFIER  shift, and go to state 105

    $default  reduce using rule 21 (param_list_opt)

    param           go to state 106
    param_list_opt  go to state 107
    param_list      go to state 108


State 80

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 109


State 81

   43 member_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 110


State 82

   46 method_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 111


State 83

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON •

    $default  reduce using rule 5 (comp_decl)


State 84

   94 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 112


State 85

   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type
   95     | LEFT_BRACKET RIGHT_BRACKET COLON • type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 113


State 86

   49 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal • SEMICOLON

    SEMICOLON  shift, and go to state 114


State 87

   57 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 115


State 88

   59 arg_list_opt: arg_list •  [RIGHT_PARENTHESIS]
   61 arg_list: arg_list • COMMA expr

    COMMA  shift, and go to state 116

    $default  reduce using rule 59 (arg_list_opt)


State 89

   60 arg_list: expr •  [COMMA, RIGHT_PARENTHESIS]
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_MULT   shift, and go to state 65
    OP_DIV    shift, and go to state 66
    OP_MOD    shift, and go to state 67
    OP_POWER  shift, and go to state 68
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76

    $default  reduce using rule 60 (arg_list)


State 90

   77 expr: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •

    $default  reduce using rule 77 (expr)


State 91

   62 expr: expr • OP_PLUS expr
   62     | expr OP_PLUS expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_EQ   shift, and go to state 69
    OP_NEQ  shift, and go to state 70
    OP_LT   shift, and go to state 71
    OP_LE   shift, and go to state 72
    OP_GT   shift, and go to state 73
    OP_GE   shift, and go to state 74
    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 62 (expr)

    Conflict between rule 62 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 62 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 62 and token OP_MULT resolved as reduce (OP_MULT < OP_PLUS).
    Conflict between rule 62 and token OP_DIV resolved as reduce (OP_DIV < OP_PLUS).
    Conflict between rule 62 and token OP_MOD resolved as reduce (OP_MOD < OP_PLUS).
    Conflict between rule 62 and token OP_POWER resolved as reduce (OP_POWER < OP_PLUS).
    Conflict between rule 62 and token OP_EQ resolved as shift (OP_PLUS < OP_EQ).
    Conflict between rule 62 and token OP_NEQ resolved as shift (OP_PLUS < OP_NEQ).
    Conflict between rule 62 and token OP_LT resolved as shift (OP_PLUS < OP_LT).
    Conflict between rule 62 and token OP_LE resolved as shift (OP_PLUS < OP_LE).
    Conflict between rule 62 and token OP_GT resolved as shift (OP_PLUS < OP_GT).
    Conflict between rule 62 and token OP_GE resolved as shift (OP_PLUS < OP_GE).
    Conflict between rule 62 and token OP_AND resolved as shift (OP_PLUS < OP_AND).
    Conflict between rule 62 and token OP_OR resolved as shift (OP_PLUS < OP_OR).


State 92

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   63     | expr OP_MINUS expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_EQ   shift, and go to state 69
    OP_NEQ  shift, and go to state 70
    OP_LT   shift, and go to state 71
    OP_LE   shift, and go to state 72
    OP_GT   shift, and go to state 73
    OP_GE   shift, and go to state 74
    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 63 (expr)

    Conflict between rule 63 and token OP_PLUS resolved as reduce (%left OP_PLUS).
    Conflict between rule 63 and token OP_MINUS resolved as reduce (%left OP_MINUS).
    Conflict between rule 63 and token OP_MULT resolved as reduce (OP_MULT < OP_MINUS).
    Conflict between rule 63 and token OP_DIV resolved as reduce (OP_DIV < OP_MINUS).
    Conflict between rule 63 and token OP_MOD resolved as reduce (OP_MOD < OP_MINUS).
    Conflict between rule 63 and token OP_POWER resolved as reduce (OP_POWER < OP_MINUS).
    Conflict between rule 63 and token OP_EQ resolved as shift (OP_MINUS < OP_EQ).
    Conflict between rule 63 and token OP_NEQ resolved as shift (OP_MINUS < OP_NEQ).
    Conflict between rule 63 and token OP_LT resolved as shift (OP_MINUS < OP_LT).
    Conflict between rule 63 and token OP_LE resolved as shift (OP_MINUS < OP_LE).
    Conflict between rule 63 and token OP_GT resolved as shift (OP_MINUS < OP_GT).
    Conflict between rule 63 and token OP_GE resolved as shift (OP_MINUS < OP_GE).
    Conflict between rule 63 and token OP_AND resolved as shift (OP_MINUS < OP_AND).
    Conflict between rule 63 and token OP_OR resolved as shift (OP_MINUS < OP_OR).


State 93

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   64     | expr OP_MULT expr •  [KEYWORD_FOR, OP_MULT, OP_DIV, OP_MOD, OP_POWER, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76

    $default  reduce using rule 64 (expr)

    Conflict between rule 64 and token OP_PLUS resolved as shift (OP_MULT < OP_PLUS).
    Conflict between rule 64 and token OP_MINUS resolved as shift (OP_MULT < OP_MINUS).
    Conflict between rule 64 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 64 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 64 and token OP_MOD resolved as reduce (%left OP_MOD).
    Conflict between rule 64 and token OP_POWER resolved as reduce (OP_POWER < OP_MULT).
    Conflict between rule 64 and token OP_EQ resolved as shift (OP_MULT < OP_EQ).
    Conflict between rule 64 and token OP_NEQ resolved as shift (OP_MULT < OP_NEQ).
    Conflict between rule 64 and token OP_LT resolved as shift (OP_MULT < OP_LT).
    Conflict between rule 64 and token OP_LE resolved as shift (OP_MULT < OP_LE).
    Conflict between rule 64 and token OP_GT resolved as shift (OP_MULT < OP_GT).
    Conflict between rule 64 and token OP_GE resolved as shift (OP_MULT < OP_GE).
    Conflict between rule 64 and token OP_AND resolved as shift (OP_MULT < OP_AND).
    Conflict between rule 64 and token OP_OR resolved as shift (OP_MULT < OP_OR).


State 94

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   65     | expr OP_DIV expr •  [KEYWORD_FOR, OP_MULT, OP_DIV, OP_MOD, OP_POWER, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76

    $default  reduce using rule 65 (expr)

    Conflict between rule 65 and token OP_PLUS resolved as shift (OP_DIV < OP_PLUS).
    Conflict between rule 65 and token OP_MINUS resolved as shift (OP_DIV < OP_MINUS).
    Conflict between rule 65 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 65 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 65 and token OP_MOD resolved as reduce (%left OP_MOD).
    Conflict between rule 65 and token OP_POWER resolved as reduce (OP_POWER < OP_DIV).
    Conflict between rule 65 and token OP_EQ resolved as shift (OP_DIV < OP_EQ).
    Conflict between rule 65 and token OP_NEQ resolved as shift (OP_DIV < OP_NEQ).
    Conflict between rule 65 and token OP_LT resolved as shift (OP_DIV < OP_LT).
    Conflict between rule 65 and token OP_LE resolved as shift (OP_DIV < OP_LE).
    Conflict between rule 65 and token OP_GT resolved as shift (OP_DIV < OP_GT).
    Conflict between rule 65 and token OP_GE resolved as shift (OP_DIV < OP_GE).
    Conflict between rule 65 and token OP_AND resolved as shift (OP_DIV < OP_AND).
    Conflict between rule 65 and token OP_OR resolved as shift (OP_DIV < OP_OR).


State 95

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   66     | expr OP_MOD expr •  [KEYWORD_FOR, OP_MULT, OP_DIV, OP_MOD, OP_POWER, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76

    $default  reduce using rule 66 (expr)

    Conflict between rule 66 and token OP_PLUS resolved as shift (OP_MOD < OP_PLUS).
    Conflict between rule 66 and token OP_MINUS resolved as shift (OP_MOD < OP_MINUS).
    Conflict between rule 66 and token OP_MULT resolved as reduce (%left OP_MULT).
    Conflict between rule 66 and token OP_DIV resolved as reduce (%left OP_DIV).
    Conflict between rule 66 and token OP_MOD resolved as reduce (%left OP_MOD).
    Conflict between rule 66 and token OP_POWER resolved as reduce (OP_POWER < OP_MOD).
    Conflict between rule 66 and token OP_EQ resolved as shift (OP_MOD < OP_EQ).
    Conflict between rule 66 and token OP_NEQ resolved as shift (OP_MOD < OP_NEQ).
    Conflict between rule 66 and token OP_LT resolved as shift (OP_MOD < OP_LT).
    Conflict between rule 66 and token OP_LE resolved as shift (OP_MOD < OP_LE).
    Conflict between rule 66 and token OP_GT resolved as shift (OP_MOD < OP_GT).
    Conflict between rule 66 and token OP_GE resolved as shift (OP_MOD < OP_GE).
    Conflict between rule 66 and token OP_AND resolved as shift (OP_MOD < OP_AND).
    Conflict between rule 66 and token OP_OR resolved as shift (OP_MOD < OP_OR).


State 96

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   67     | expr OP_POWER expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_MULT   shift, and go to state 65
    OP_DIV    shift, and go to state 66
    OP_MOD    shift, and go to state 67
    OP_POWER  shift, and go to state 68
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76

    $default  reduce using rule 67 (expr)

    Conflict between rule 67 and token OP_PLUS resolved as shift (OP_POWER < OP_PLUS).
    Conflict between rule 67 and token OP_MINUS resolved as shift (OP_POWER < OP_MINUS).
    Conflict between rule 67 and token OP_MULT resolved as shift (OP_POWER < OP_MULT).
    Conflict between rule 67 and token OP_DIV resolved as shift (OP_POWER < OP_DIV).
    Conflict between rule 67 and token OP_MOD resolved as shift (OP_POWER < OP_MOD).
    Conflict between rule 67 and token OP_POWER resolved as shift (%right OP_POWER).
    Conflict between rule 67 and token OP_EQ resolved as shift (OP_POWER < OP_EQ).
    Conflict between rule 67 and token OP_NEQ resolved as shift (OP_POWER < OP_NEQ).
    Conflict between rule 67 and token OP_LT resolved as shift (OP_POWER < OP_LT).
    Conflict between rule 67 and token OP_LE resolved as shift (OP_POWER < OP_LE).
    Conflict between rule 67 and token OP_GT resolved as shift (OP_POWER < OP_GT).
    Conflict between rule 67 and token OP_GE resolved as shift (OP_POWER < OP_GE).
    Conflict between rule 67 and token OP_AND resolved as shift (OP_POWER < OP_AND).
    Conflict between rule 67 and token OP_OR resolved as shift (OP_POWER < OP_OR).


State 97

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   68     | expr OP_EQ expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 68 (expr)

    Conflict between rule 68 and token OP_PLUS resolved as reduce (OP_PLUS < OP_EQ).
    Conflict between rule 68 and token OP_MINUS resolved as reduce (OP_MINUS < OP_EQ).
    Conflict between rule 68 and token OP_MULT resolved as reduce (OP_MULT < OP_EQ).
    Conflict between rule 68 and token OP_DIV resolved as reduce (OP_DIV < OP_EQ).
    Conflict between rule 68 and token OP_MOD resolved as reduce (OP_MOD < OP_EQ).
    Conflict between rule 68 and token OP_POWER resolved as reduce (OP_POWER < OP_EQ).
    Conflict between rule 68 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 68 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 68 and token OP_LT resolved as reduce (OP_LT < OP_EQ).
    Conflict between rule 68 and token OP_LE resolved as reduce (OP_LE < OP_EQ).
    Conflict between rule 68 and token OP_GT resolved as reduce (OP_GT < OP_EQ).
    Conflict between rule 68 and token OP_GE resolved as reduce (OP_GE < OP_EQ).
    Conflict between rule 68 and token OP_AND resolved as shift (OP_EQ < OP_AND).
    Conflict between rule 68 and token OP_OR resolved as shift (OP_EQ < OP_OR).


State 98

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   69     | expr OP_NEQ expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 69 (expr)

    Conflict between rule 69 and token OP_PLUS resolved as reduce (OP_PLUS < OP_NEQ).
    Conflict between rule 69 and token OP_MINUS resolved as reduce (OP_MINUS < OP_NEQ).
    Conflict between rule 69 and token OP_MULT resolved as reduce (OP_MULT < OP_NEQ).
    Conflict between rule 69 and token OP_DIV resolved as reduce (OP_DIV < OP_NEQ).
    Conflict between rule 69 and token OP_MOD resolved as reduce (OP_MOD < OP_NEQ).
    Conflict between rule 69 and token OP_POWER resolved as reduce (OP_POWER < OP_NEQ).
    Conflict between rule 69 and token OP_EQ resolved as reduce (%left OP_EQ).
    Conflict between rule 69 and token OP_NEQ resolved as reduce (%left OP_NEQ).
    Conflict between rule 69 and token OP_LT resolved as reduce (OP_LT < OP_NEQ).
    Conflict between rule 69 and token OP_LE resolved as reduce (OP_LE < OP_NEQ).
    Conflict between rule 69 and token OP_GT resolved as reduce (OP_GT < OP_NEQ).
    Conflict between rule 69 and token OP_GE resolved as reduce (OP_GE < OP_NEQ).
    Conflict between rule 69 and token OP_AND resolved as shift (OP_NEQ < OP_AND).
    Conflict between rule 69 and token OP_OR resolved as shift (OP_NEQ < OP_OR).


State 99

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   70     | expr OP_LT expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_LT, OP_LE, OP_GT, OP_GE, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_EQ   shift, and go to state 69
    OP_NEQ  shift, and go to state 70
    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 70 (expr)

    Conflict between rule 70 and token OP_PLUS resolved as reduce (OP_PLUS < OP_LT).
    Conflict between rule 70 and token OP_MINUS resolved as reduce (OP_MINUS < OP_LT).
    Conflict between rule 70 and token OP_MULT resolved as reduce (OP_MULT < OP_LT).
    Conflict between rule 70 and token OP_DIV resolved as reduce (OP_DIV < OP_LT).
    Conflict between rule 70 and token OP_MOD resolved as reduce (OP_MOD < OP_LT).
    Conflict between rule 70 and token OP_POWER resolved as reduce (OP_POWER < OP_LT).
    Conflict between rule 70 and token OP_EQ resolved as shift (OP_LT < OP_EQ).
    Conflict between rule 70 and token OP_NEQ resolved as shift (OP_LT < OP_NEQ).
    Conflict between rule 70 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 70 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 70 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 70 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 70 and token OP_AND resolved as shift (OP_LT < OP_AND).
    Conflict between rule 70 and token OP_OR resolved as shift (OP_LT < OP_OR).


State 100

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   71     | expr OP_LE expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_LT, OP_LE, OP_GT, OP_GE, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_EQ   shift, and go to state 69
    OP_NEQ  shift, and go to state 70
    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 71 (expr)

    Conflict between rule 71 and token OP_PLUS resolved as reduce (OP_PLUS < OP_LE).
    Conflict between rule 71 and token OP_MINUS resolved as reduce (OP_MINUS < OP_LE).
    Conflict between rule 71 and token OP_MULT resolved as reduce (OP_MULT < OP_LE).
    Conflict between rule 71 and token OP_DIV resolved as reduce (OP_DIV < OP_LE).
    Conflict between rule 71 and token OP_MOD resolved as reduce (OP_MOD < OP_LE).
    Conflict between rule 71 and token OP_POWER resolved as reduce (OP_POWER < OP_LE).
    Conflict between rule 71 and token OP_EQ resolved as shift (OP_LE < OP_EQ).
    Conflict between rule 71 and token OP_NEQ resolved as shift (OP_LE < OP_NEQ).
    Conflict between rule 71 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 71 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 71 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 71 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 71 and token OP_AND resolved as shift (OP_LE < OP_AND).
    Conflict between rule 71 and token OP_OR resolved as shift (OP_LE < OP_OR).


State 101

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   72     | expr OP_GT expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_LT, OP_LE, OP_GT, OP_GE, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_EQ   shift, and go to state 69
    OP_NEQ  shift, and go to state 70
    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 72 (expr)

    Conflict between rule 72 and token OP_PLUS resolved as reduce (OP_PLUS < OP_GT).
    Conflict between rule 72 and token OP_MINUS resolved as reduce (OP_MINUS < OP_GT).
    Conflict between rule 72 and token OP_MULT resolved as reduce (OP_MULT < OP_GT).
    Conflict between rule 72 and token OP_DIV resolved as reduce (OP_DIV < OP_GT).
    Conflict between rule 72 and token OP_MOD resolved as reduce (OP_MOD < OP_GT).
    Conflict between rule 72 and token OP_POWER resolved as reduce (OP_POWER < OP_GT).
    Conflict between rule 72 and token OP_EQ resolved as shift (OP_GT < OP_EQ).
    Conflict between rule 72 and token OP_NEQ resolved as shift (OP_GT < OP_NEQ).
    Conflict between rule 72 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 72 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 72 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 72 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 72 and token OP_AND resolved as shift (OP_GT < OP_AND).
    Conflict between rule 72 and token OP_OR resolved as shift (OP_GT < OP_OR).


State 102

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   73     | expr OP_GE expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_LT, OP_LE, OP_GT, OP_GE, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_EQ   shift, and go to state 69
    OP_NEQ  shift, and go to state 70
    OP_AND  shift, and go to state 75
    OP_OR   shift, and go to state 76

    $default  reduce using rule 73 (expr)

    Conflict between rule 73 and token OP_PLUS resolved as reduce (OP_PLUS < OP_GE).
    Conflict between rule 73 and token OP_MINUS resolved as reduce (OP_MINUS < OP_GE).
    Conflict between rule 73 and token OP_MULT resolved as reduce (OP_MULT < OP_GE).
    Conflict between rule 73 and token OP_DIV resolved as reduce (OP_DIV < OP_GE).
    Conflict between rule 73 and token OP_MOD resolved as reduce (OP_MOD < OP_GE).
    Conflict between rule 73 and token OP_POWER resolved as reduce (OP_POWER < OP_GE).
    Conflict between rule 73 and token OP_EQ resolved as shift (OP_GE < OP_EQ).
    Conflict between rule 73 and token OP_NEQ resolved as shift (OP_GE < OP_NEQ).
    Conflict between rule 73 and token OP_LT resolved as reduce (%left OP_LT).
    Conflict between rule 73 and token OP_LE resolved as reduce (%left OP_LE).
    Conflict between rule 73 and token OP_GT resolved as reduce (%left OP_GT).
    Conflict between rule 73 and token OP_GE resolved as reduce (%left OP_GE).
    Conflict between rule 73 and token OP_AND resolved as shift (OP_GE < OP_AND).
    Conflict between rule 73 and token OP_OR resolved as shift (OP_GE < OP_OR).


State 103

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   74     | expr OP_AND expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   75     | expr • OP_OR expr

    OP_OR  shift, and go to state 76

    $default  reduce using rule 74 (expr)

    Conflict between rule 74 and token OP_PLUS resolved as reduce (OP_PLUS < OP_AND).
    Conflict between rule 74 and token OP_MINUS resolved as reduce (OP_MINUS < OP_AND).
    Conflict between rule 74 and token OP_MULT resolved as reduce (OP_MULT < OP_AND).
    Conflict between rule 74 and token OP_DIV resolved as reduce (OP_DIV < OP_AND).
    Conflict between rule 74 and token OP_MOD resolved as reduce (OP_MOD < OP_AND).
    Conflict between rule 74 and token OP_POWER resolved as reduce (OP_POWER < OP_AND).
    Conflict between rule 74 and token OP_EQ resolved as reduce (OP_EQ < OP_AND).
    Conflict between rule 74 and token OP_NEQ resolved as reduce (OP_NEQ < OP_AND).
    Conflict between rule 74 and token OP_LT resolved as reduce (OP_LT < OP_AND).
    Conflict between rule 74 and token OP_LE resolved as reduce (OP_LE < OP_AND).
    Conflict between rule 74 and token OP_GT resolved as reduce (OP_GT < OP_AND).
    Conflict between rule 74 and token OP_GE resolved as reduce (OP_GE < OP_AND).
    Conflict between rule 74 and token OP_AND resolved as reduce (%left OP_AND).
    Conflict between rule 74 and token OP_OR resolved as shift (OP_AND < OP_OR).


State 104

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr
   75     | expr OP_OR expr •  [KEYWORD_FOR, OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]

    $default  reduce using rule 75 (expr)

    Conflict between rule 75 and token OP_PLUS resolved as reduce (OP_PLUS < OP_OR).
    Conflict between rule 75 and token OP_MINUS resolved as reduce (OP_MINUS < OP_OR).
    Conflict between rule 75 and token OP_MULT resolved as reduce (OP_MULT < OP_OR).
    Conflict between rule 75 and token OP_DIV resolved as reduce (OP_DIV < OP_OR).
    Conflict between rule 75 and token OP_MOD resolved as reduce (OP_MOD < OP_OR).
    Conflict between rule 75 and token OP_POWER resolved as reduce (OP_POWER < OP_OR).
    Conflict between rule 75 and token OP_EQ resolved as reduce (OP_EQ < OP_OR).
    Conflict between rule 75 and token OP_NEQ resolved as reduce (OP_NEQ < OP_OR).
    Conflict between rule 75 and token OP_LT resolved as reduce (OP_LT < OP_OR).
    Conflict between rule 75 and token OP_LE resolved as reduce (OP_LE < OP_OR).
    Conflict between rule 75 and token OP_GT resolved as reduce (OP_GT < OP_OR).
    Conflict between rule 75 and token OP_GE resolved as reduce (OP_GE < OP_OR).
    Conflict between rule 75 and token OP_AND resolved as reduce (OP_AND < OP_OR).
    Conflict between rule 75 and token OP_OR resolved as reduce (%left OP_OR).


State 105

   19 param: IDENTIFIER • COLON type
   20      | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET COLON type

    COLON         shift, and go to state 117
    LEFT_BRACKET  shift, and go to state 118


State 106

   23 param_list: param •

    $default  reduce using rule 23 (param_list)


State 107

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 119


State 108

   22 param_list_opt: param_list •  [RIGHT_PARENTHESIS]
   24 param_list: param_list • COMMA param

    COMMA  shift, and go to state 120

    $default  reduce using rule 22 (param_list_opt)


State 109

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 121


State 110

   43 member_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 43 (member_decl)


State 111

   19 param: • IDENTIFIER COLON type
   20      | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type
   21 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   22               | • param_list
   23 param_list: • param
   24           | • param_list COMMA param
   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 105

    $default  reduce using rule 21 (param_list_opt)

    param           go to state 106
    param_list_opt  go to state 122
    param_list      go to state 108


State 112

   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   94     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON • type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 123


State 113

   95 type: LEFT_BRACKET RIGHT_BRACKET COLON type •

    $default  reduce using rule 95 (type)


State 114

   49 const_decl: KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON •

    $default  reduce using rule 49 (const_decl)


State 115

   57 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 57 (function_call)


State 116

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   61 arg_list: arg_list COMMA • expr
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 124
    literal        go to state 48


State 117

   19 param: IDENTIFIER COLON • type
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 125


State 118

   20 param: IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET COLON type

    RIGHT_BRACKET  shift, and go to state 126


State 119

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   17 return_type_decl: ε •  [COLON]
   18                 | • ARROW return_type_opt

    ARROW  shift, and go to state 127

    $default  reduce using rule 17 (return_type_decl)

    return_type_decl  go to state 128


State 120

   19 param: • IDENTIFIER COLON type
   20      | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type
   24 param_list: param_list COMMA • param

    IDENTIFIER  shift, and go to state 105

    param  go to state 129


State 121

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDDEF SEMICOLON
   28 stmts: ε •
   29      | • stmts stmt

    $default  reduce using rule 28 (stmts)

    stmts  go to state 130


State 122

   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 131


State 123

   94 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type •

    $default  reduce using rule 94 (type)


State 124

   61 arg_list: arg_list COMMA expr •  [COMMA, RIGHT_PARENTHESIS]
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_MULT   shift, and go to state 65
    OP_DIV    shift, and go to state 66
    OP_MOD    shift, and go to state 67
    OP_POWER  shift, and go to state 68
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76

    $default  reduce using rule 61 (arg_list)


State 125

   19 param: IDENTIFIER COLON type •

    $default  reduce using rule 19 (param)


State 126

   20 param: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 132


State 127

   18 return_type_decl: ARROW • return_type_opt
   50 return_type_opt: ε •  [COLON]
   51                | • type
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    $default  reduce using rule 50 (return_type_opt)

    return_type_opt  go to state 133
    type             go to state 134


State 128

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 135


State 129

   24 param_list: param_list COMMA param •

    $default  reduce using rule 24 (param_list)


State 130

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDDEF SEMICOLON
   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_ENDDEF    shift, and go to state 140
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    stmt           go to state 144
    function_call  go to state 145


State 131

   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   50 return_type_opt: ε •  [COLON]
   51                | • type
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    $default  reduce using rule 50 (return_type_opt)

    return_type_opt  go to state 146
    type             go to state 134


State 132

   20 param: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON • type
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 147


State 133

   18 return_type_decl: ARROW return_type_opt •

    $default  reduce using rule 18 (return_type_decl)


State 134

   51 return_type_opt: type •

    $default  reduce using rule 51 (return_type_opt)


State 135

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   25 local_decls: ε •
   26            | • local_decls const_decl
   27            | • local_decls var_decl

    $default  reduce using rule 25 (local_decls)

    local_decls  go to state 148


State 136

   30 stmt: IDENTIFIER • OP_ASSIGN expr SEMICOLON
   31     | IDENTIFIER • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   57 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    OP_COLON_ASSIGN   shift, and go to state 149
    OP_ASSIGN         shift, and go to state 150
    LEFT_PARENTHESIS  shift, and go to state 60


State 137

   33 stmt: KEYWORD_IF • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 151


State 138

   34 stmt: KEYWORD_WHILE • expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | KEYWORD_WHILE • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 152

    function_call  go to state 46
    expr           go to state 153
    literal        go to state 48


State 139

   36 stmt: KEYWORD_FOR • IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 154


State 140

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 155


State 141

   37 stmt: KEYWORD_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 156


State 142

   38 stmt: KEYWORD_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 157


State 143

   40 stmt: SEMICOLON •

    $default  reduce using rule 40 (stmt)


State 144

   29 stmts: stmts stmt •

    $default  reduce using rule 29 (stmts)


State 145

   39 stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 158


State 146

   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 159


State 147

   20 param: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type •

    $default  reduce using rule 20 (param)


State 148

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   26 local_decls: local_decls • const_decl
   27            | local_decls • var_decl
   28 stmts: ε •  [IDENTIFIER, KEYWORD_IF, KEYWORD_WHILE, KEYWORD_FOR, KEYWORD_ENDDEF, KEYWORD_RETURN, KEYWORD_BREAK, KEYWORD_CONTINUE, SEMICOLON]
   29      | • stmts stmt
   49 const_decl: • KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    IDENTIFIER     shift, and go to state 13
    KEYWORD_CONST  shift, and go to state 8

    IDENTIFIER  [reduce using rule 28 (stmts)]
    $default    reduce using rule 28 (stmts)

    var_decl    go to state 160
    id_list     go to state 15
    id_decl     go to state 16
    stmts       go to state 161
    const_decl  go to state 162

    shift/reduce conflict on token IDENTIFIER:
       28 stmts: ε •
       11 id_decl: • IDENTIFIER
      First example: comp_decls const_decls var_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON func_decl main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                          main_func
                                                   ↳ 15: func_decl                                                                                                                                                                                                           func_decl
                                                         ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                               ↳ 27: local_decls var_decl
                                                                                                                                                                                 ↳ 8: id_list                 COLON type SEMICOLON
                                                                                                                                                                                      ↳ 9: id_decl
                                                                                                                                                                                           ↳ 11: • IDENTIFIER
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER OP_ASSIGN expr SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                       main_func
                                                   ↳ 15: func_decls func_decl
                                                                    ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                      ↳ 29: stmts     stmt
                                                                                                                                                                                            ↳ 28: ε • ↳ 30: IDENTIFIER OP_ASSIGN expr SEMICOLON

    shift/reduce conflict on token IDENTIFIER:
       28 stmts: ε •
       12 id_decl: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON func_decl main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                             $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                                                          main_func
                                                   ↳ 15: func_decl                                                                                                                                                                                                                                           func_decl
                                                         ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls                                                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                               ↳ 27: local_decls var_decl
                                                                                                                                                                                 ↳ 8: id_list                                                 COLON type SEMICOLON
                                                                                                                                                                                      ↳ 9: id_decl
                                                                                                                                                                                           ↳ 12: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER OP_ASSIGN expr SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                       main_func
                                                   ↳ 15: func_decls func_decl
                                                                    ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                      ↳ 29: stmts     stmt
                                                                                                                                                                                            ↳ 28: ε • ↳ 30: IDENTIFIER OP_ASSIGN expr SEMICOLON

    shift/reduce conflict on token IDENTIFIER:
       28 stmts: ε •
       13 id_decl: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON func_decl main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                                                     main_func
                                                   ↳ 15: func_decl                                                                                                                                                                                                                                      func_decl
                                                         ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls                                                                                    stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                               ↳ 27: local_decls var_decl
                                                                                                                                                                                 ↳ 8: id_list                                            COLON type SEMICOLON
                                                                                                                                                                                      ↳ 9: id_decl
                                                                                                                                                                                           ↳ 13: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • IDENTIFIER OP_ASSIGN expr SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_decls const_decls var_decls func_decls                                                                                                                                                                                                                       main_func
                                                   ↳ 15: func_decls func_decl
                                                                    ↳ 16: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                      ↳ 29: stmts     stmt
                                                                                                                                                                                            ↳ 28: ε • ↳ 30: IDENTIFIER OP_ASSIGN expr SEMICOLON



State 149

   31 stmt: IDENTIFIER OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    LEFT_BRACKET  shift, and go to state 163


State 150

   30 stmt: IDENTIFIER OP_ASSIGN • expr SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 164
    literal        go to state 48


State 151

   33 stmt: KEYWORD_IF LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 165
    literal        go to state 48


State 152

   35 stmt: KEYWORD_WHILE LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   77     | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 166
    literal        go to state 48


State 153

   34 stmt: KEYWORD_WHILE expr • COLON stmts KEYWORD_ENDWHILE SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_MULT   shift, and go to state 65
    OP_DIV    shift, and go to state 66
    OP_MOD    shift, and go to state 67
    OP_POWER  shift, and go to state 68
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76
    COLON     shift, and go to state 167


State 154

   36 stmt: KEYWORD_FOR IDENTIFIER • KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    KEYWORD_IN  shift, and go to state 168


State 155

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 2 (main_func)


State 156

   37 stmt: KEYWORD_BREAK SEMICOLON •

    $default  reduce using rule 37 (stmt)


State 157

   38 stmt: KEYWORD_CONTINUE SEMICOLON •

    $default  reduce using rule 38 (stmt)


State 158

   39 stmt: function_call SEMICOLON •

    $default  reduce using rule 39 (stmt)


State 159

   25 local_decls: ε •
   26            | • local_decls const_decl
   27            | • local_decls var_decl
   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    $default  reduce using rule 25 (local_decls)

    local_decls  go to state 169


State 160

   27 local_decls: local_decls var_decl •

    $default  reduce using rule 27 (local_decls)


State 161

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   52 return_opt: ε •  [KEYWORD_ENDDEF]
   53           | • KEYWORD_RETURN SEMICOLON
   54           | • KEYWORD_RETURN expr SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_RETURN    shift, and go to state 170
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    $default  reduce using rule 52 (return_opt)

    stmt           go to state 144
    return_opt     go to state 171
    function_call  go to state 145


State 162

   26 local_decls: local_decls const_decl •

    $default  reduce using rule 26 (local_decls)


State 163

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 172
    literal        go to state 48


State 164

   30 stmt: IDENTIFIER OP_ASSIGN expr • SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS    shift, and go to state 63
    OP_MINUS   shift, and go to state 64
    OP_MULT    shift, and go to state 65
    OP_DIV     shift, and go to state 66
    OP_MOD     shift, and go to state 67
    OP_POWER   shift, and go to state 68
    OP_EQ      shift, and go to state 69
    OP_NEQ     shift, and go to state 70
    OP_LT      shift, and go to state 71
    OP_LE      shift, and go to state 72
    OP_GT      shift, and go to state 73
    OP_GE      shift, and go to state 74
    OP_AND     shift, and go to state 75
    OP_OR      shift, and go to state 76
    SEMICOLON  shift, and go to state 173


State 165

   33 stmt: KEYWORD_IF LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS            shift, and go to state 63
    OP_MINUS           shift, and go to state 64
    OP_MULT            shift, and go to state 65
    OP_DIV             shift, and go to state 66
    OP_MOD             shift, and go to state 67
    OP_POWER           shift, and go to state 68
    OP_EQ              shift, and go to state 69
    OP_NEQ             shift, and go to state 70
    OP_LT              shift, and go to state 71
    OP_LE              shift, and go to state 72
    OP_GT              shift, and go to state 73
    OP_GE              shift, and go to state 74
    OP_AND             shift, and go to state 75
    OP_OR              shift, and go to state 76
    RIGHT_PARENTHESIS  shift, and go to state 174


State 166

   35 stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr
   77     | LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    OP_PLUS            shift, and go to state 63
    OP_MINUS           shift, and go to state 64
    OP_MULT            shift, and go to state 65
    OP_DIV             shift, and go to state 66
    OP_MOD             shift, and go to state 67
    OP_POWER           shift, and go to state 68
    OP_EQ              shift, and go to state 69
    OP_NEQ             shift, and go to state 70
    OP_LT              shift, and go to state 71
    OP_LE              shift, and go to state 72
    OP_GT              shift, and go to state 73
    OP_GE              shift, and go to state 74
    OP_AND             shift, and go to state 75
    OP_OR              shift, and go to state 76
    RIGHT_PARENTHESIS  shift, and go to state 175


State 167

   28 stmts: ε •
   29      | • stmts stmt
   34 stmt: KEYWORD_WHILE expr COLON • stmts KEYWORD_ENDWHILE SEMICOLON

    $default  reduce using rule 28 (stmts)

    stmts  go to state 176


State 168

   36 stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN • range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   81 range_expr: • LEFT_BRACKET expr COLON expr RIGHT_BRACKET
   82           | • LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 177

    range_expr  go to state 178


State 169

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   26 local_decls: local_decls • const_decl
   27            | local_decls • var_decl
   28 stmts: ε •  [IDENTIFIER, KEYWORD_IF, KEYWORD_WHILE, KEYWORD_FOR, KEYWORD_ENDDEF, KEYWORD_RETURN, KEYWORD_BREAK, KEYWORD_CONTINUE, SEMICOLON]
   29      | • stmts stmt
   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   49 const_decl: • KEYWORD_CONST IDENTIFIER COLON type OP_ASSIGN literal SEMICOLON

    IDENTIFIER     shift, and go to state 13
    KEYWORD_CONST  shift, and go to state 8

    IDENTIFIER  [reduce using rule 28 (stmts)]
    $default    reduce using rule 28 (stmts)

    var_decl    go to state 160
    id_list     go to state 15
    id_decl     go to state 16
    stmts       go to state 179
    const_decl  go to state 162

    shift/reduce conflict on token IDENTIFIER:
       28 stmts: ε •
       11 id_decl: • IDENTIFIER
      First example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON method_decl KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                     const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                         KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 45: method_decl                                                                                                                                                                                                        method_decl
                                                                                        ↳ 46: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                             ↳ 27: local_decls var_decl
                                                                                                                                                                                                               ↳ 8: id_list                 COLON type SEMICOLON
                                                                                                                                                                                                                    ↳ 9: id_decl
                                                                                                                                                                                                                         ↳ 11: • IDENTIFIER
      Second example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER OP_ASSIGN expr SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                  const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                      KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 45: method_decls method_decl
                                                                                                     ↳ 46: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                                                      ↳ 29: stmts     stmt
                                                                                                                                                                                                                            ↳ 28: ε • ↳ 30: IDENTIFIER OP_ASSIGN expr SEMICOLON

    shift/reduce conflict on token IDENTIFIER:
       28 stmts: ε •
       12 id_decl: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON method_decl KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                                                        $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                                                     const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                                                         KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 45: method_decl                                                                                                                                                                                                                                        method_decl
                                                                                        ↳ 46: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls                                                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                             ↳ 27: local_decls var_decl
                                                                                                                                                                                                               ↳ 8: id_list                                                 COLON type SEMICOLON
                                                                                                                                                                                                                    ↳ 9: id_decl
                                                                                                                                                                                                                         ↳ 12: • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER OP_ASSIGN expr SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                  const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                      KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 45: method_decls method_decl
                                                                                                     ↳ 46: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                                                      ↳ 29: stmts     stmt
                                                                                                                                                                                                                            ↳ 28: ε • ↳ 30: IDENTIFIER OP_ASSIGN expr SEMICOLON

    shift/reduce conflict on token IDENTIFIER:
       28 stmts: ε •
       13 id_decl: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      First example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON method_decl KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                                                const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                                                    KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 45: method_decl                                                                                                                                                                                                                                   method_decl
                                                                                        ↳ 46: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls                                                                                    stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                             ↳ 27: local_decls var_decl
                                                                                                                                                                                                               ↳ 8: id_list                                            COLON type SEMICOLON
                                                                                                                                                                                                                    ↳ 9: id_decl
                                                                                                                                                                                                                         ↳ 13: • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
      Second example: comp_decls KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • IDENTIFIER OP_ASSIGN expr SEMICOLON return_opt KEYWORD_ENDDEF SEMICOLON KEYWORD_ENDCOMP SEMICOLON const_decls var_decls func_decls main_func $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                                     $end
             ↳ 1: comp_decls                                                                                                                                                                                                                                                                                                                  const_decls var_decls func_decls main_func
                  ↳ 4: comp_decls comp_decl
                                  ↳ 5: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls                                                                                                                                                                                                                      KEYWORD_ENDCOMP SEMICOLON
                                                                                  ↳ 45: method_decls method_decl
                                                                                                     ↳ 46: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                                                                                      ↳ 29: stmts     stmt
                                                                                                                                                                                                                            ↳ 28: ε • ↳ 30: IDENTIFIER OP_ASSIGN expr SEMICOLON



State 170

   53 return_opt: KEYWORD_RETURN • SEMICOLON
   54           | KEYWORD_RETURN • expr SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    SEMICOLON         shift, and go to state 180
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 181
    literal        go to state 48


State 171

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 182


State 172

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    KEYWORD_FOR  shift, and go to state 183
    OP_PLUS      shift, and go to state 63
    OP_MINUS     shift, and go to state 64
    OP_MULT      shift, and go to state 65
    OP_DIV       shift, and go to state 66
    OP_MOD       shift, and go to state 67
    OP_POWER     shift, and go to state 68
    OP_EQ        shift, and go to state 69
    OP_NEQ       shift, and go to state 70
    OP_LT        shift, and go to state 71
    OP_LE        shift, and go to state 72
    OP_GT        shift, and go to state 73
    OP_GE        shift, and go to state 74
    OP_AND       shift, and go to state 75
    OP_OR        shift, and go to state 76


State 173

   30 stmt: IDENTIFIER OP_ASSIGN expr SEMICOLON •

    $default  reduce using rule 30 (stmt)


State 174

   33 stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    COLON  shift, and go to state 184


State 175

   35 stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDWHILE SEMICOLON
   77 expr: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, COLON]

    COLON  shift, and go to state 185

    COLON     [reduce using rule 77 (expr)]
    $default  reduce using rule 77 (expr)

    shift/reduce conflict on token COLON:
       77 expr: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •
       35 stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDWHILE SEMICOLON
      Example: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON KEYWORD_ENDWHILE SEMICOLON
      Shift derivation
        stmt
        ↳ 35: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts   KEYWORD_ENDWHILE SEMICOLON
                                                                            ↳ 35: ε
      Reduce derivation
        stmt
        ↳ 34: KEYWORD_WHILE expr                                            COLON stmts   KEYWORD_ENDWHILE SEMICOLON
                            ↳ 77: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •       ↳ 34: ε



State 176

   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   34     | KEYWORD_WHILE expr COLON stmts • KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_ENDWHILE  shift, and go to state 186
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    stmt           go to state 144
    function_call  go to state 145


State 177

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   81 range_expr: LEFT_BRACKET • expr COLON expr RIGHT_BRACKET
   82           | LEFT_BRACKET • expr COLON expr COLON expr RIGHT_BRACKET
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 187
    literal        go to state 48


State 178

   36 stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 188


State 179

   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   52 return_opt: ε •  [KEYWORD_ENDDEF]
   53           | • KEYWORD_RETURN SEMICOLON
   54           | • KEYWORD_RETURN expr SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_RETURN    shift, and go to state 170
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    $default  reduce using rule 52 (return_opt)

    stmt           go to state 144
    return_opt     go to state 189
    function_call  go to state 145


State 180

   53 return_opt: KEYWORD_RETURN SEMICOLON •

    $default  reduce using rule 53 (return_opt)


State 181

   54 return_opt: KEYWORD_RETURN expr • SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS    shift, and go to state 63
    OP_MINUS   shift, and go to state 64
    OP_MULT    shift, and go to state 65
    OP_DIV     shift, and go to state 66
    OP_MOD     shift, and go to state 67
    OP_POWER   shift, and go to state 68
    OP_EQ      shift, and go to state 69
    OP_NEQ     shift, and go to state 70
    OP_LT      shift, and go to state 71
    OP_LE      shift, and go to state 72
    OP_GT      shift, and go to state 73
    OP_GE      shift, and go to state 74
    OP_AND     shift, and go to state 75
    OP_OR      shift, and go to state 76
    SEMICOLON  shift, and go to state 190


State 182

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 191


State 183

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 192


State 184

   28 stmts: ε •
   29      | • stmts stmt
   33 stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts else_part KEYWORD_ENDIF SEMICOLON

    $default  reduce using rule 28 (stmts)

    stmts  go to state 193


State 185

   28 stmts: ε •
   29      | • stmts stmt
   35 stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDWHILE SEMICOLON

    $default  reduce using rule 28 (stmts)

    stmts  go to state 194


State 186

   34 stmt: KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 195


State 187

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr
   81 range_expr: LEFT_BRACKET expr • COLON expr RIGHT_BRACKET
   82           | LEFT_BRACKET expr • COLON expr COLON expr RIGHT_BRACKET

    OP_PLUS   shift, and go to state 63
    OP_MINUS  shift, and go to state 64
    OP_MULT   shift, and go to state 65
    OP_DIV    shift, and go to state 66
    OP_MOD    shift, and go to state 67
    OP_POWER  shift, and go to state 68
    OP_EQ     shift, and go to state 69
    OP_NEQ    shift, and go to state 70
    OP_LT     shift, and go to state 71
    OP_LE     shift, and go to state 72
    OP_GT     shift, and go to state 73
    OP_GE     shift, and go to state 74
    OP_AND    shift, and go to state 75
    OP_OR     shift, and go to state 76
    COLON     shift, and go to state 196


State 188

   28 stmts: ε •
   29      | • stmts stmt
   36 stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON • stmts KEYWORD_ENDFOR SEMICOLON

    $default  reduce using rule 28 (stmts)

    stmts  go to state 197


State 189

   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 198


State 190

   54 return_opt: KEYWORD_RETURN expr SEMICOLON •

    $default  reduce using rule 54 (return_opt)


State 191

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 16 (func_decl)


State 192

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    COLON  shift, and go to state 199


State 193

   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   33     | KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   55 else_part: ε •  [KEYWORD_ENDIF]
   56          | • KEYWORD_ELSE COLON stmts
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_ELSE      shift, and go to state 200
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    $default  reduce using rule 55 (else_part)

    stmt           go to state 144
    else_part      go to state 201
    function_call  go to state 145


State 194

   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_ENDWHILE  shift, and go to state 202
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    stmt           go to state 144
    function_call  go to state 145


State 195

   34 stmt: KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 34 (stmt)


State 196

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   81 range_expr: LEFT_BRACKET expr COLON • expr RIGHT_BRACKET
   82           | LEFT_BRACKET expr COLON • expr COLON expr RIGHT_BRACKET
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 203
    literal        go to state 48


State 197

   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   36     | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts • KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_ENDFOR    shift, and go to state 204
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    stmt           go to state 144
    function_call  go to state 145


State 198

   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 205


State 199

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • expr RIGHT_BRACKET COLON type SEMICOLON
   32     | IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER        shift, and go to state 206
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    KEYWORD_SCALAR    shift, and go to state 30
    KEYWORD_STR       shift, and go to state 31
    KEYWORD_INTEGER   shift, and go to state 32
    KEYWORD_COMP      shift, and go to state 33
    KEYWORD_BOOL      shift, and go to state 34
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44
    LEFT_BRACKET      shift, and go to state 35

    function_call  go to state 46
    expr           go to state 207
    literal        go to state 48
    type           go to state 208


State 200

   56 else_part: KEYWORD_ELSE • COLON stmts

    COLON  shift, and go to state 209


State 201

   33 stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part • KEYWORD_ENDIF SEMICOLON

    KEYWORD_ENDIF  shift, and go to state 210


State 202

   35 stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 211


State 203

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr
   81 range_expr: LEFT_BRACKET expr COLON expr • RIGHT_BRACKET
   82           | LEFT_BRACKET expr COLON expr • COLON expr RIGHT_BRACKET

    OP_PLUS        shift, and go to state 63
    OP_MINUS       shift, and go to state 64
    OP_MULT        shift, and go to state 65
    OP_DIV         shift, and go to state 66
    OP_MOD         shift, and go to state 67
    OP_POWER       shift, and go to state 68
    OP_EQ          shift, and go to state 69
    OP_NEQ         shift, and go to state 70
    OP_LT          shift, and go to state 71
    OP_LE          shift, and go to state 72
    OP_GT          shift, and go to state 73
    OP_GE          shift, and go to state 74
    OP_AND         shift, and go to state 75
    OP_OR          shift, and go to state 76
    COLON          shift, and go to state 212
    RIGHT_BRACKET  shift, and go to state 213


State 204

   36 stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 214


State 205

   46 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 46 (method_decl)


State 206

   57 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79 expr: IDENTIFIER •  [OP_PLUS, OP_MINUS, OP_MULT, OP_DIV, OP_MOD, OP_POWER, OP_EQ, OP_NEQ, OP_LT, OP_LE, OP_GT, OP_GE, OP_AND, OP_OR, RIGHT_BRACKET]
   93 type: IDENTIFIER •  [KEYWORD_IN]

    LEFT_PARENTHESIS  shift, and go to state 60

    KEYWORD_IN  reduce using rule 93 (type)
    $default    reduce using rule 79 (expr)


State 207

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr • RIGHT_BRACKET COLON type SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS        shift, and go to state 63
    OP_MINUS       shift, and go to state 64
    OP_MULT        shift, and go to state 65
    OP_DIV         shift, and go to state 66
    OP_MOD         shift, and go to state 67
    OP_POWER       shift, and go to state 68
    OP_EQ          shift, and go to state 69
    OP_NEQ         shift, and go to state 70
    OP_LT          shift, and go to state 71
    OP_LE          shift, and go to state 72
    OP_GT          shift, and go to state 73
    OP_GE          shift, and go to state 74
    OP_AND         shift, and go to state 75
    OP_OR          shift, and go to state 76
    RIGHT_BRACKET  shift, and go to state 215


State 208

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type • KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_IN  shift, and go to state 216


State 209

   28 stmts: ε •
   29      | • stmts stmt
   56 else_part: KEYWORD_ELSE COLON • stmts

    $default  reduce using rule 28 (stmts)

    stmts  go to state 217


State 210

   33 stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 218


State 211

   35 stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 35 (stmt)


State 212

   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   82 range_expr: LEFT_BRACKET expr COLON expr COLON • expr RIGHT_BRACKET
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 219
    literal        go to state 48


State 213

   81 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 81 (range_expr)


State 214

   36 stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 36 (stmt)


State 215

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 220


State 216

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN • IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 221


State 217

   29 stmts: stmts • stmt
   30 stmt: • IDENTIFIER OP_ASSIGN expr SEMICOLON
   31     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   32     | • IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   33     | • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   34     | • KEYWORD_WHILE expr COLON stmts KEYWORD_ENDWHILE SEMICOLON
   35     | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   36     | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   37     | • KEYWORD_BREAK SEMICOLON
   38     | • KEYWORD_CONTINUE SEMICOLON
   39     | • function_call SEMICOLON
   40     | • SEMICOLON
   56 else_part: KEYWORD_ELSE COLON stmts •  [KEYWORD_ENDIF]
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 136
    KEYWORD_IF        shift, and go to state 137
    KEYWORD_WHILE     shift, and go to state 138
    KEYWORD_FOR       shift, and go to state 139
    KEYWORD_BREAK     shift, and go to state 141
    KEYWORD_CONTINUE  shift, and go to state 142
    SEMICOLON         shift, and go to state 143

    $default  reduce using rule 56 (else_part)

    stmt           go to state 144
    function_call  go to state 145


State 218

   33 stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON •

    $default  reduce using rule 33 (stmt)


State 219

   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr
   82 range_expr: LEFT_BRACKET expr COLON expr COLON expr • RIGHT_BRACKET

    OP_PLUS        shift, and go to state 63
    OP_MINUS       shift, and go to state 64
    OP_MULT        shift, and go to state 65
    OP_DIV         shift, and go to state 66
    OP_MOD         shift, and go to state 67
    OP_POWER       shift, and go to state 68
    OP_EQ          shift, and go to state 69
    OP_NEQ         shift, and go to state 70
    OP_LT          shift, and go to state 71
    OP_LE          shift, and go to state 72
    OP_GT          shift, and go to state 73
    OP_GE          shift, and go to state 74
    OP_AND         shift, and go to state 75
    OP_OR          shift, and go to state 76
    RIGHT_BRACKET  shift, and go to state 222


State 220

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON • type SEMICOLON
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 223


State 221

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER • KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_OF  shift, and go to state 224


State 222

   82 range_expr: LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 82 (range_expr)


State 223

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 225


State 224

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF • expr RIGHT_BRACKET COLON type SEMICOLON
   57 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   62 expr: • expr OP_PLUS expr
   63     | • expr OP_MINUS expr
   64     | • expr OP_MULT expr
   65     | • expr OP_DIV expr
   66     | • expr OP_MOD expr
   67     | • expr OP_POWER expr
   68     | • expr OP_EQ expr
   69     | • expr OP_NEQ expr
   70     | • expr OP_LT expr
   71     | • expr OP_LE expr
   72     | • expr OP_GT expr
   73     | • expr OP_GE expr
   74     | • expr OP_AND expr
   75     | • expr OP_OR expr
   76     | • OP_NOT expr
   77     | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   78     | • literal
   79     | • IDENTIFIER
   80     | • function_call
   83 literal: • CONST_INT
   84        | • CONST_REAL
   85        | • CONST_STRING
   86        | • BOOL_TRUE
   87        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 37
    CONST_STRING      shift, and go to state 38
    CONST_INT         shift, and go to state 39
    CONST_REAL        shift, and go to state 40
    BOOL_TRUE         shift, and go to state 41
    BOOL_FALSE        shift, and go to state 42
    OP_NOT            shift, and go to state 43
    LEFT_PARENTHESIS  shift, and go to state 44

    function_call  go to state 46
    expr           go to state 226
    literal        go to state 48


State 225

   31 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 31 (stmt)


State 226

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr • RIGHT_BRACKET COLON type SEMICOLON
   62 expr: expr • OP_PLUS expr
   63     | expr • OP_MINUS expr
   64     | expr • OP_MULT expr
   65     | expr • OP_DIV expr
   66     | expr • OP_MOD expr
   67     | expr • OP_POWER expr
   68     | expr • OP_EQ expr
   69     | expr • OP_NEQ expr
   70     | expr • OP_LT expr
   71     | expr • OP_LE expr
   72     | expr • OP_GT expr
   73     | expr • OP_GE expr
   74     | expr • OP_AND expr
   75     | expr • OP_OR expr

    OP_PLUS        shift, and go to state 63
    OP_MINUS       shift, and go to state 64
    OP_MULT        shift, and go to state 65
    OP_DIV         shift, and go to state 66
    OP_MOD         shift, and go to state 67
    OP_POWER       shift, and go to state 68
    OP_EQ          shift, and go to state 69
    OP_NEQ         shift, and go to state 70
    OP_LT          shift, and go to state 71
    OP_LE          shift, and go to state 72
    OP_GT          shift, and go to state 73
    OP_GE          shift, and go to state 74
    OP_AND         shift, and go to state 75
    OP_OR          shift, and go to state 76
    RIGHT_BRACKET  shift, and go to state 227


State 227

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 228


State 228

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON • type SEMICOLON
   88 type: • KEYWORD_INTEGER
   89     | • KEYWORD_SCALAR
   90     | • KEYWORD_STR
   91     | • KEYWORD_BOOL
   92     | • KEYWORD_COMP
   93     | • IDENTIFIER
   94     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
   95     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 29
    KEYWORD_SCALAR   shift, and go to state 30
    KEYWORD_STR      shift, and go to state 31
    KEYWORD_INTEGER  shift, and go to state 32
    KEYWORD_COMP     shift, and go to state 33
    KEYWORD_BOOL     shift, and go to state 34
    LEFT_BRACKET     shift, and go to state 35

    type  go to state 229


State 229

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 230


State 230

   32 stmt: IDENTIFIER OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 32 (stmt)
