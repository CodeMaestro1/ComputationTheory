State 121 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: comp_decls const_decls var_decls func_decls main_func

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    3 comp_decls: ε
    4           | comp_decls comp_decl

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    6 var_decls: ε
    7          | var_decls var_decl

    8 var_decl: id_list COLON type SEMICOLON

    9 id_list: id_decl
   10        | id_list COMMA id_decl

   11 id_decl: IDENTIFIER
   12        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | OP_HASH IDENTIFIER
   15        | OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   17 func_decls: ε
   18           | func_decls func_decl

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   20 return_type_decl: ε
   21                 | ARROW return_type_opt

   22 param: id_decl COLON type

   23 param_list_opt: ε
   24               | param_list

   25 param_list: param
   26           | param_list COMMA param

   27 local_decls: ε
   28            | local_decls var_decl
   29            | local_decls const_decl

   30 stmts: ε
   31      | stmt stmts

   32 stmt: simple_stmt
   33     | compound_stmt

   34 simple_stmt: assignment_statement
   35            | function_call SEMICOLON
   36            | KEYWORD_BREAK SEMICOLON
   37            | KEYWORD_CONTINUE SEMICOLON
   38            | SEMICOLON

   39 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON
   40                     | lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | lvalue OP_MOD_ASSIGN expr SEMICOLON

   45 lvalue: IDENTIFIER
   46       | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | OP_HASH IDENTIFIER
   48       | OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

   54 member_decls: ε
   55             | member_decl_list

   56 member_decl_list: member_decl
   57                 | member_decl_list member_decl

   58 member_decl: id_list COLON type SEMICOLON

   59 method_decls: ε
   60             | method_decls method_decl

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   62 const_decls: ε
   63            | const_decls const_decl

   64 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

   65 return_type_opt: ε
   66                | type

   67 return_opt: ε
   68           | KEYWORD_RETURN SEMICOLON
   69           | KEYWORD_RETURN expr SEMICOLON

   70 else_part: ε
   71          | KEYWORD_ELSE COLON stmts

   72 function_call: primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

   73 arg_list_opt: ε
   74             | arg_list

   75 arg_list: expr
   76         | arg_list COMMA expr

   77 expr: logical_expr

   78 logical_expr: relational_expr
   79             | logical_expr OP_AND relational_expr
   80             | logical_expr OP_OR relational_expr

   81 relational_expr: arithmetic_expr
   82                | relational_expr OP_LT arithmetic_expr
   83                | relational_expr OP_LE arithmetic_expr
   84                | relational_expr OP_GT arithmetic_expr
   85                | relational_expr OP_GE arithmetic_expr
   86                | relational_expr OP_EQ arithmetic_expr
   87                | relational_expr OP_NEQ arithmetic_expr

   88 arithmetic_expr: term
   89                | arithmetic_expr OP_PLUS term
   90                | arithmetic_expr OP_MINUS term

   91 term: factor
   92     | term OP_MULT factor
   93     | term OP_DIV factor
   94     | term OP_MOD factor

   95 factor: primary
   96       | OP_MINUS factor
   97       | OP_NOT factor
   98       | factor OP_POWER primary

   99 primary: IDENTIFIER
  100        | OP_HASH IDENTIFIER
  101        | primary DOT IDENTIFIER
  102        | primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | literal
  105        | function_call
  106        | LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

  107 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET
  108           | LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

  109 literal: CONST_INT
  110        | CONST_REAL
  111        | CONST_STRING
  112        | BOOL_TRUE
  113        | BOOL_FALSE

  114 type: KEYWORD_INTEGER
  115     | KEYWORD_SCALAR
  116     | KEYWORD_STR
  117     | KEYWORD_BOOL
  118     | KEYWORD_COMP
  119     | IDENTIFIER
  120     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | LEFT_BRACKET RIGHT_BRACKET COLON type


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <stringVal> (258) 5 11 12 13 14 15 16 19 45 46 47 48 51 52 53 61 64 99 100 101 102 103 119
    CONST_STRING <stringVal> (259) 111
    CONST_INT <integerVal> (260) 109 120
    CONST_REAL <floatVal> (261) 110
    KEYWORD_SCALAR (262) 115
    KEYWORD_STR <stringVal> (263) 116
    OP_COLON_ASSIGN <stringVal> (264) 52 53
    KEYWORD_INTEGER <integerVal> (265) 114
    KEYWORD_IF (266) 49
    KEYWORD_ELSE (267) 71
    KEYWORD_ENDIF (268) 49
    KEYWORD_WHILE (269) 50
    KEYWORD_ENDWHILE (270) 50
    KEYWORD_FOR (271) 51 52 53
    KEYWORD_IN (272) 51 53
    KEYWORD_ENDFOR (273) 51
    KEYWORD_DEF (274) 2 19 61
    KEYWORD_ENDDEF (275) 2 19 61
    KEYWORD_MAIN (276) 2
    KEYWORD_RETURN (277) 68 69
    KEYWORD_CONST (278) 64
    KEYWORD_COMP (279) 5 118
    KEYWORD_ENDCOMP (280) 5
    KEYWORD_OF (281) 53
    KEYWORD_BOOL (282) 117
    BOOL_TRUE (283) 112
    BOOL_FALSE (284) 113
    KEYWORD_BREAK (285) 36
    KEYWORD_CONTINUE (286) 37
    SEMICOLON (287) 2 5 8 19 35 36 37 38 39 40 41 42 43 44 49 50 51 52 53 58 61 64 68 69
    COLON (288) 2 5 8 19 22 49 50 51 52 53 58 61 64 71 107 108 120 121
    COMMA (289) 10 26 76
    ARROW (290) 21
    OP_HASH (291) 14 15 16 47 48 100
    DOT (292) 101 102
    LEFT_PARENTHESIS (293) 2 19 49 50 61 72 102 106
    RIGHT_PARENTHESIS (294) 2 19 49 50 61 72 102 106
    LEFT_BRACKET (295) 12 13 15 16 46 48 52 53 103 107 108 120 121
    RIGHT_BRACKET (296) 12 13 15 16 46 48 52 53 103 107 108 120 121
    OP_POWER (297) 98
    UMINUS (298)
    OP_MULT (299) 92
    OP_DIV (300) 93
    OP_MOD (301) 94
    OP_PLUS (302) 89
    OP_MINUS (303) 90 96
    OP_LT (304) 82
    OP_LE (305) 83
    OP_GT (306) 84
    OP_GE (307) 85
    OP_EQ (308) 86
    OP_NEQ (309) 87
    OP_NOT (310) 97
    OP_AND (311) 79
    OP_OR (312) 80
    OP_ASSIGN (313) 39 64
    OP_PLUS_ASSIGN (314) 40
    OP_MINUS_ASSIGN (315) 41
    OP_MULT_ASSIGN (316) 42
    OP_DIV_ASSIGN (317) 43
    OP_MOD_ASSIGN (318) 44


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1
        on right: 0
    main_func (66)
        on left: 2
        on right: 1
    comp_decls (67)
        on left: 3 4
        on right: 1 4
    comp_decl (68)
        on left: 5
        on right: 4
    var_decls (69)
        on left: 6 7
        on right: 1 7
    var_decl (70)
        on left: 8
        on right: 7 28
    id_list (71)
        on left: 9 10
        on right: 8 10 58
    id_decl <stringVal> (72)
        on left: 11 12 13 14 15 16
        on right: 9 10 22 52 53
    func_decls (73)
        on left: 17 18
        on right: 1 18
    func_decl (74)
        on left: 19
        on right: 18
    return_type_decl (75)
        on left: 20 21
        on right: 19
    param (76)
        on left: 22
        on right: 25 26
    param_list_opt (77)
        on left: 23 24
        on right: 19 61
    param_list (78)
        on left: 25 26
        on right: 24 26
    local_decls (79)
        on left: 27 28 29
        on right: 2 19 28 29 61
    stmts (80)
        on left: 30 31
        on right: 2 19 31 49 50 51 61 71
    stmt (81)
        on left: 32 33
        on right: 31
    simple_stmt (82)
        on left: 34 35 36 37 38
        on right: 32
    assignment_statement (83)
        on left: 39 40 41 42 43 44
        on right: 34
    lvalue (84)
        on left: 45 46 47 48
        on right: 39 40 41 42 43 44
    compound_stmt (85)
        on left: 49 50 51 52 53
        on right: 33
    member_decls (86)
        on left: 54 55
        on right: 5
    member_decl_list (87)
        on left: 56 57
        on right: 55 57
    member_decl (88)
        on left: 58
        on right: 56 57
    method_decls (89)
        on left: 59 60
        on right: 5 60
    method_decl (90)
        on left: 61
        on right: 60
    const_decls (91)
        on left: 62 63
        on right: 1 63
    const_decl (92)
        on left: 64
        on right: 29 63
    return_type_opt (93)
        on left: 65 66
        on right: 21 61
    return_opt (94)
        on left: 67 68 69
        on right: 19 61
    else_part (95)
        on left: 70 71
        on right: 49
    function_call (96)
        on left: 72
        on right: 35 105
    arg_list_opt (97)
        on left: 73 74
        on right: 72 102
    arg_list (98)
        on left: 75 76
        on right: 74 76
    expr (99)
        on left: 77
        on right: 12 15 39 40 41 42 43 44 46 48 49 50 52 53 69 75 76 103 106 107 108
    logical_expr (100)
        on left: 78 79 80
        on right: 77 79 80
    relational_expr (101)
        on left: 81 82 83 84 85 86 87
        on right: 78 79 80 82 83 84 85 86 87
    arithmetic_expr (102)
        on left: 88 89 90
        on right: 81 82 83 84 85 86 87 89 90
    term (103)
        on left: 91 92 93 94
        on right: 88 89 90 92 93 94
    factor (104)
        on left: 95 96 97 98
        on right: 91 92 93 94 96 97 98
    primary (105)
        on left: 99 100 101 102 103 104 105 106
        on right: 72 95 98 101 102
    range_expr (106)
        on left: 107 108
        on right: 51
    literal (107)
        on left: 109 110 111 112 113
        on right: 64 104
    type (108)
        on left: 114 115 116 117 118 119 120 121
        on right: 8 22 52 53 58 64 66 120 121


State 0

    0 $accept: • program $end
    1 program: • comp_decls const_decls var_decls func_decls main_func
    3 comp_decls: ε •
    4           | • comp_decls comp_decl

    $default  reduce using rule 3 (comp_decls)

    program     go to state 1
    comp_decls  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: comp_decls • const_decls var_decls func_decls main_func
    4 comp_decls: comp_decls • comp_decl
    5 comp_decl: • KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
   62 const_decls: ε •  [IDENTIFIER, KEYWORD_DEF, KEYWORD_CONST, OP_HASH]
   63            | • const_decls const_decl

    KEYWORD_COMP  shift, and go to state 4

    $default  reduce using rule 62 (const_decls)

    comp_decl    go to state 5
    const_decls  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    5 comp_decl: KEYWORD_COMP • IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    4 comp_decls: comp_decls comp_decl •

    $default  reduce using rule 4 (comp_decls)


State 6

    1 program: comp_decls const_decls • var_decls func_decls main_func
    6 var_decls: ε •  [IDENTIFIER, KEYWORD_DEF, OP_HASH]
    7          | • var_decls var_decl
   63 const_decls: const_decls • const_decl
   64 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    KEYWORD_CONST  shift, and go to state 8

    $default  reduce using rule 6 (var_decls)

    var_decls   go to state 9
    const_decl  go to state 10


State 7

    5 comp_decl: KEYWORD_COMP IDENTIFIER • COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    COLON  shift, and go to state 11


State 8

   64 const_decl: KEYWORD_CONST • IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 12


State 9

    1 program: comp_decls const_decls var_decls • func_decls main_func
    7 var_decls: var_decls • var_decl
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   17 func_decls: ε •  [KEYWORD_DEF]
   18           | • func_decls func_decl

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 17 (func_decls)

    var_decl    go to state 15
    id_list     go to state 16
    id_decl     go to state 17
    func_decls  go to state 18


State 10

   63 const_decls: const_decls const_decl •

    $default  reduce using rule 63 (const_decls)


State 11

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON • member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   54 member_decls: ε •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   55             | • member_decl_list
   56 member_decl_list: • member_decl
   57                 | • member_decl_list member_decl
   58 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 54 (member_decls)

    id_list           go to state 19
    id_decl           go to state 17
    member_decls      go to state 20
    member_decl_list  go to state 21
    member_decl       go to state 22


State 12

   64 const_decl: KEYWORD_CONST IDENTIFIER • OP_ASSIGN literal COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 23


State 13

   11 id_decl: IDENTIFIER •  [COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 24

    $default  reduce using rule 11 (id_decl)


State 14

   14 id_decl: OP_HASH • IDENTIFIER
   15        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 25


State 15

    7 var_decls: var_decls var_decl •

    $default  reduce using rule 7 (var_decls)


State 16

    8 var_decl: id_list • COLON type SEMICOLON
   10 id_list: id_list • COMMA id_decl

    COLON  shift, and go to state 26
    COMMA  shift, and go to state 27


State 17

    9 id_list: id_decl •

    $default  reduce using rule 9 (id_list)


State 18

    1 program: comp_decls const_decls var_decls func_decls • main_func
    2 main_func: • KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON
   18 func_decls: func_decls • func_decl
   19 func_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF  shift, and go to state 28

    main_func  go to state 29
    func_decl  go to state 30


State 19

   10 id_list: id_list • COMMA id_decl
   58 member_decl: id_list • COLON type SEMICOLON

    COLON  shift, and go to state 31
    COMMA  shift, and go to state 27


State 20

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls • method_decls KEYWORD_ENDCOMP SEMICOLON
   59 method_decls: ε •
   60             | • method_decls method_decl

    $default  reduce using rule 59 (method_decls)

    method_decls  go to state 32


State 21

    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   55 member_decls: member_decl_list •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   57 member_decl_list: member_decl_list • member_decl
   58 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 55 (member_decls)

    id_list      go to state 19
    id_decl      go to state 17
    member_decl  go to state 33


State 22

   56 member_decl_list: member_decl •

    $default  reduce using rule 56 (member_decl_list)


State 23

   64 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN • literal COLON type SEMICOLON
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    CONST_STRING  shift, and go to state 34
    CONST_INT     shift, and go to state 35
    CONST_REAL    shift, and go to state 36
    BOOL_TRUE     shift, and go to state 37
    BOOL_FALSE    shift, and go to state 38

    literal  go to state 39


State 24

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 47
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 25

   14 id_decl: OP_HASH IDENTIFIER •  [COLON, COMMA]
   15        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 55

    $default  reduce using rule 14 (id_decl)


State 26

    8 var_decl: id_list COLON • type SEMICOLON
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 63


State 27

   10 id_list: id_list COMMA • id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    id_decl  go to state 64


State 28

    2 main_func: KEYWORD_DEF • KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON
   19 func_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER    shift, and go to state 65
    KEYWORD_MAIN  shift, and go to state 66


State 29

    1 program: comp_decls const_decls var_decls func_decls main_func •

    $default  reduce using rule 1 (program)


State 30

   18 func_decls: func_decls func_decl •

    $default  reduce using rule 18 (func_decls)


State 31

   58 member_decl: id_list COLON • type SEMICOLON
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 67


State 32

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls • KEYWORD_ENDCOMP SEMICOLON
   60 method_decls: method_decls • method_decl
   61 method_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF      shift, and go to state 68
    KEYWORD_ENDCOMP  shift, and go to state 69

    method_decl  go to state 70


State 33

   57 member_decl_list: member_decl_list member_decl •

    $default  reduce using rule 57 (member_decl_list)


State 34

  111 literal: CONST_STRING •

    $default  reduce using rule 111 (literal)


State 35

  109 literal: CONST_INT •

    $default  reduce using rule 109 (literal)


State 36

  110 literal: CONST_REAL •

    $default  reduce using rule 110 (literal)


State 37

  112 literal: BOOL_TRUE •

    $default  reduce using rule 112 (literal)


State 38

  113 literal: BOOL_FALSE •

    $default  reduce using rule 113 (literal)


State 39

   64 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal • COLON type SEMICOLON

    COLON  shift, and go to state 71


State 40

   99 primary: IDENTIFIER •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, DOT, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  103        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 72

    $default  reduce using rule 99 (primary)


State 41

  100 primary: OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 73


State 42

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106        | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 74
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 43

   13 id_decl: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 13 (id_decl)


State 44

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   95 factor: • primary
   96       | • OP_MINUS factor
   96       | OP_MINUS • factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call  go to state 46
    factor         go to state 75
    primary        go to state 53
    literal        go to state 54


State 45

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   97       | OP_NOT • factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call  go to state 46
    factor         go to state 76
    primary        go to state 53
    literal        go to state 54


State 46

  105 primary: function_call •

    $default  reduce using rule 105 (primary)


State 47

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 77


State 48

   77 expr: logical_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   79 logical_expr: logical_expr • OP_AND relational_expr
   80             | logical_expr • OP_OR relational_expr

    OP_AND  shift, and go to state 78
    OP_OR   shift, and go to state 79

    $default  reduce using rule 77 (expr)


State 49

   78 logical_expr: relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   82 relational_expr: relational_expr • OP_LT arithmetic_expr
   83                | relational_expr • OP_LE arithmetic_expr
   84                | relational_expr • OP_GT arithmetic_expr
   85                | relational_expr • OP_GE arithmetic_expr
   86                | relational_expr • OP_EQ arithmetic_expr
   87                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 80
    OP_LE   shift, and go to state 81
    OP_GT   shift, and go to state 82
    OP_GE   shift, and go to state 83
    OP_EQ   shift, and go to state 84
    OP_NEQ  shift, and go to state 85

    $default  reduce using rule 78 (logical_expr)


State 50

   81 relational_expr: arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   89 arithmetic_expr: arithmetic_expr • OP_PLUS term
   90                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 81 (relational_expr)


State 51

   88 arithmetic_expr: term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 term: term • OP_MULT factor
   93     | term • OP_DIV factor
   94     | term • OP_MOD factor

    OP_MULT  shift, and go to state 88
    OP_DIV   shift, and go to state 89
    OP_MOD   shift, and go to state 90

    $default  reduce using rule 88 (arithmetic_expr)


State 52

   91 term: factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   98 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 91 (term)


State 53

   72 function_call: primary • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   95 factor: primary •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101 primary: primary • DOT IDENTIFIER
  102        | primary • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT               shift, and go to state 92
    LEFT_PARENTHESIS  shift, and go to state 93

    $default  reduce using rule 95 (factor)


State 54

  104 primary: literal •

    $default  reduce using rule 104 (primary)


State 55

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 94
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 95
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 56

  119 type: IDENTIFIER •

    $default  reduce using rule 119 (type)


State 57

  115 type: KEYWORD_SCALAR •

    $default  reduce using rule 115 (type)


State 58

  116 type: KEYWORD_STR •

    $default  reduce using rule 116 (type)


State 59

  114 type: KEYWORD_INTEGER •

    $default  reduce using rule 114 (type)


State 60

  118 type: KEYWORD_COMP •

    $default  reduce using rule 118 (type)


State 61

  117 type: KEYWORD_BOOL •

    $default  reduce using rule 117 (type)


State 62

  120 type: LEFT_BRACKET • CONST_INT RIGHT_BRACKET COLON type
  121     | LEFT_BRACKET • RIGHT_BRACKET COLON type

    CONST_INT      shift, and go to state 96
    RIGHT_BRACKET  shift, and go to state 97


State 63

    8 var_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 98


State 64

   10 id_list: id_list COMMA id_decl •

    $default  reduce using rule 10 (id_list)


State 65

   19 func_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 99


State 66

    2 main_func: KEYWORD_DEF KEYWORD_MAIN • LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 100


State 67

   58 member_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 101


State 68

   61 method_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 102


State 69

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 103


State 70

   60 method_decls: method_decls method_decl •

    $default  reduce using rule 60 (method_decls)


State 71

   64 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON • type SEMICOLON
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 104


State 72

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  103        | IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 105
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 73

  100 primary: OP_HASH IDENTIFIER •

    $default  reduce using rule 100 (primary)


State 74

  106 primary: LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 106


State 75

   96 factor: OP_MINUS factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   98       | factor • OP_POWER primary

    $default  reduce using rule 96 (factor)

    Conflict between rule 96 and token OP_POWER resolved as reduce (OP_POWER < UMINUS).


State 76

   97 factor: OP_NOT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   98       | factor • OP_POWER primary

    $default  reduce using rule 97 (factor)

    Conflict between rule 97 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT).


State 77

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 12 (id_decl)


State 78

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79 logical_expr: logical_expr OP_AND • relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    relational_expr  go to state 107
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 79

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   80 logical_expr: logical_expr OP_OR • relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    relational_expr  go to state 108
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 80

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   82 relational_expr: relational_expr OP_LT • arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    arithmetic_expr  go to state 109
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 81

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   83 relational_expr: relational_expr OP_LE • arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    arithmetic_expr  go to state 110
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 82

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   84 relational_expr: relational_expr OP_GT • arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    arithmetic_expr  go to state 111
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 83

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   85 relational_expr: relational_expr OP_GE • arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    arithmetic_expr  go to state 112
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 84

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   86 relational_expr: relational_expr OP_EQ • arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    arithmetic_expr  go to state 113
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 85

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   87 relational_expr: relational_expr OP_NEQ • arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    arithmetic_expr  go to state 114
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 86

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   89 arithmetic_expr: arithmetic_expr OP_PLUS • term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call  go to state 46
    term           go to state 115
    factor         go to state 52
    primary        go to state 53
    literal        go to state 54


State 87

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   90 arithmetic_expr: arithmetic_expr OP_MINUS • term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call  go to state 46
    term           go to state 116
    factor         go to state 52
    primary        go to state 53
    literal        go to state 54


State 88

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   92 term: term OP_MULT • factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call  go to state 46
    factor         go to state 117
    primary        go to state 53
    literal        go to state 54


State 89

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   93 term: term OP_DIV • factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call  go to state 46
    factor         go to state 118
    primary        go to state 53
    literal        go to state 54


State 90

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   94 term: term OP_MOD • factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call  go to state 46
    factor         go to state 119
    primary        go to state 53
    literal        go to state 54


State 91

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   98 factor: factor OP_POWER • primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42

    function_call  go to state 46
    primary        go to state 120
    literal        go to state 54


State 92

  101 primary: primary DOT • IDENTIFIER
  102        | primary DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER  shift, and go to state 121


State 93

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72              | primary LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   73 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   74             | • arg_list
   75 arg_list: • expr
   76         | • arg_list COMMA expr
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 73 (arg_list_opt)

    function_call    go to state 46
    arg_list_opt     go to state 122
    arg_list         go to state 123
    expr             go to state 124
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 94

   16 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 16 (id_decl)


State 95

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 125


State 96

  120 type: LEFT_BRACKET CONST_INT • RIGHT_BRACKET COLON type

    RIGHT_BRACKET  shift, and go to state 126


State 97

  121 type: LEFT_BRACKET RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 127


State 98

    8 var_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 8 (var_decl)


State 99

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   22 param: • id_decl COLON type
   23 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   24               | • param_list
   25 param_list: • param
   26           | • param_list COMMA param

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 23 (param_list_opt)

    id_decl         go to state 128
    param           go to state 129
    param_list_opt  go to state 130
    param_list      go to state 131


State 100

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS • RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 132


State 101

   58 member_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 58 (member_decl)


State 102

   61 method_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 133


State 103

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON •

    $default  reduce using rule 5 (comp_decl)


State 104

   64 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 134


State 105

  103 primary: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 135


State 106

  106 primary: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •

    $default  reduce using rule 106 (primary)


State 107

   79 logical_expr: logical_expr OP_AND relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   82 relational_expr: relational_expr • OP_LT arithmetic_expr
   83                | relational_expr • OP_LE arithmetic_expr
   84                | relational_expr • OP_GT arithmetic_expr
   85                | relational_expr • OP_GE arithmetic_expr
   86                | relational_expr • OP_EQ arithmetic_expr
   87                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 80
    OP_LE   shift, and go to state 81
    OP_GT   shift, and go to state 82
    OP_GE   shift, and go to state 83
    OP_EQ   shift, and go to state 84
    OP_NEQ  shift, and go to state 85

    $default  reduce using rule 79 (logical_expr)


State 108

   80 logical_expr: logical_expr OP_OR relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   82 relational_expr: relational_expr • OP_LT arithmetic_expr
   83                | relational_expr • OP_LE arithmetic_expr
   84                | relational_expr • OP_GT arithmetic_expr
   85                | relational_expr • OP_GE arithmetic_expr
   86                | relational_expr • OP_EQ arithmetic_expr
   87                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 80
    OP_LE   shift, and go to state 81
    OP_GT   shift, and go to state 82
    OP_GE   shift, and go to state 83
    OP_EQ   shift, and go to state 84
    OP_NEQ  shift, and go to state 85

    $default  reduce using rule 80 (logical_expr)


State 109

   82 relational_expr: relational_expr OP_LT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   89 arithmetic_expr: arithmetic_expr • OP_PLUS term
   90                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 82 (relational_expr)


State 110

   83 relational_expr: relational_expr OP_LE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   89 arithmetic_expr: arithmetic_expr • OP_PLUS term
   90                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 83 (relational_expr)


State 111

   84 relational_expr: relational_expr OP_GT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   89 arithmetic_expr: arithmetic_expr • OP_PLUS term
   90                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 84 (relational_expr)


State 112

   85 relational_expr: relational_expr OP_GE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   89 arithmetic_expr: arithmetic_expr • OP_PLUS term
   90                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 85 (relational_expr)


State 113

   86 relational_expr: relational_expr OP_EQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   89 arithmetic_expr: arithmetic_expr • OP_PLUS term
   90                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 86 (relational_expr)


State 114

   87 relational_expr: relational_expr OP_NEQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   89 arithmetic_expr: arithmetic_expr • OP_PLUS term
   90                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 87 (relational_expr)


State 115

   89 arithmetic_expr: arithmetic_expr OP_PLUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 term: term • OP_MULT factor
   93     | term • OP_DIV factor
   94     | term • OP_MOD factor

    OP_MULT  shift, and go to state 88
    OP_DIV   shift, and go to state 89
    OP_MOD   shift, and go to state 90

    $default  reduce using rule 89 (arithmetic_expr)


State 116

   90 arithmetic_expr: arithmetic_expr OP_MINUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 term: term • OP_MULT factor
   93     | term • OP_DIV factor
   94     | term • OP_MOD factor

    OP_MULT  shift, and go to state 88
    OP_DIV   shift, and go to state 89
    OP_MOD   shift, and go to state 90

    $default  reduce using rule 90 (arithmetic_expr)


State 117

   92 term: term OP_MULT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   98 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 92 (term)


State 118

   93 term: term OP_DIV factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   98 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 93 (term)


State 119

   94 term: term OP_MOD factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   98 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 94 (term)


State 120

   72 function_call: primary • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   98 factor: factor OP_POWER primary •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101 primary: primary • DOT IDENTIFIER
  102        | primary • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT               shift, and go to state 92
    LEFT_PARENTHESIS  shift, and go to state 93

    $default  reduce using rule 98 (factor)


State 121

  101 primary: primary DOT IDENTIFIER •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, DOT, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  102        | primary DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 136

    LEFT_PARENTHESIS  [reduce using rule 101 (primary)]
    $default          reduce using rule 101 (primary)

    shift/reduce conflict on token LEFT_PARENTHESIS:
      101 primary: primary DOT IDENTIFIER •
      102 primary: primary DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
      Example: primary DOT IDENTIFIER • LEFT_PARENTHESIS RIGHT_PARENTHESIS
      Shift derivation
        primary
        ↳ 102: primary DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                         ↳ 102: ε
      Reduce derivation
        primary
        ↳ 105: function_call
               ↳ 72: primary                         LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                     ↳ 101: primary DOT IDENTIFIER •                  ↳ 72: ε



State 122

   72 function_call: primary LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 137


State 123

   74 arg_list_opt: arg_list •  [RIGHT_PARENTHESIS]
   76 arg_list: arg_list • COMMA expr

    COMMA  shift, and go to state 138

    $default  reduce using rule 74 (arg_list_opt)


State 124

   75 arg_list: expr •

    $default  reduce using rule 75 (arg_list)


State 125

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 15 (id_decl)


State 126

  120 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 139


State 127

  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type
  121     | LEFT_BRACKET RIGHT_BRACKET COLON • type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 140


State 128

   22 param: id_decl • COLON type

    COLON  shift, and go to state 141


State 129

   25 param_list: param •

    $default  reduce using rule 25 (param_list)


State 130

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 142


State 131

   24 param_list_opt: param_list •  [RIGHT_PARENTHESIS]
   26 param_list: param_list • COMMA param

    COMMA  shift, and go to state 143

    $default  reduce using rule 24 (param_list_opt)


State 132

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS • COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 144


State 133

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   22 param: • id_decl COLON type
   23 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   24               | • param_list
   25 param_list: • param
   26           | • param_list COMMA param
   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 23 (param_list_opt)

    id_decl         go to state 128
    param           go to state 129
    param_list_opt  go to state 145
    param_list      go to state 131


State 134

   64 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON •

    $default  reduce using rule 64 (const_decl)


State 135

  103 primary: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 103 (primary)


State 136

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   73 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   74             | • arg_list
   75 arg_list: • expr
   76         | • arg_list COMMA expr
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102        | primary DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 73 (arg_list_opt)

    function_call    go to state 46
    arg_list_opt     go to state 146
    arg_list         go to state 123
    expr             go to state 124
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 137

   72 function_call: primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 72 (function_call)


State 138

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   76 arg_list: arg_list COMMA • expr
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 147
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 139

  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  120     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON • type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 148


State 140

  121 type: LEFT_BRACKET RIGHT_BRACKET COLON type •

    $default  reduce using rule 121 (type)


State 141

   22 param: id_decl COLON • type
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 149


State 142

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   20 return_type_decl: ε •  [COLON]
   21                 | • ARROW return_type_opt

    ARROW  shift, and go to state 150

    $default  reduce using rule 20 (return_type_decl)

    return_type_decl  go to state 151


State 143

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   22 param: • id_decl COLON type
   26 param_list: param_list COMMA • param

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    id_decl  go to state 128
    param    go to state 152


State 144

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON • local_decls stmts KEYWORD_ENDDEF SEMICOLON
   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 153


State 145

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 154


State 146

  102 primary: primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 155


State 147

   76 arg_list: arg_list COMMA expr •

    $default  reduce using rule 76 (arg_list)


State 148

  120 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type •

    $default  reduce using rule 120 (type)


State 149

   22 param: id_decl COLON type •

    $default  reduce using rule 22 (param)


State 150

   21 return_type_decl: ARROW • return_type_opt
   65 return_type_opt: ε •  [COLON]
   66                | • type
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    $default  reduce using rule 65 (return_type_opt)

    return_type_opt  go to state 156
    type             go to state 157


State 151

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 158


State 152

   26 param_list: param_list COMMA param •

    $default  reduce using rule 26 (param_list)


State 153

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls • stmts KEYWORD_ENDDEF SEMICOLON
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   64 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 167
    id_list               go to state 16
    id_decl               go to state 168
    stmts                 go to state 169
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    const_decl            go to state 175
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 154

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   65 return_type_opt: ε •  [COLON]
   66                | • type
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    $default  reduce using rule 65 (return_type_opt)

    return_type_opt  go to state 178
    type             go to state 157


State 155

  102 primary: primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 102 (primary)


State 156

   21 return_type_decl: ARROW return_type_opt •

    $default  reduce using rule 21 (return_type_decl)


State 157

   66 return_type_opt: type •

    $default  reduce using rule 66 (return_type_opt)


State 158

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 179


State 159

   11 id_decl: IDENTIFIER •  [OP_COLON_ASSIGN, COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   45 lvalue: IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   46       | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   99 primary: IDENTIFIER •  [DOT, LEFT_PARENTHESIS]
  103        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 180

    OP_COLON_ASSIGN   reduce using rule 11 (id_decl)
    COLON             reduce using rule 11 (id_decl)
    COMMA             reduce using rule 11 (id_decl)
    DOT               reduce using rule 99 (primary)
    LEFT_PARENTHESIS  reduce using rule 99 (primary)
    $default          reduce using rule 45 (lvalue)


State 160

   49 compound_stmt: KEYWORD_IF • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 181


State 161

   50 compound_stmt: KEYWORD_WHILE • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 182


State 162

   51 compound_stmt: KEYWORD_FOR • IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 183


State 163

   36 simple_stmt: KEYWORD_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 184


State 164

   37 simple_stmt: KEYWORD_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 185


State 165

   38 simple_stmt: SEMICOLON •

    $default  reduce using rule 38 (simple_stmt)


State 166

   14 id_decl: OP_HASH • IDENTIFIER
   15        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   47 lvalue: OP_HASH • IDENTIFIER
   48       | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  100 primary: OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 186


State 167

   28 local_decls: local_decls var_decl •

    $default  reduce using rule 28 (local_decls)


State 168

    9 id_list: id_decl •  [COLON, COMMA]
   52 compound_stmt: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 187

    $default  reduce using rule 9 (id_list)


State 169

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 188


State 170

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF, KEYWORD_ENDWHILE, KEYWORD_ENDFOR, KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   31      | stmt • stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 190
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 171

   32 stmt: simple_stmt •

    $default  reduce using rule 32 (stmt)


State 172

   34 simple_stmt: assignment_statement •

    $default  reduce using rule 34 (simple_stmt)


State 173

   39 assignment_statement: lvalue • OP_ASSIGN expr SEMICOLON
   40                     | lvalue • OP_PLUS_ASSIGN expr SEMICOLON
   41                     | lvalue • OP_MINUS_ASSIGN expr SEMICOLON
   42                     | lvalue • OP_MULT_ASSIGN expr SEMICOLON
   43                     | lvalue • OP_DIV_ASSIGN expr SEMICOLON
   44                     | lvalue • OP_MOD_ASSIGN expr SEMICOLON

    OP_ASSIGN        shift, and go to state 191
    OP_PLUS_ASSIGN   shift, and go to state 192
    OP_MINUS_ASSIGN  shift, and go to state 193
    OP_MULT_ASSIGN   shift, and go to state 194
    OP_DIV_ASSIGN    shift, and go to state 195
    OP_MOD_ASSIGN    shift, and go to state 196


State 174

   33 stmt: compound_stmt •

    $default  reduce using rule 33 (stmt)


State 175

   29 local_decls: local_decls const_decl •

    $default  reduce using rule 29 (local_decls)


State 176

   35 simple_stmt: function_call • SEMICOLON
  105 primary: function_call •  [DOT, LEFT_PARENTHESIS]

    SEMICOLON  shift, and go to state 197

    $default  reduce using rule 105 (primary)


State 177

   72 function_call: primary • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  101 primary: primary • DOT IDENTIFIER
  102        | primary • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT               shift, and go to state 92
    LEFT_PARENTHESIS  shift, and go to state 93


State 178

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 198


State 179

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   64 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 167
    id_list               go to state 16
    id_decl               go to state 168
    stmts                 go to state 199
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    const_decl            go to state 175
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 180

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   46 lvalue: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  103        | IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 200
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 181

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 201
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 182

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 202
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 183

   51 compound_stmt: KEYWORD_FOR IDENTIFIER • KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    KEYWORD_IN  shift, and go to state 203


State 184

   36 simple_stmt: KEYWORD_BREAK SEMICOLON •

    $default  reduce using rule 36 (simple_stmt)


State 185

   37 simple_stmt: KEYWORD_CONTINUE SEMICOLON •

    $default  reduce using rule 37 (simple_stmt)


State 186

   14 id_decl: OP_HASH IDENTIFIER •  [OP_COLON_ASSIGN, COLON, COMMA]
   15        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   47 lvalue: OP_HASH IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   48       | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
  100 primary: OP_HASH IDENTIFIER •  [DOT, LEFT_PARENTHESIS]

    LEFT_BRACKET  shift, and go to state 204

    OP_COLON_ASSIGN   reduce using rule 14 (id_decl)
    COLON             reduce using rule 14 (id_decl)
    COMMA             reduce using rule 14 (id_decl)
    DOT               reduce using rule 100 (primary)
    LEFT_PARENTHESIS  reduce using rule 100 (primary)
    $default          reduce using rule 47 (lvalue)


State 187

   52 compound_stmt: id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    LEFT_BRACKET  shift, and go to state 205


State 188

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 206


State 189

   52 compound_stmt: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 187


State 190

   31 stmts: stmt stmts •

    $default  reduce using rule 31 (stmts)


State 191

   39 assignment_statement: lvalue OP_ASSIGN • expr SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 207
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 192

   40 assignment_statement: lvalue OP_PLUS_ASSIGN • expr SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 208
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 193

   41 assignment_statement: lvalue OP_MINUS_ASSIGN • expr SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 209
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 194

   42 assignment_statement: lvalue OP_MULT_ASSIGN • expr SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 210
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 195

   43 assignment_statement: lvalue OP_DIV_ASSIGN • expr SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 211
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 196

   44 assignment_statement: lvalue OP_MOD_ASSIGN • expr SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 212
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 197

   35 simple_stmt: function_call SEMICOLON •

    $default  reduce using rule 35 (simple_stmt)


State 198

   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl
   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 213


State 199

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   67 return_opt: ε •  [KEYWORD_ENDDEF]
   68           | • KEYWORD_RETURN SEMICOLON
   69           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 214

    $default  reduce using rule 67 (return_opt)

    return_opt  go to state 215


State 200

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   46 lvalue: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
  103 primary: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 216


State 201

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 217


State 202

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 218


State 203

   51 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN • range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
  107 range_expr: • LEFT_BRACKET expr COLON expr RIGHT_BRACKET
  108           | • LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 219

    range_expr  go to state 220


State 204

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 94
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 221
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 205

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 222
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 206

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 2 (main_func)


State 207

   39 assignment_statement: lvalue OP_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 223


State 208

   40 assignment_statement: lvalue OP_PLUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 224


State 209

   41 assignment_statement: lvalue OP_MINUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 225


State 210

   42 assignment_statement: lvalue OP_MULT_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 226


State 211

   43 assignment_statement: lvalue OP_DIV_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 227


State 212

   44 assignment_statement: lvalue OP_MOD_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 228


State 213

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   64 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 167
    id_list               go to state 16
    id_decl               go to state 168
    stmts                 go to state 229
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    const_decl            go to state 175
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 214

   68 return_opt: KEYWORD_RETURN • SEMICOLON
   69           | KEYWORD_RETURN • expr SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    SEMICOLON         shift, and go to state 230
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 231
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 215

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 232


State 216

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN, COLON, COMMA]
   46 lvalue: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
  103 primary: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [DOT, LEFT_PARENTHESIS]

    OP_COLON_ASSIGN   reduce using rule 12 (id_decl)
    COLON             reduce using rule 12 (id_decl)
    COMMA             reduce using rule 12 (id_decl)
    DOT               reduce using rule 103 (primary)
    LEFT_PARENTHESIS  reduce using rule 103 (primary)
    $default          reduce using rule 46 (lvalue)


State 217

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    COLON  shift, and go to state 233


State 218

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDWHILE SEMICOLON

    COLON  shift, and go to state 234


State 219

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  107 range_expr: LEFT_BRACKET • expr COLON expr RIGHT_BRACKET
  108           | LEFT_BRACKET • expr COLON expr COLON expr RIGHT_BRACKET
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 235
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 220

   51 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 236


State 221

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 237


State 222

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_FOR  shift, and go to state 238


State 223

   39 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON •

    $default  reduce using rule 39 (assignment_statement)


State 224

   40 assignment_statement: lvalue OP_PLUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 40 (assignment_statement)


State 225

   41 assignment_statement: lvalue OP_MINUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 41 (assignment_statement)


State 226

   42 assignment_statement: lvalue OP_MULT_ASSIGN expr SEMICOLON •

    $default  reduce using rule 42 (assignment_statement)


State 227

   43 assignment_statement: lvalue OP_DIV_ASSIGN expr SEMICOLON •

    $default  reduce using rule 43 (assignment_statement)


State 228

   44 assignment_statement: lvalue OP_MOD_ASSIGN expr SEMICOLON •

    $default  reduce using rule 44 (assignment_statement)


State 229

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   67 return_opt: ε •  [KEYWORD_ENDDEF]
   68           | • KEYWORD_RETURN SEMICOLON
   69           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 214

    $default  reduce using rule 67 (return_opt)

    return_opt  go to state 239


State 230

   68 return_opt: KEYWORD_RETURN SEMICOLON •

    $default  reduce using rule 68 (return_opt)


State 231

   69 return_opt: KEYWORD_RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 240


State 232

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 241


State 233

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   49              | KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 242
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 234

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDWHILE]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   50              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 243
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 235

  107 range_expr: LEFT_BRACKET expr • COLON expr RIGHT_BRACKET
  108           | LEFT_BRACKET expr • COLON expr COLON expr RIGHT_BRACKET

    COLON  shift, and go to state 244


State 236

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDFOR]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   51              | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON • stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 245
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 237

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN, COLON, COMMA]
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]

    OP_COLON_ASSIGN  reduce using rule 15 (id_decl)
    COLON            reduce using rule 15 (id_decl)
    COMMA            reduce using rule 15 (id_decl)
    $default         reduce using rule 48 (lvalue)


State 238

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 246


State 239

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 247


State 240

   69 return_opt: KEYWORD_RETURN expr SEMICOLON •

    $default  reduce using rule 69 (return_opt)


State 241

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 19 (func_decl)


State 242

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • else_part KEYWORD_ENDIF SEMICOLON
   70 else_part: ε •  [KEYWORD_ENDIF]
   71          | • KEYWORD_ELSE COLON stmts

    KEYWORD_ELSE  shift, and go to state 248

    $default  reduce using rule 70 (else_part)

    else_part  go to state 249


State 243

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDWHILE SEMICOLON

    KEYWORD_ENDWHILE  shift, and go to state 250


State 244

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  107 range_expr: LEFT_BRACKET expr COLON • expr RIGHT_BRACKET
  108           | LEFT_BRACKET expr COLON • expr COLON expr RIGHT_BRACKET
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 251
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 245

   51 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts • KEYWORD_ENDFOR SEMICOLON

    KEYWORD_ENDFOR  shift, and go to state 252


State 246

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    COLON  shift, and go to state 253


State 247

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 254


State 248

   71 else_part: KEYWORD_ELSE • COLON stmts

    COLON  shift, and go to state 255


State 249

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part • KEYWORD_ENDIF SEMICOLON

    KEYWORD_ENDIF  shift, and go to state 256


State 250

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 257


State 251

  107 range_expr: LEFT_BRACKET expr COLON expr • RIGHT_BRACKET
  108           | LEFT_BRACKET expr COLON expr • COLON expr RIGHT_BRACKET

    COLON          shift, and go to state 258
    RIGHT_BRACKET  shift, and go to state 259


State 252

   51 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 260


State 253

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER        shift, and go to state 261
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_SCALAR    shift, and go to state 57
    KEYWORD_STR       shift, and go to state 58
    KEYWORD_INTEGER   shift, and go to state 59
    KEYWORD_COMP      shift, and go to state 60
    KEYWORD_BOOL      shift, and go to state 61
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    LEFT_BRACKET      shift, and go to state 62
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 262
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54
    type             go to state 263


State 254

   61 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 61 (method_decl)


State 255

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDIF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   71 else_part: KEYWORD_ELSE COLON • stmts
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 159
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 160
    KEYWORD_WHILE     shift, and go to state 161
    KEYWORD_FOR       shift, and go to state 162
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 163
    KEYWORD_CONTINUE  shift, and go to state 164
    SEMICOLON         shift, and go to state 165
    OP_HASH           shift, and go to state 166
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 264
    stmt                  go to state 170
    simple_stmt           go to state 171
    assignment_statement  go to state 172
    lvalue                go to state 173
    compound_stmt         go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 256

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 265


State 257

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 50 (compound_stmt)


State 258

   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  108 range_expr: LEFT_BRACKET expr COLON expr COLON • expr RIGHT_BRACKET
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 266
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 259

  107 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 107 (range_expr)


State 260

   51 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 51 (compound_stmt)


State 261

   99 primary: IDENTIFIER •  [DOT, LEFT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  103        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
  119 type: IDENTIFIER •  [KEYWORD_IN]

    LEFT_BRACKET  shift, and go to state 72

    KEYWORD_IN  reduce using rule 119 (type)
    $default    reduce using rule 99 (primary)


State 262

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 267


State 263

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type • KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_IN  shift, and go to state 268


State 264

   71 else_part: KEYWORD_ELSE COLON stmts •

    $default  reduce using rule 71 (else_part)


State 265

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON •

    $default  reduce using rule 49 (compound_stmt)


State 266

  108 range_expr: LEFT_BRACKET expr COLON expr COLON expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 269


State 267

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 270


State 268

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN • IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 271


State 269

  108 range_expr: LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 108 (range_expr)


State 270

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON • type SEMICOLON
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 272


State 271

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER • KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_OF  shift, and go to state 273


State 272

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 274


State 273

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF • expr RIGHT_BRACKET COLON type SEMICOLON
   72 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 expr: • logical_expr
   78 logical_expr: • relational_expr
   79             | • logical_expr OP_AND relational_expr
   80             | • logical_expr OP_OR relational_expr
   81 relational_expr: • arithmetic_expr
   82                | • relational_expr OP_LT arithmetic_expr
   83                | • relational_expr OP_LE arithmetic_expr
   84                | • relational_expr OP_GT arithmetic_expr
   85                | • relational_expr OP_GE arithmetic_expr
   86                | • relational_expr OP_EQ arithmetic_expr
   87                | • relational_expr OP_NEQ arithmetic_expr
   88 arithmetic_expr: • term
   89                | • arithmetic_expr OP_PLUS term
   90                | • arithmetic_expr OP_MINUS term
   91 term: • factor
   92     | • term OP_MULT factor
   93     | • term OP_DIV factor
   94     | • term OP_MOD factor
   95 factor: • primary
   96       | • OP_MINUS factor
   97       | • OP_NOT factor
   98       | • factor OP_POWER primary
   99 primary: • IDENTIFIER
  100        | • OP_HASH IDENTIFIER
  101        | • primary DOT IDENTIFIER
  102        | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  103        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  104        | • literal
  105        | • function_call
  106        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  109 literal: • CONST_INT
  110        | • CONST_REAL
  111        | • CONST_STRING
  112        | • BOOL_TRUE
  113        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    function_call    go to state 46
    expr             go to state 275
    logical_expr     go to state 48
    relational_expr  go to state 49
    arithmetic_expr  go to state 50
    term             go to state 51
    factor           go to state 52
    primary          go to state 53
    literal          go to state 54


State 274

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 52 (compound_stmt)


State 275

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 276


State 276

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 277


State 277

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON • type SEMICOLON
  114 type: • KEYWORD_INTEGER
  115     | • KEYWORD_SCALAR
  116     | • KEYWORD_STR
  117     | • KEYWORD_BOOL
  118     | • KEYWORD_COMP
  119     | • IDENTIFIER
  120     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  121     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 278


State 278

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 279


State 279

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 53 (compound_stmt)
