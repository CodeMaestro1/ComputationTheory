Grammar

    0 $accept: program $end

    1 program: comp_decls const_decls var_decls func_decls main_func

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    3 comp_decls: ε
    4           | comp_decls comp_decl

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    6 var_decls: ε
    7          | var_decls var_decl

    8 var_decl: id_list COLON type SEMICOLON

    9 id_list: id_decl
   10        | id_list COMMA id_decl

   11 id_decl: IDENTIFIER
   12        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | OP_HASH IDENTIFIER
   15        | OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   17 func_decls: ε
   18           | func_decls func_decl

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   20 return_type_decl: ε
   21                 | ARROW return_type_opt

   22 param: id_decl COLON type

   23 param_list_opt: ε
   24               | param_list

   25 param_list: param
   26           | param_list COMMA param

   27 local_decls: ε
   28            | local_decls var_decl
   29            | local_decls const_decl

   30 stmts: ε
   31      | stmt stmts

   32 stmt: simple_stmt
   33     | compound_stmt

   34 simple_stmt: assignment_statement
   35            | function_call SEMICOLON
   36            | KEYWORD_BREAK SEMICOLON
   37            | KEYWORD_CONTINUE SEMICOLON
   38            | SEMICOLON

   39 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON
   40                     | lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | lvalue OP_MOD_ASSIGN expr SEMICOLON

   45 lvalue: IDENTIFIER
   46       | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | OP_HASH IDENTIFIER
   48       | OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | for_loop
   52              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

   56 member_decls: ε
   57             | member_decl_list

   58 member_decl_list: member_decl
   59                 | member_decl_list member_decl

   60 member_decl: id_list COLON type SEMICOLON

   61 method_decls: ε
   62             | method_decls method_decl

   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   64 const_decls: ε
   65            | const_decls const_decl

   66 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

   67 return_type_opt: ε
   68                | type

   69 return_opt: ε
   70           | KEYWORD_RETURN SEMICOLON
   71           | KEYWORD_RETURN expr SEMICOLON

   72 else_part: ε
   73          | KEYWORD_ELSE COLON stmts

   74 function_call: primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

   76 arg_list_opt: ε
   77             | arg_list

   78 arg_list: expr
   79         | arg_list COMMA expr

   80 expr: logical_expr

   81 logical_expr: relational_expr
   82             | logical_expr OP_AND relational_expr
   83             | logical_expr OP_OR relational_expr

   84 relational_expr: arithmetic_expr
   85                | relational_expr OP_LT arithmetic_expr
   86                | relational_expr OP_LE arithmetic_expr
   87                | relational_expr OP_GT arithmetic_expr
   88                | relational_expr OP_GE arithmetic_expr
   89                | relational_expr OP_EQ arithmetic_expr
   90                | relational_expr OP_NEQ arithmetic_expr

   91 arithmetic_expr: term
   92                | arithmetic_expr OP_PLUS term
   93                | arithmetic_expr OP_MINUS term

   94 term: factor
   95     | term OP_MULT factor
   96     | term OP_DIV factor
   97     | term OP_MOD factor

   98 factor: postfix
   99       | OP_MINUS factor
  100       | OP_NOT factor
  101       | factor OP_POWER postfix

  102 primary: IDENTIFIER
  103        | OP_HASH IDENTIFIER
  104        | literal
  105        | LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

  106 postfix: primary
  107        | postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | postfix DOT IDENTIFIER
  109        | postfix DOT OP_HASH IDENTIFIER
  110        | postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

  111 literal: CONST_INT
  112        | CONST_REAL
  113        | CONST_STRING
  114        | BOOL_TRUE
  115        | BOOL_FALSE

  116 type: KEYWORD_INTEGER
  117     | KEYWORD_SCALAR
  118     | KEYWORD_STR
  119     | KEYWORD_BOOL
  120     | KEYWORD_COMP
  121     | IDENTIFIER
  122     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | LEFT_BRACKET RIGHT_BRACKET COLON type


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <stringVal> (258) 5 11 12 13 14 15 16 19 45 46 47 48 52 53 54 55 63 66 75 102 103 108 109 121
    CONST_STRING <stringVal> (259) 113
    CONST_INT <integerVal> (260) 111 122
    CONST_REAL <floatVal> (261) 112
    KEYWORD_SCALAR (262) 117
    KEYWORD_STR <stringVal> (263) 118
    OP_COLON_ASSIGN <stringVal> (264) 52 53
    KEYWORD_INTEGER <integerVal> (265) 116
    KEYWORD_IF (266) 49
    KEYWORD_ELSE (267) 73
    KEYWORD_ENDIF (268) 49
    KEYWORD_WHILE (269) 50
    KEYWORD_ENDWHILE (270) 50
    KEYWORD_FOR (271) 52 53 54 55
    KEYWORD_IN (272) 53 54 55
    KEYWORD_ENDFOR (273) 54 55
    KEYWORD_DEF (274) 2 19 63
    KEYWORD_ENDDEF (275) 2 19 63
    KEYWORD_MAIN (276) 2
    KEYWORD_RETURN (277) 70 71
    KEYWORD_CONST (278) 66
    KEYWORD_COMP (279) 5 120
    KEYWORD_ENDCOMP (280) 5
    KEYWORD_OF (281) 53
    KEYWORD_BOOL (282) 119
    BOOL_TRUE (283) 114
    BOOL_FALSE (284) 115
    KEYWORD_BREAK (285) 36
    KEYWORD_CONTINUE (286) 37
    SEMICOLON (287) 2 5 8 19 35 36 37 38 39 40 41 42 43 44 49 50 52 53 54 55 60 63 66 70 71
    COLON (288) 2 5 8 19 22 49 50 52 53 54 55 60 63 66 73 122 123
    COMMA (289) 10 26 79
    ARROW (290) 21
    OP_HASH (291) 14 15 16 47 48 103 109
    DOT (292) 75 108 109
    LEFT_PARENTHESIS (293) 2 19 49 50 63 74 75 105 110
    RIGHT_PARENTHESIS (294) 2 19 49 50 63 74 75 105 110
    LEFT_BRACKET (295) 12 13 15 16 46 48 52 53 54 55 107 122 123
    RIGHT_BRACKET (296) 12 13 15 16 46 48 52 53 54 55 107 122 123
    OP_POWER (297) 101
    UMINUS (298)
    OP_MULT (299) 95
    OP_DIV (300) 96
    OP_MOD (301) 97
    OP_PLUS (302) 92
    OP_MINUS (303) 93 99
    OP_LT (304) 85
    OP_LE (305) 86
    OP_GT (306) 87
    OP_GE (307) 88
    OP_EQ (308) 89
    OP_NEQ (309) 90
    OP_NOT (310) 100
    OP_AND (311) 82
    OP_OR (312) 83
    OP_ASSIGN (313) 39 66
    OP_PLUS_ASSIGN (314) 40
    OP_MINUS_ASSIGN (315) 41
    OP_MULT_ASSIGN (316) 42
    OP_DIV_ASSIGN (317) 43
    OP_MOD_ASSIGN (318) 44


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1
        on right: 0
    main_func (66)
        on left: 2
        on right: 1
    comp_decls (67)
        on left: 3 4
        on right: 1 4
    comp_decl (68)
        on left: 5
        on right: 4
    var_decls (69)
        on left: 6 7
        on right: 1 7
    var_decl (70)
        on left: 8
        on right: 7 28
    id_list (71)
        on left: 9 10
        on right: 8 10 60
    id_decl <stringVal> (72)
        on left: 11 12 13 14 15 16
        on right: 9 10 22 52 53
    func_decls (73)
        on left: 17 18
        on right: 1 18
    func_decl (74)
        on left: 19
        on right: 18
    return_type_decl (75)
        on left: 20 21
        on right: 19 63
    param (76)
        on left: 22
        on right: 25 26
    param_list_opt (77)
        on left: 23 24
        on right: 19 63
    param_list (78)
        on left: 25 26
        on right: 24 26
    local_decls (79)
        on left: 27 28 29
        on right: 2 19 28 29 63
    stmts <stringVal> (80)
        on left: 30 31
        on right: 2 19 31 49 50 54 55 63 73
    stmt <stringVal> (81)
        on left: 32 33
        on right: 31
    simple_stmt <stringVal> (82)
        on left: 34 35 36 37 38
        on right: 32
    assignment_statement <stringVal> (83)
        on left: 39 40 41 42 43 44
        on right: 34
    lvalue <stringVal> (84)
        on left: 45 46 47 48
        on right: 39 40 41 42 43 44
    compound_stmt <stringVal> (85)
        on left: 49 50 51 52 53
        on right: 33
    for_loop <stringVal> (86)
        on left: 54 55
        on right: 51
    member_decls (87)
        on left: 56 57
        on right: 5
    member_decl_list (88)
        on left: 58 59
        on right: 57 59
    member_decl (89)
        on left: 60
        on right: 58 59
    method_decls (90)
        on left: 61 62
        on right: 5 62
    method_decl (91)
        on left: 63
        on right: 62
    const_decls (92)
        on left: 64 65
        on right: 1 65
    const_decl (93)
        on left: 66
        on right: 29 65
    return_type_opt (94)
        on left: 67 68
        on right: 21
    return_opt <stringVal> (95)
        on left: 69 70 71
        on right: 19 63
    else_part <stringVal> (96)
        on left: 72 73
        on right: 49
    function_call <stringVal> (97)
        on left: 74 75
        on right: 35
    arg_list_opt <stringVal> (98)
        on left: 76 77
        on right: 74 75 110
    arg_list <stringVal> (99)
        on left: 78 79
        on right: 77 79
    expr <stringVal> (100)
        on left: 80
        on right: 12 15 39 40 41 42 43 44 46 48 49 50 52 53 54 55 71 78 79 105 107
    logical_expr <stringVal> (101)
        on left: 81 82 83
        on right: 80 82 83
    relational_expr <stringVal> (102)
        on left: 84 85 86 87 88 89 90
        on right: 81 82 83 85 86 87 88 89 90
    arithmetic_expr <stringVal> (103)
        on left: 91 92 93
        on right: 84 85 86 87 88 89 90 92 93
    term <stringVal> (104)
        on left: 94 95 96 97
        on right: 91 92 93 95 96 97
    factor <stringVal> (105)
        on left: 98 99 100 101
        on right: 94 95 96 97 99 100 101
    primary <stringVal> (106)
        on left: 102 103 104 105
        on right: 74 75 106
    postfix <stringVal> (107)
        on left: 106 107 108 109 110
        on right: 98 101 107 108 109 110
    literal <stringVal> (108)
        on left: 111 112 113 114 115
        on right: 66 104
    type <stringVal> (109)
        on left: 116 117 118 119 120 121 122 123
        on right: 8 22 52 53 60 66 68 122 123


State 0

    0 $accept: • program $end
    1 program: • comp_decls const_decls var_decls func_decls main_func
    3 comp_decls: ε •
    4           | • comp_decls comp_decl

    $default  reduce using rule 3 (comp_decls)

    program     go to state 1
    comp_decls  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: comp_decls • const_decls var_decls func_decls main_func
    4 comp_decls: comp_decls • comp_decl
    5 comp_decl: • KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
   64 const_decls: ε •  [IDENTIFIER, KEYWORD_DEF, KEYWORD_CONST, OP_HASH]
   65            | • const_decls const_decl

    KEYWORD_COMP  shift, and go to state 4

    $default  reduce using rule 64 (const_decls)

    comp_decl    go to state 5
    const_decls  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    5 comp_decl: KEYWORD_COMP • IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    4 comp_decls: comp_decls comp_decl •

    $default  reduce using rule 4 (comp_decls)


State 6

    1 program: comp_decls const_decls • var_decls func_decls main_func
    6 var_decls: ε •  [IDENTIFIER, KEYWORD_DEF, OP_HASH]
    7          | • var_decls var_decl
   65 const_decls: const_decls • const_decl
   66 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    KEYWORD_CONST  shift, and go to state 8

    $default  reduce using rule 6 (var_decls)

    var_decls   go to state 9
    const_decl  go to state 10


State 7

    5 comp_decl: KEYWORD_COMP IDENTIFIER • COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    COLON  shift, and go to state 11


State 8

   66 const_decl: KEYWORD_CONST • IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 12


State 9

    1 program: comp_decls const_decls var_decls • func_decls main_func
    7 var_decls: var_decls • var_decl
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   17 func_decls: ε •  [KEYWORD_DEF]
   18           | • func_decls func_decl

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 17 (func_decls)

    var_decl    go to state 15
    id_list     go to state 16
    id_decl     go to state 17
    func_decls  go to state 18


State 10

   65 const_decls: const_decls const_decl •

    $default  reduce using rule 65 (const_decls)


State 11

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON • member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   56 member_decls: ε •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   57             | • member_decl_list
   58 member_decl_list: • member_decl
   59                 | • member_decl_list member_decl
   60 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 56 (member_decls)

    id_list           go to state 19
    id_decl           go to state 17
    member_decls      go to state 20
    member_decl_list  go to state 21
    member_decl       go to state 22


State 12

   66 const_decl: KEYWORD_CONST IDENTIFIER • OP_ASSIGN literal COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 23


State 13

   11 id_decl: IDENTIFIER •  [COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 24

    $default  reduce using rule 11 (id_decl)


State 14

   14 id_decl: OP_HASH • IDENTIFIER
   15        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 25


State 15

    7 var_decls: var_decls var_decl •

    $default  reduce using rule 7 (var_decls)


State 16

    8 var_decl: id_list • COLON type SEMICOLON
   10 id_list: id_list • COMMA id_decl

    COLON  shift, and go to state 26
    COMMA  shift, and go to state 27


State 17

    9 id_list: id_decl •

    $default  reduce using rule 9 (id_list)


State 18

    1 program: comp_decls const_decls var_decls func_decls • main_func
    2 main_func: • KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON
   18 func_decls: func_decls • func_decl
   19 func_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF  shift, and go to state 28

    main_func  go to state 29
    func_decl  go to state 30


State 19

   10 id_list: id_list • COMMA id_decl
   60 member_decl: id_list • COLON type SEMICOLON

    COLON  shift, and go to state 31
    COMMA  shift, and go to state 27


State 20

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls • method_decls KEYWORD_ENDCOMP SEMICOLON
   61 method_decls: ε •
   62             | • method_decls method_decl

    $default  reduce using rule 61 (method_decls)

    method_decls  go to state 32


State 21

    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   57 member_decls: member_decl_list •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   59 member_decl_list: member_decl_list • member_decl
   60 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 57 (member_decls)

    id_list      go to state 19
    id_decl      go to state 17
    member_decl  go to state 33


State 22

   58 member_decl_list: member_decl •

    $default  reduce using rule 58 (member_decl_list)


State 23

   66 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN • literal COLON type SEMICOLON
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    CONST_STRING  shift, and go to state 34
    CONST_INT     shift, and go to state 35
    CONST_REAL    shift, and go to state 36
    BOOL_TRUE     shift, and go to state 37
    BOOL_FALSE    shift, and go to state 38

    literal  go to state 39


State 24

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 46
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 25

   14 id_decl: OP_HASH IDENTIFIER •  [COLON, COMMA]
   15        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 55

    $default  reduce using rule 14 (id_decl)


State 26

    8 var_decl: id_list COLON • type SEMICOLON
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 63


State 27

   10 id_list: id_list COMMA • id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    id_decl  go to state 64


State 28

    2 main_func: KEYWORD_DEF • KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON
   19 func_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER    shift, and go to state 65
    KEYWORD_MAIN  shift, and go to state 66


State 29

    1 program: comp_decls const_decls var_decls func_decls main_func •

    $default  reduce using rule 1 (program)


State 30

   18 func_decls: func_decls func_decl •

    $default  reduce using rule 18 (func_decls)


State 31

   60 member_decl: id_list COLON • type SEMICOLON
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 67


State 32

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls • KEYWORD_ENDCOMP SEMICOLON
   62 method_decls: method_decls • method_decl
   63 method_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF      shift, and go to state 68
    KEYWORD_ENDCOMP  shift, and go to state 69

    method_decl  go to state 70


State 33

   59 member_decl_list: member_decl_list member_decl •

    $default  reduce using rule 59 (member_decl_list)


State 34

  113 literal: CONST_STRING •

    $default  reduce using rule 113 (literal)


State 35

  111 literal: CONST_INT •

    $default  reduce using rule 111 (literal)


State 36

  112 literal: CONST_REAL •

    $default  reduce using rule 112 (literal)


State 37

  114 literal: BOOL_TRUE •

    $default  reduce using rule 114 (literal)


State 38

  115 literal: BOOL_FALSE •

    $default  reduce using rule 115 (literal)


State 39

   66 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal • COLON type SEMICOLON

    COLON  shift, and go to state 71


State 40

  102 primary: IDENTIFIER •

    $default  reduce using rule 102 (primary)


State 41

  103 primary: OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 72


State 42

   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  105        | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 73
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 43

   13 id_decl: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 13 (id_decl)


State 44

   98 factor: • postfix
   99       | • OP_MINUS factor
   99       | OP_MINUS • factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 74
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 45

   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  100       | OP_NOT • factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 75
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 46

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 76


State 47

   80 expr: logical_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   82 logical_expr: logical_expr • OP_AND relational_expr
   83             | logical_expr • OP_OR relational_expr

    OP_AND  shift, and go to state 77
    OP_OR   shift, and go to state 78

    $default  reduce using rule 80 (expr)


State 48

   81 logical_expr: relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   85 relational_expr: relational_expr • OP_LT arithmetic_expr
   86                | relational_expr • OP_LE arithmetic_expr
   87                | relational_expr • OP_GT arithmetic_expr
   88                | relational_expr • OP_GE arithmetic_expr
   89                | relational_expr • OP_EQ arithmetic_expr
   90                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 79
    OP_LE   shift, and go to state 80
    OP_GT   shift, and go to state 81
    OP_GE   shift, and go to state 82
    OP_EQ   shift, and go to state 83
    OP_NEQ  shift, and go to state 84

    $default  reduce using rule 81 (logical_expr)


State 49

   84 relational_expr: arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 arithmetic_expr: arithmetic_expr • OP_PLUS term
   93                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 84 (relational_expr)


State 50

   91 arithmetic_expr: term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   95 term: term • OP_MULT factor
   96     | term • OP_DIV factor
   97     | term • OP_MOD factor

    OP_MULT  shift, and go to state 87
    OP_DIV   shift, and go to state 88
    OP_MOD   shift, and go to state 89

    $default  reduce using rule 91 (arithmetic_expr)


State 51

   94 term: factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 90

    $default  reduce using rule 94 (term)


State 52

  106 postfix: primary •

    $default  reduce using rule 106 (postfix)


State 53

   98 factor: postfix •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  107 postfix: postfix • LEFT_BRACKET expr RIGHT_BRACKET
  108        | postfix • DOT IDENTIFIER
  109        | postfix • DOT OP_HASH IDENTIFIER
  110        | postfix • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT               shift, and go to state 91
    LEFT_PARENTHESIS  shift, and go to state 92
    LEFT_BRACKET      shift, and go to state 93

    $default  reduce using rule 98 (factor)


State 54

  104 primary: literal •

    $default  reduce using rule 104 (primary)


State 55

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 94
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 95
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 56

  121 type: IDENTIFIER •

    $default  reduce using rule 121 (type)


State 57

  117 type: KEYWORD_SCALAR •

    $default  reduce using rule 117 (type)


State 58

  118 type: KEYWORD_STR •

    $default  reduce using rule 118 (type)


State 59

  116 type: KEYWORD_INTEGER •

    $default  reduce using rule 116 (type)


State 60

  120 type: KEYWORD_COMP •

    $default  reduce using rule 120 (type)


State 61

  119 type: KEYWORD_BOOL •

    $default  reduce using rule 119 (type)


State 62

  122 type: LEFT_BRACKET • CONST_INT RIGHT_BRACKET COLON type
  123     | LEFT_BRACKET • RIGHT_BRACKET COLON type

    CONST_INT      shift, and go to state 96
    RIGHT_BRACKET  shift, and go to state 97


State 63

    8 var_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 98


State 64

   10 id_list: id_list COMMA id_decl •

    $default  reduce using rule 10 (id_list)


State 65

   19 func_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 99


State 66

    2 main_func: KEYWORD_DEF KEYWORD_MAIN • LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 100


State 67

   60 member_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 101


State 68

   63 method_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 102


State 69

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 103


State 70

   62 method_decls: method_decls method_decl •

    $default  reduce using rule 62 (method_decls)


State 71

   66 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON • type SEMICOLON
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 104


State 72

  103 primary: OP_HASH IDENTIFIER •

    $default  reduce using rule 103 (primary)


State 73

  105 primary: LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 105


State 74

   99 factor: OP_MINUS factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101       | factor • OP_POWER postfix

    $default  reduce using rule 99 (factor)

    Conflict between rule 99 and token OP_POWER resolved as reduce (OP_POWER < UMINUS).


State 75

  100 factor: OP_NOT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101       | factor • OP_POWER postfix

    $default  reduce using rule 100 (factor)

    Conflict between rule 100 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT).


State 76

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 12 (id_decl)


State 77

   82 logical_expr: logical_expr OP_AND • relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    relational_expr  go to state 106
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 78

   83 logical_expr: logical_expr OP_OR • relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    relational_expr  go to state 107
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 79

   85 relational_expr: relational_expr OP_LT • arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 108
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 80

   86 relational_expr: relational_expr OP_LE • arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 109
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 81

   87 relational_expr: relational_expr OP_GT • arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 110
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 82

   88 relational_expr: relational_expr OP_GE • arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 111
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 83

   89 relational_expr: relational_expr OP_EQ • arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 112
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 84

   90 relational_expr: relational_expr OP_NEQ • arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 113
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 85

   92 arithmetic_expr: arithmetic_expr OP_PLUS • term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    term     go to state 114
    factor   go to state 51
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 86

   93 arithmetic_expr: arithmetic_expr OP_MINUS • term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    term     go to state 115
    factor   go to state 51
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 87

   95 term: term OP_MULT • factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 116
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 88

   96 term: term OP_DIV • factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 117
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 89

   97 term: term OP_MOD • factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 118
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 90

  101 factor: factor OP_POWER • postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42

    primary  go to state 52
    postfix  go to state 119
    literal  go to state 54


State 91

  108 postfix: postfix DOT • IDENTIFIER
  109        | postfix DOT • OP_HASH IDENTIFIER

    IDENTIFIER  shift, and go to state 120
    OP_HASH     shift, and go to state 121


State 92

   76 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   77             | • arg_list
   78 arg_list: • expr
   79         | • arg_list COMMA expr
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  110        | postfix LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 76 (arg_list_opt)

    arg_list_opt     go to state 122
    arg_list         go to state 123
    expr             go to state 124
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 93

   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  107        | postfix LEFT_BRACKET • expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 125
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 94

   16 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 16 (id_decl)


State 95

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 126


State 96

  122 type: LEFT_BRACKET CONST_INT • RIGHT_BRACKET COLON type

    RIGHT_BRACKET  shift, and go to state 127


State 97

  123 type: LEFT_BRACKET RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 128


State 98

    8 var_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 8 (var_decl)


State 99

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   22 param: • id_decl COLON type
   23 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   24               | • param_list
   25 param_list: • param
   26           | • param_list COMMA param

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 23 (param_list_opt)

    id_decl         go to state 129
    param           go to state 130
    param_list_opt  go to state 131
    param_list      go to state 132


State 100

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS • RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 133


State 101

   60 member_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 60 (member_decl)


State 102

   63 method_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 134


State 103

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON •

    $default  reduce using rule 5 (comp_decl)


State 104

   66 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 135


State 105

  105 primary: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •

    $default  reduce using rule 105 (primary)


State 106

   82 logical_expr: logical_expr OP_AND relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   85 relational_expr: relational_expr • OP_LT arithmetic_expr
   86                | relational_expr • OP_LE arithmetic_expr
   87                | relational_expr • OP_GT arithmetic_expr
   88                | relational_expr • OP_GE arithmetic_expr
   89                | relational_expr • OP_EQ arithmetic_expr
   90                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 79
    OP_LE   shift, and go to state 80
    OP_GT   shift, and go to state 81
    OP_GE   shift, and go to state 82
    OP_EQ   shift, and go to state 83
    OP_NEQ  shift, and go to state 84

    $default  reduce using rule 82 (logical_expr)


State 107

   83 logical_expr: logical_expr OP_OR relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   85 relational_expr: relational_expr • OP_LT arithmetic_expr
   86                | relational_expr • OP_LE arithmetic_expr
   87                | relational_expr • OP_GT arithmetic_expr
   88                | relational_expr • OP_GE arithmetic_expr
   89                | relational_expr • OP_EQ arithmetic_expr
   90                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 79
    OP_LE   shift, and go to state 80
    OP_GT   shift, and go to state 81
    OP_GE   shift, and go to state 82
    OP_EQ   shift, and go to state 83
    OP_NEQ  shift, and go to state 84

    $default  reduce using rule 83 (logical_expr)


State 108

   85 relational_expr: relational_expr OP_LT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 arithmetic_expr: arithmetic_expr • OP_PLUS term
   93                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 85 (relational_expr)


State 109

   86 relational_expr: relational_expr OP_LE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 arithmetic_expr: arithmetic_expr • OP_PLUS term
   93                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 86 (relational_expr)


State 110

   87 relational_expr: relational_expr OP_GT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 arithmetic_expr: arithmetic_expr • OP_PLUS term
   93                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 87 (relational_expr)


State 111

   88 relational_expr: relational_expr OP_GE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 arithmetic_expr: arithmetic_expr • OP_PLUS term
   93                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 88 (relational_expr)


State 112

   89 relational_expr: relational_expr OP_EQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 arithmetic_expr: arithmetic_expr • OP_PLUS term
   93                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 89 (relational_expr)


State 113

   90 relational_expr: relational_expr OP_NEQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   92 arithmetic_expr: arithmetic_expr • OP_PLUS term
   93                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 85
    OP_MINUS  shift, and go to state 86

    $default  reduce using rule 90 (relational_expr)


State 114

   92 arithmetic_expr: arithmetic_expr OP_PLUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   95 term: term • OP_MULT factor
   96     | term • OP_DIV factor
   97     | term • OP_MOD factor

    OP_MULT  shift, and go to state 87
    OP_DIV   shift, and go to state 88
    OP_MOD   shift, and go to state 89

    $default  reduce using rule 92 (arithmetic_expr)


State 115

   93 arithmetic_expr: arithmetic_expr OP_MINUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   95 term: term • OP_MULT factor
   96     | term • OP_DIV factor
   97     | term • OP_MOD factor

    OP_MULT  shift, and go to state 87
    OP_DIV   shift, and go to state 88
    OP_MOD   shift, and go to state 89

    $default  reduce using rule 93 (arithmetic_expr)


State 116

   95 term: term OP_MULT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 90

    $default  reduce using rule 95 (term)


State 117

   96 term: term OP_DIV factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 90

    $default  reduce using rule 96 (term)


State 118

   97 term: term OP_MOD factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  101 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 90

    $default  reduce using rule 97 (term)


State 119

  101 factor: factor OP_POWER postfix •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  107 postfix: postfix • LEFT_BRACKET expr RIGHT_BRACKET
  108        | postfix • DOT IDENTIFIER
  109        | postfix • DOT OP_HASH IDENTIFIER
  110        | postfix • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT               shift, and go to state 91
    LEFT_PARENTHESIS  shift, and go to state 92
    LEFT_BRACKET      shift, and go to state 93

    $default  reduce using rule 101 (factor)


State 120

  108 postfix: postfix DOT IDENTIFIER •

    $default  reduce using rule 108 (postfix)


State 121

  109 postfix: postfix DOT OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 136


State 122

  110 postfix: postfix LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 137


State 123

   77 arg_list_opt: arg_list •  [RIGHT_PARENTHESIS]
   79 arg_list: arg_list • COMMA expr

    COMMA  shift, and go to state 138

    $default  reduce using rule 77 (arg_list_opt)


State 124

   78 arg_list: expr •

    $default  reduce using rule 78 (arg_list)


State 125

  107 postfix: postfix LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 139


State 126

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 15 (id_decl)


State 127

  122 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 140


State 128

  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type
  123     | LEFT_BRACKET RIGHT_BRACKET COLON • type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 141


State 129

   22 param: id_decl • COLON type

    COLON  shift, and go to state 142


State 130

   25 param_list: param •

    $default  reduce using rule 25 (param_list)


State 131

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 143


State 132

   24 param_list_opt: param_list •  [RIGHT_PARENTHESIS]
   26 param_list: param_list • COMMA param

    COMMA  shift, and go to state 144

    $default  reduce using rule 24 (param_list_opt)


State 133

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS • COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 145


State 134

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   22 param: • id_decl COLON type
   23 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   24               | • param_list
   25 param_list: • param
   26           | • param_list COMMA param
   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 23 (param_list_opt)

    id_decl         go to state 129
    param           go to state 130
    param_list_opt  go to state 146
    param_list      go to state 132


State 135

   66 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON •

    $default  reduce using rule 66 (const_decl)


State 136

  109 postfix: postfix DOT OP_HASH IDENTIFIER •

    $default  reduce using rule 109 (postfix)


State 137

  110 postfix: postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 110 (postfix)


State 138

   79 arg_list: arg_list COMMA • expr
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 147
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 139

  107 postfix: postfix LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 107 (postfix)


State 140

  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  122     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON • type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 148


State 141

  123 type: LEFT_BRACKET RIGHT_BRACKET COLON type •

    $default  reduce using rule 123 (type)


State 142

   22 param: id_decl COLON • type
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 149


State 143

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   20 return_type_decl: ε •  [COLON]
   21                 | • ARROW return_type_opt

    ARROW  shift, and go to state 150

    $default  reduce using rule 20 (return_type_decl)

    return_type_decl  go to state 151


State 144

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   22 param: • id_decl COLON type
   26 param_list: param_list COMMA • param

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    id_decl  go to state 129
    param    go to state 152


State 145

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON • local_decls stmts KEYWORD_ENDDEF SEMICOLON
   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 153


State 146

   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 154


State 147

   79 arg_list: arg_list COMMA expr •

    $default  reduce using rule 79 (arg_list)


State 148

  122 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type •

    $default  reduce using rule 122 (type)


State 149

   22 param: id_decl COLON type •

    $default  reduce using rule 22 (param)


State 150

   21 return_type_decl: ARROW • return_type_opt
   67 return_type_opt: ε •  [COLON]
   68                | • type
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    $default  reduce using rule 67 (return_type_opt)

    return_type_opt  go to state 155
    type             go to state 156


State 151

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 157


State 152

   26 param_list: param_list COMMA param •

    $default  reduce using rule 26 (param_list)


State 153

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls • stmts KEYWORD_ENDDEF SEMICOLON
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   66 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 166
    id_list               go to state 16
    id_decl               go to state 167
    stmts                 go to state 168
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    const_decl            go to state 175
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 154

   20 return_type_decl: ε •  [COLON]
   21                 | • ARROW return_type_opt
   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    ARROW  shift, and go to state 150

    $default  reduce using rule 20 (return_type_decl)

    return_type_decl  go to state 178


State 155

   21 return_type_decl: ARROW return_type_opt •

    $default  reduce using rule 21 (return_type_decl)


State 156

   68 return_type_opt: type •

    $default  reduce using rule 68 (return_type_opt)


State 157

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 179


State 158

   11 id_decl: IDENTIFIER •  [OP_COLON_ASSIGN, COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   45 lvalue: IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   46       | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
  102 primary: IDENTIFIER •  [DOT, LEFT_PARENTHESIS]

    LEFT_BRACKET  shift, and go to state 180

    OP_COLON_ASSIGN   reduce using rule 11 (id_decl)
    COLON             reduce using rule 11 (id_decl)
    COMMA             reduce using rule 11 (id_decl)
    DOT               reduce using rule 102 (primary)
    LEFT_PARENTHESIS  reduce using rule 102 (primary)
    $default          reduce using rule 45 (lvalue)


State 159

   49 compound_stmt: KEYWORD_IF • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 181


State 160

   50 compound_stmt: KEYWORD_WHILE • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 182


State 161

   54 for_loop: KEYWORD_FOR • IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR • IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 183


State 162

   36 simple_stmt: KEYWORD_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 184


State 163

   37 simple_stmt: KEYWORD_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 185


State 164

   38 simple_stmt: SEMICOLON •

    $default  reduce using rule 38 (simple_stmt)


State 165

   14 id_decl: OP_HASH • IDENTIFIER
   15        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   47 lvalue: OP_HASH • IDENTIFIER
   48       | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  103 primary: OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 186


State 166

   28 local_decls: local_decls var_decl •

    $default  reduce using rule 28 (local_decls)


State 167

    9 id_list: id_decl •  [COLON, COMMA]
   52 compound_stmt: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 187

    $default  reduce using rule 9 (id_list)


State 168

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 188


State 169

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF, KEYWORD_ENDWHILE, KEYWORD_ENDFOR, KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   31      | stmt • stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 190
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 170

   32 stmt: simple_stmt •

    $default  reduce using rule 32 (stmt)


State 171

   34 simple_stmt: assignment_statement •

    $default  reduce using rule 34 (simple_stmt)


State 172

   39 assignment_statement: lvalue • OP_ASSIGN expr SEMICOLON
   40                     | lvalue • OP_PLUS_ASSIGN expr SEMICOLON
   41                     | lvalue • OP_MINUS_ASSIGN expr SEMICOLON
   42                     | lvalue • OP_MULT_ASSIGN expr SEMICOLON
   43                     | lvalue • OP_DIV_ASSIGN expr SEMICOLON
   44                     | lvalue • OP_MOD_ASSIGN expr SEMICOLON

    OP_ASSIGN        shift, and go to state 191
    OP_PLUS_ASSIGN   shift, and go to state 192
    OP_MINUS_ASSIGN  shift, and go to state 193
    OP_MULT_ASSIGN   shift, and go to state 194
    OP_DIV_ASSIGN    shift, and go to state 195
    OP_MOD_ASSIGN    shift, and go to state 196


State 173

   33 stmt: compound_stmt •

    $default  reduce using rule 33 (stmt)


State 174

   51 compound_stmt: for_loop •

    $default  reduce using rule 51 (compound_stmt)


State 175

   29 local_decls: local_decls const_decl •

    $default  reduce using rule 29 (local_decls)


State 176

   35 simple_stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 197


State 177

   74 function_call: primary • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | primary • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT               shift, and go to state 198
    LEFT_PARENTHESIS  shift, and go to state 199


State 178

   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 200


State 179

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   66 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 166
    id_list               go to state 16
    id_decl               go to state 167
    stmts                 go to state 201
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    const_decl            go to state 175
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 180

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   46 lvalue: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 202
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 181

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 203
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 182

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 204
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 183

   54 for_loop: KEYWORD_FOR IDENTIFIER • KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER • KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    KEYWORD_IN  shift, and go to state 205


State 184

   36 simple_stmt: KEYWORD_BREAK SEMICOLON •

    $default  reduce using rule 36 (simple_stmt)


State 185

   37 simple_stmt: KEYWORD_CONTINUE SEMICOLON •

    $default  reduce using rule 37 (simple_stmt)


State 186

   14 id_decl: OP_HASH IDENTIFIER •  [OP_COLON_ASSIGN, COLON, COMMA]
   15        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   47 lvalue: OP_HASH IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   48       | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
  103 primary: OP_HASH IDENTIFIER •  [DOT, LEFT_PARENTHESIS]

    LEFT_BRACKET  shift, and go to state 206

    OP_COLON_ASSIGN   reduce using rule 14 (id_decl)
    COLON             reduce using rule 14 (id_decl)
    COMMA             reduce using rule 14 (id_decl)
    DOT               reduce using rule 103 (primary)
    LEFT_PARENTHESIS  reduce using rule 103 (primary)
    $default          reduce using rule 47 (lvalue)


State 187

   52 compound_stmt: id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    LEFT_BRACKET  shift, and go to state 207


State 188

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 208


State 189

   52 compound_stmt: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 187


State 190

   31 stmts: stmt stmts •

    $default  reduce using rule 31 (stmts)


State 191

   39 assignment_statement: lvalue OP_ASSIGN • expr SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 209
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 192

   40 assignment_statement: lvalue OP_PLUS_ASSIGN • expr SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 210
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 193

   41 assignment_statement: lvalue OP_MINUS_ASSIGN • expr SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 211
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 194

   42 assignment_statement: lvalue OP_MULT_ASSIGN • expr SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 212
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 195

   43 assignment_statement: lvalue OP_DIV_ASSIGN • expr SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 213
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 196

   44 assignment_statement: lvalue OP_MOD_ASSIGN • expr SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 214
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 197

   35 simple_stmt: function_call SEMICOLON •

    $default  reduce using rule 35 (simple_stmt)


State 198

   75 function_call: primary DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER  shift, and go to state 215


State 199

   74 function_call: primary LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   76 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   77             | • arg_list
   78 arg_list: • expr
   79         | • arg_list COMMA expr
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 76 (arg_list_opt)

    arg_list_opt     go to state 216
    arg_list         go to state 123
    expr             go to state 124
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 200

   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl
   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 217


State 201

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   69 return_opt: ε •  [KEYWORD_ENDDEF]
   70           | • KEYWORD_RETURN SEMICOLON
   71           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 218

    $default  reduce using rule 69 (return_opt)

    return_opt  go to state 219


State 202

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   46 lvalue: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 220


State 203

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 221


State 204

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 222


State 205

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN • LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER KEYWORD_IN • LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    LEFT_BRACKET  shift, and go to state 223


State 206

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 94
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 224
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 207

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 225
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 208

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 2 (main_func)


State 209

   39 assignment_statement: lvalue OP_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 226


State 210

   40 assignment_statement: lvalue OP_PLUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 227


State 211

   41 assignment_statement: lvalue OP_MINUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 228


State 212

   42 assignment_statement: lvalue OP_MULT_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 229


State 213

   43 assignment_statement: lvalue OP_DIV_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 230


State 214

   44 assignment_statement: lvalue OP_MOD_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 231


State 215

   75 function_call: primary DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 232


State 216

   74 function_call: primary LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 233


State 217

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   66 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 166
    id_list               go to state 16
    id_decl               go to state 167
    stmts                 go to state 234
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    const_decl            go to state 175
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 218

   70 return_opt: KEYWORD_RETURN • SEMICOLON
   71           | KEYWORD_RETURN • expr SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    SEMICOLON         shift, and go to state 235
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 236
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 219

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 237


State 220

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN, COLON, COMMA]
   46 lvalue: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]

    OP_COLON_ASSIGN  reduce using rule 12 (id_decl)
    COLON            reduce using rule 12 (id_decl)
    COMMA            reduce using rule 12 (id_decl)
    $default         reduce using rule 46 (lvalue)


State 221

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    COLON  shift, and go to state 238


State 222

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDWHILE SEMICOLON

    COLON  shift, and go to state 239


State 223

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET • expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET • expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 240
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 224

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 241


State 225

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_FOR  shift, and go to state 242


State 226

   39 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON •

    $default  reduce using rule 39 (assignment_statement)


State 227

   40 assignment_statement: lvalue OP_PLUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 40 (assignment_statement)


State 228

   41 assignment_statement: lvalue OP_MINUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 41 (assignment_statement)


State 229

   42 assignment_statement: lvalue OP_MULT_ASSIGN expr SEMICOLON •

    $default  reduce using rule 42 (assignment_statement)


State 230

   43 assignment_statement: lvalue OP_DIV_ASSIGN expr SEMICOLON •

    $default  reduce using rule 43 (assignment_statement)


State 231

   44 assignment_statement: lvalue OP_MOD_ASSIGN expr SEMICOLON •

    $default  reduce using rule 44 (assignment_statement)


State 232

   75 function_call: primary DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   76 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   77             | • arg_list
   78 arg_list: • expr
   79         | • arg_list COMMA expr
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 76 (arg_list_opt)

    arg_list_opt     go to state 243
    arg_list         go to state 123
    expr             go to state 124
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 233

   74 function_call: primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 74 (function_call)


State 234

   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   69 return_opt: ε •  [KEYWORD_ENDDEF]
   70           | • KEYWORD_RETURN SEMICOLON
   71           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 218

    $default  reduce using rule 69 (return_opt)

    return_opt  go to state 244


State 235

   70 return_opt: KEYWORD_RETURN SEMICOLON •

    $default  reduce using rule 70 (return_opt)


State 236

   71 return_opt: KEYWORD_RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 245


State 237

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 246


State 238

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   49              | KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 247
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 239

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDWHILE]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   50              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 248
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 240

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr • COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr • COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 249


State 241

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN, COLON, COMMA]
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]

    OP_COLON_ASSIGN  reduce using rule 15 (id_decl)
    COLON            reduce using rule 15 (id_decl)
    COMMA            reduce using rule 15 (id_decl)
    $default         reduce using rule 48 (lvalue)


State 242

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 250


State 243

   75 function_call: primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 251


State 244

   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 252


State 245

   71 return_opt: KEYWORD_RETURN expr SEMICOLON •

    $default  reduce using rule 71 (return_opt)


State 246

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 19 (func_decl)


State 247

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • else_part KEYWORD_ENDIF SEMICOLON
   72 else_part: ε •  [KEYWORD_ENDIF]
   73          | • KEYWORD_ELSE COLON stmts

    KEYWORD_ELSE  shift, and go to state 253

    $default  reduce using rule 72 (else_part)

    else_part  go to state 254


State 248

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDWHILE SEMICOLON

    KEYWORD_ENDWHILE  shift, and go to state 255


State 249

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON • expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON • expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 256
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 250

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    COLON  shift, and go to state 257


State 251

   75 function_call: primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 75 (function_call)


State 252

   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 258


State 253

   73 else_part: KEYWORD_ELSE • COLON stmts

    COLON  shift, and go to state 259


State 254

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part • KEYWORD_ENDIF SEMICOLON

    KEYWORD_ENDIF  shift, and go to state 260


State 255

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 261


State 256

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr • RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr • COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON          shift, and go to state 262
    RIGHT_BRACKET  shift, and go to state 263


State 257

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • expr RIGHT_BRACKET COLON type SEMICOLON
   53              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER        shift, and go to state 264
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_SCALAR    shift, and go to state 57
    KEYWORD_STR       shift, and go to state 58
    KEYWORD_INTEGER   shift, and go to state 59
    KEYWORD_COMP      shift, and go to state 60
    KEYWORD_BOOL      shift, and go to state 61
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    LEFT_BRACKET      shift, and go to state 62
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 265
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54
    type             go to state 266


State 258

   63 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 63 (method_decl)


State 259

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDIF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   73 else_part: KEYWORD_ELSE COLON • stmts
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 267
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 260

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 268


State 261

   50 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 50 (compound_stmt)


State 262

   55 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON • expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 269
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 263

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 270


State 264

  102 primary: IDENTIFIER •  [DOT, LEFT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  121 type: IDENTIFIER •  [KEYWORD_IN]

    KEYWORD_IN  reduce using rule 121 (type)
    $default    reduce using rule 102 (primary)


State 265

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 271


State 266

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type • KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_IN  shift, and go to state 272


State 267

   73 else_part: KEYWORD_ELSE COLON stmts •

    $default  reduce using rule 73 (else_part)


State 268

   49 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON •

    $default  reduce using rule 49 (compound_stmt)


State 269

   55 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr • RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    RIGHT_BRACKET  shift, and go to state 273


State 270

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDFOR]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   54         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON • stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 274
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 271

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 275


State 272

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN • IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 276


State 273

   55 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 277


State 274

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts • KEYWORD_ENDFOR SEMICOLON

    KEYWORD_ENDFOR  shift, and go to state 278


State 275

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON • type SEMICOLON
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 279


State 276

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER • KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_OF  shift, and go to state 280


State 277

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDFOR]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   50              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   51              | • for_loop
   52              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   53              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   54 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   55         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON • stmts KEYWORD_ENDFOR SEMICOLON
   74 function_call: • primary LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75              | • primary DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 158
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 159
    KEYWORD_WHILE     shift, and go to state 160
    KEYWORD_FOR       shift, and go to state 161
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 162
    KEYWORD_CONTINUE  shift, and go to state 163
    SEMICOLON         shift, and go to state 164
    OP_HASH           shift, and go to state 165
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 189
    stmts                 go to state 281
    stmt                  go to state 169
    simple_stmt           go to state 170
    assignment_statement  go to state 171
    lvalue                go to state 172
    compound_stmt         go to state 173
    for_loop              go to state 174
    function_call         go to state 176
    primary               go to state 177
    literal               go to state 54


State 278

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 282


State 279

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 283


State 280

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF • expr RIGHT_BRACKET COLON type SEMICOLON
   80 expr: • logical_expr
   81 logical_expr: • relational_expr
   82             | • logical_expr OP_AND relational_expr
   83             | • logical_expr OP_OR relational_expr
   84 relational_expr: • arithmetic_expr
   85                | • relational_expr OP_LT arithmetic_expr
   86                | • relational_expr OP_LE arithmetic_expr
   87                | • relational_expr OP_GT arithmetic_expr
   88                | • relational_expr OP_GE arithmetic_expr
   89                | • relational_expr OP_EQ arithmetic_expr
   90                | • relational_expr OP_NEQ arithmetic_expr
   91 arithmetic_expr: • term
   92                | • arithmetic_expr OP_PLUS term
   93                | • arithmetic_expr OP_MINUS term
   94 term: • factor
   95     | • term OP_MULT factor
   96     | • term OP_DIV factor
   97     | • term OP_MOD factor
   98 factor: • postfix
   99       | • OP_MINUS factor
  100       | • OP_NOT factor
  101       | • factor OP_POWER postfix
  102 primary: • IDENTIFIER
  103        | • OP_HASH IDENTIFIER
  104        | • literal
  105        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  106 postfix: • primary
  107        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  108        | • postfix DOT IDENTIFIER
  109        | • postfix DOT OP_HASH IDENTIFIER
  110        | • postfix LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  111 literal: • CONST_INT
  112        | • CONST_REAL
  113        | • CONST_STRING
  114        | • BOOL_TRUE
  115        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 284
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 281

   55 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts • KEYWORD_ENDFOR SEMICOLON

    KEYWORD_ENDFOR  shift, and go to state 285


State 282

   54 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 54 (for_loop)


State 283

   52 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 52 (compound_stmt)


State 284

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 286


State 285

   55 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 287


State 286

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 288


State 287

   55 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 55 (for_loop)


State 288

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON • type SEMICOLON
  116 type: • KEYWORD_INTEGER
  117     | • KEYWORD_SCALAR
  118     | • KEYWORD_STR
  119     | • KEYWORD_BOOL
  120     | • KEYWORD_COMP
  121     | • IDENTIFIER
  122     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  123     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 289


State 289

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 290


State 290

   53 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 53 (compound_stmt)
