State 73 conflicts: 2 shift/reduce
State 167 conflicts: 2 shift/reduce
State 200 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: comp_decls const_decls var_decls func_decls main_func

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    3 comp_decls: ε
    4           | comp_decls comp_decl

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    6 var_decls: ε
    7          | var_decls var_decl

    8 var_decl: id_list COLON type SEMICOLON

    9 id_list: id_decl
   10        | id_list COMMA id_decl

   11 id_decl: IDENTIFIER
   12        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | OP_HASH IDENTIFIER
   15        | OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   17 func_decls: ε
   18           | func_decls func_decl

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   20 return_type_decl: ε
   21                 | ARROW type

   22 param: id_decl COLON type

   23 param_list_opt: ε
   24               | param_list

   25 param_list: param
   26           | param_list COMMA param

   27 local_decls: ε
   28            | local_decls var_decl
   29            | local_decls const_decl

   30 stmts: ε
   31      | stmt stmts

   32 stmt: simple_stmt
   33     | compound_stmt

   34 simple_stmt: assignment_statement
   35            | function_call SEMICOLON
   36            | KEYWORD_BREAK SEMICOLON
   37            | KEYWORD_CONTINUE SEMICOLON
   38            | SEMICOLON

   39 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON
   40                     | lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | lvalue OP_MOD_ASSIGN expr SEMICOLON

   45 lvalue: IDENTIFIER
   46       | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | OP_HASH IDENTIFIER
   48       | OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | for_loop
   55              | list_comp
   56              | list_comp_array

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

   61 member_decls: ε
   62             | member_decl_list

   63 member_decl_list: member_decl
   64                 | member_decl_list member_decl

   65 member_decl: id_list COLON type SEMICOLON

   66 method_decls: ε
   67             | method_decls method_decl

   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   69 const_decls: ε
   70            | const_decls const_decl

   71 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

   72 return_opt: ε
   73           | KEYWORD_RETURN SEMICOLON
   74           | KEYWORD_RETURN expr SEMICOLON

   75 else_part: ε
   76          | KEYWORD_ELSE COLON stmts

   77 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

   80 arg_list_opt: ε
   81             | arg_list

   82 arg_list: expr
   83         | arg_list COMMA expr

   84 expr: logical_expr

   85 logical_expr: relational_expr
   86             | logical_expr OP_AND relational_expr
   87             | logical_expr OP_OR relational_expr

   88 relational_expr: arithmetic_expr
   89                | relational_expr OP_LT arithmetic_expr
   90                | relational_expr OP_LE arithmetic_expr
   91                | relational_expr OP_GT arithmetic_expr
   92                | relational_expr OP_GE arithmetic_expr
   93                | relational_expr OP_EQ arithmetic_expr
   94                | relational_expr OP_NEQ arithmetic_expr

   95 arithmetic_expr: term
   96                | arithmetic_expr OP_PLUS term
   97                | arithmetic_expr OP_MINUS term

   98 term: factor
   99     | term OP_MULT factor
  100     | term OP_DIV factor
  101     | term OP_MOD factor

  102 factor: postfix
  103       | OP_MINUS factor
  104       | OP_NOT factor
  105       | factor OP_POWER postfix

  106 primary: IDENTIFIER
  107        | OP_HASH IDENTIFIER
  108        | OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | literal
  110        | LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

  111 postfix: primary
  112        | postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | postfix DOT IDENTIFIER
  114        | postfix DOT OP_HASH IDENTIFIER
  115        | postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH IDENTIFIER DOT IDENTIFIER

  119 literal: CONST_INT
  120        | CONST_REAL
  121        | CONST_STRING
  122        | BOOL_TRUE
  123        | BOOL_FALSE

  124 type: KEYWORD_INTEGER
  125     | KEYWORD_SCALAR
  126     | KEYWORD_STR
  127     | KEYWORD_BOOL
  128     | KEYWORD_COMP
  129     | IDENTIFIER
  130     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | LEFT_BRACKET RIGHT_BRACKET COLON type


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <stringVal> (258) 5 11 12 13 14 15 16 19 45 46 47 48 49 50 51 57 58 59 60 68 71 77 78 79 106 107 108 113 114 115 116 117 118 129
    CONST_STRING <stringVal> (259) 121
    CONST_INT <integerVal> (260) 119 130
    CONST_REAL <floatVal> (261) 120
    KEYWORD_SCALAR (262) 125
    KEYWORD_STR <stringVal> (263) 126
    OP_COLON_ASSIGN <stringVal> (264) 59 60
    KEYWORD_INTEGER <integerVal> (265) 124
    KEYWORD_IF (266) 52
    KEYWORD_ELSE (267) 76
    KEYWORD_ENDIF (268) 52
    KEYWORD_WHILE (269) 53
    KEYWORD_ENDWHILE (270) 53
    KEYWORD_FOR (271) 57 58 59 60
    KEYWORD_IN (272) 57 58 60
    KEYWORD_ENDFOR (273) 57 58
    KEYWORD_DEF (274) 2 19 68
    KEYWORD_ENDDEF (275) 2 19 68
    KEYWORD_MAIN (276) 2
    KEYWORD_RETURN (277) 73 74
    KEYWORD_CONST (278) 71
    KEYWORD_COMP (279) 5 128
    KEYWORD_ENDCOMP (280) 5
    KEYWORD_OF (281) 60
    KEYWORD_BOOL (282) 127
    BOOL_TRUE (283) 122
    BOOL_FALSE (284) 123
    KEYWORD_BREAK (285) 36
    KEYWORD_CONTINUE (286) 37
    SEMICOLON (287) 2 5 8 19 35 36 37 38 39 40 41 42 43 44 52 53 57 58 59 60 65 68 71 73 74
    COLON (288) 2 5 8 19 22 52 53 57 58 59 60 65 68 71 76 130 131
    COMMA (289) 10 26 83
    ARROW (290) 21
    OP_HASH (291) 14 15 16 47 48 49 50 51 79 107 108 114 117 118
    DOT (292) 49 50 51 78 79 113 114 115 117 118
    LEFT_PARENTHESIS (293) 2 19 52 53 68 77 78 79 110 115 116 117
    RIGHT_PARENTHESIS (294) 2 19 52 53 68 77 78 79 110 115 116 117
    LEFT_BRACKET (295) 12 13 15 16 46 48 57 58 59 60 108 112 130 131
    RIGHT_BRACKET (296) 12 13 15 16 46 48 57 58 59 60 108 112 130 131
    OP_POWER (297) 105
    UMINUS (298)
    OP_MULT (299) 99
    OP_DIV (300) 100
    OP_MOD (301) 101
    OP_PLUS (302) 96
    OP_MINUS (303) 97 103
    OP_LT (304) 89
    OP_LE (305) 90
    OP_GT (306) 91
    OP_GE (307) 92
    OP_EQ (308) 93
    OP_NEQ (309) 94
    OP_NOT (310) 104
    OP_AND (311) 86
    OP_OR (312) 87
    OP_ASSIGN (313) 39 71
    OP_PLUS_ASSIGN (314) 40
    OP_MINUS_ASSIGN (315) 41
    OP_MULT_ASSIGN (316) 42
    OP_DIV_ASSIGN (317) 43
    OP_MOD_ASSIGN (318) 44


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    program (65)
        on left: 1
        on right: 0
    main_func <stringVal> (66)
        on left: 2
        on right: 1
    comp_decls (67)
        on left: 3 4
        on right: 1 4
    comp_decl (68)
        on left: 5
        on right: 4
    var_decls <stringVal> (69)
        on left: 6 7
        on right: 1 7
    var_decl <stringVal> (70)
        on left: 8
        on right: 7 28
    id_list <stringVal> (71)
        on left: 9 10
        on right: 8 10 65
    id_decl <stringVal> (72)
        on left: 11 12 13 14 15 16
        on right: 9 10 22 59 60
    func_decls <stringVal> (73)
        on left: 17 18
        on right: 1 18
    func_decl <stringVal> (74)
        on left: 19
        on right: 18
    return_type_decl <stringVal> (75)
        on left: 20 21
        on right: 19 68
    param <stringVal> (76)
        on left: 22
        on right: 25 26
    param_list_opt <stringVal> (77)
        on left: 23 24
        on right: 19 68
    param_list <stringVal> (78)
        on left: 25 26
        on right: 24 26
    local_decls <stringVal> (79)
        on left: 27 28 29
        on right: 2 19 28 29 68
    stmts <stringVal> (80)
        on left: 30 31
        on right: 2 19 31 52 53 57 58 68 76
    stmt <stringVal> (81)
        on left: 32 33
        on right: 31
    simple_stmt <stringVal> (82)
        on left: 34 35 36 37 38
        on right: 32
    assignment_statement <stringVal> (83)
        on left: 39 40 41 42 43 44
        on right: 34
    lvalue <stringVal> (84)
        on left: 45 46 47 48 49 50 51
        on right: 39 40 41 42 43 44
    compound_stmt <stringVal> (85)
        on left: 52 53 54 55 56
        on right: 33
    for_loop <stringVal> (86)
        on left: 57 58
        on right: 54
    list_comp <stringVal> (87)
        on left: 59
        on right: 55
    list_comp_array <stringVal> (88)
        on left: 60
        on right: 56
    member_decls <stringVal> (89)
        on left: 61 62
        on right: 5
    member_decl_list <stringVal> (90)
        on left: 63 64
        on right: 62 64
    member_decl <stringVal> (91)
        on left: 65
        on right: 63 64
    method_decls <stringVal> (92)
        on left: 66 67
        on right: 5 67
    method_decl <stringVal> (93)
        on left: 68
        on right: 67
    const_decls <stringVal> (94)
        on left: 69 70
        on right: 1 70
    const_decl <stringVal> (95)
        on left: 71
        on right: 29 70
    return_opt <stringVal> (96)
        on left: 72 73 74
        on right: 2 19 68
    else_part <stringVal> (97)
        on left: 75 76
        on right: 52
    function_call <stringVal> (98)
        on left: 77 78 79
        on right: 35
    arg_list_opt <stringVal> (99)
        on left: 80 81
        on right: 77 78 79 115 116 117
    arg_list <stringVal> (100)
        on left: 82 83
        on right: 81 83
    expr <stringVal> (101)
        on left: 84
        on right: 12 15 39 40 41 42 43 44 46 48 52 53 57 58 59 60 74 82 83 108 110 112
    logical_expr <stringVal> (102)
        on left: 85 86 87
        on right: 84 86 87
    relational_expr <stringVal> (103)
        on left: 88 89 90 91 92 93 94
        on right: 85 86 87 89 90 91 92 93 94
    arithmetic_expr <stringVal> (104)
        on left: 95 96 97
        on right: 88 89 90 91 92 93 94 96 97
    term <stringVal> (105)
        on left: 98 99 100 101
        on right: 95 96 97 99 100 101
    factor <stringVal> (106)
        on left: 102 103 104 105
        on right: 98 99 100 101 103 104 105
    primary <stringVal> (107)
        on left: 106 107 108 109 110
        on right: 111
    postfix <stringVal> (108)
        on left: 111 112 113 114 115 116 117 118
        on right: 78 102 105 112 113 114 115
    literal <stringVal> (109)
        on left: 119 120 121 122 123
        on right: 71 109
    type <stringVal> (110)
        on left: 124 125 126 127 128 129 130 131
        on right: 8 21 22 59 60 65 71 130 131


State 0

    0 $accept: • program $end
    1 program: • comp_decls const_decls var_decls func_decls main_func
    3 comp_decls: ε •
    4           | • comp_decls comp_decl

    $default  reduce using rule 3 (comp_decls)

    program     go to state 1
    comp_decls  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: comp_decls • const_decls var_decls func_decls main_func
    4 comp_decls: comp_decls • comp_decl
    5 comp_decl: • KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
   69 const_decls: ε •  [IDENTIFIER, KEYWORD_DEF, KEYWORD_CONST, OP_HASH]
   70            | • const_decls const_decl

    KEYWORD_COMP  shift, and go to state 4

    $default  reduce using rule 69 (const_decls)

    comp_decl    go to state 5
    const_decls  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    5 comp_decl: KEYWORD_COMP • IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    4 comp_decls: comp_decls comp_decl •

    $default  reduce using rule 4 (comp_decls)


State 6

    1 program: comp_decls const_decls • var_decls func_decls main_func
    6 var_decls: ε •  [IDENTIFIER, KEYWORD_DEF, OP_HASH]
    7          | • var_decls var_decl
   70 const_decls: const_decls • const_decl
   71 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    KEYWORD_CONST  shift, and go to state 8

    $default  reduce using rule 6 (var_decls)

    var_decls   go to state 9
    const_decl  go to state 10


State 7

    5 comp_decl: KEYWORD_COMP IDENTIFIER • COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    COLON  shift, and go to state 11


State 8

   71 const_decl: KEYWORD_CONST • IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 12


State 9

    1 program: comp_decls const_decls var_decls • func_decls main_func
    7 var_decls: var_decls • var_decl
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   17 func_decls: ε •  [KEYWORD_DEF]
   18           | • func_decls func_decl

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 17 (func_decls)

    var_decl    go to state 15
    id_list     go to state 16
    id_decl     go to state 17
    func_decls  go to state 18


State 10

   70 const_decls: const_decls const_decl •

    $default  reduce using rule 70 (const_decls)


State 11

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON • member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   61 member_decls: ε •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   62             | • member_decl_list
   63 member_decl_list: • member_decl
   64                 | • member_decl_list member_decl
   65 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 61 (member_decls)

    id_list           go to state 19
    id_decl           go to state 17
    member_decls      go to state 20
    member_decl_list  go to state 21
    member_decl       go to state 22


State 12

   71 const_decl: KEYWORD_CONST IDENTIFIER • OP_ASSIGN literal COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 23


State 13

   11 id_decl: IDENTIFIER •  [COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 24

    $default  reduce using rule 11 (id_decl)


State 14

   14 id_decl: OP_HASH • IDENTIFIER
   15        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 25


State 15

    7 var_decls: var_decls var_decl •

    $default  reduce using rule 7 (var_decls)


State 16

    8 var_decl: id_list • COLON type SEMICOLON
   10 id_list: id_list • COMMA id_decl

    COLON  shift, and go to state 26
    COMMA  shift, and go to state 27


State 17

    9 id_list: id_decl •

    $default  reduce using rule 9 (id_list)


State 18

    1 program: comp_decls const_decls var_decls func_decls • main_func
    2 main_func: • KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   18 func_decls: func_decls • func_decl
   19 func_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF  shift, and go to state 28

    main_func  go to state 29
    func_decl  go to state 30


State 19

   10 id_list: id_list • COMMA id_decl
   65 member_decl: id_list • COLON type SEMICOLON

    COLON  shift, and go to state 31
    COMMA  shift, and go to state 27


State 20

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls • method_decls KEYWORD_ENDCOMP SEMICOLON
   66 method_decls: ε •
   67             | • method_decls method_decl

    $default  reduce using rule 66 (method_decls)

    method_decls  go to state 32


State 21

    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   62 member_decls: member_decl_list •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   64 member_decl_list: member_decl_list • member_decl
   65 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 62 (member_decls)

    id_list      go to state 19
    id_decl      go to state 17
    member_decl  go to state 33


State 22

   63 member_decl_list: member_decl •

    $default  reduce using rule 63 (member_decl_list)


State 23

   71 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN • literal COLON type SEMICOLON
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    CONST_STRING  shift, and go to state 34
    CONST_INT     shift, and go to state 35
    CONST_REAL    shift, and go to state 36
    BOOL_TRUE     shift, and go to state 37
    BOOL_FALSE    shift, and go to state 38

    literal  go to state 39


State 24

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 46
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 25

   14 id_decl: OP_HASH IDENTIFIER •  [COLON, COMMA]
   15        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 55

    $default  reduce using rule 14 (id_decl)


State 26

    8 var_decl: id_list COLON • type SEMICOLON
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 63


State 27

   10 id_list: id_list COMMA • id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    id_decl  go to state 64


State 28

    2 main_func: KEYWORD_DEF • KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   19 func_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER    shift, and go to state 65
    KEYWORD_MAIN  shift, and go to state 66


State 29

    1 program: comp_decls const_decls var_decls func_decls main_func •

    $default  reduce using rule 1 (program)


State 30

   18 func_decls: func_decls func_decl •

    $default  reduce using rule 18 (func_decls)


State 31

   65 member_decl: id_list COLON • type SEMICOLON
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 67


State 32

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls • KEYWORD_ENDCOMP SEMICOLON
   67 method_decls: method_decls • method_decl
   68 method_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF      shift, and go to state 68
    KEYWORD_ENDCOMP  shift, and go to state 69

    method_decl  go to state 70


State 33

   64 member_decl_list: member_decl_list member_decl •

    $default  reduce using rule 64 (member_decl_list)


State 34

  121 literal: CONST_STRING •

    $default  reduce using rule 121 (literal)


State 35

  119 literal: CONST_INT •

    $default  reduce using rule 119 (literal)


State 36

  120 literal: CONST_REAL •

    $default  reduce using rule 120 (literal)


State 37

  122 literal: BOOL_TRUE •

    $default  reduce using rule 122 (literal)


State 38

  123 literal: BOOL_FALSE •

    $default  reduce using rule 123 (literal)


State 39

   71 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal • COLON type SEMICOLON

    COLON  shift, and go to state 71


State 40

  106 primary: IDENTIFIER •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, DOT, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  116 postfix: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 72

    $default  reduce using rule 106 (primary)


State 41

  107 primary: OP_HASH • IDENTIFIER
  108        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  117 postfix: OP_HASH • IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH • IDENTIFIER DOT IDENTIFIER

    IDENTIFIER  shift, and go to state 73


State 42

   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  110        | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 74
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 43

   13 id_decl: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 13 (id_decl)


State 44

  102 factor: • postfix
  103       | • OP_MINUS factor
  103       | OP_MINUS • factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 75
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 45

  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  104       | OP_NOT • factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 76
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 46

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 77


State 47

   84 expr: logical_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   86 logical_expr: logical_expr • OP_AND relational_expr
   87             | logical_expr • OP_OR relational_expr

    OP_AND  shift, and go to state 78
    OP_OR   shift, and go to state 79

    $default  reduce using rule 84 (expr)


State 48

   85 logical_expr: relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   89 relational_expr: relational_expr • OP_LT arithmetic_expr
   90                | relational_expr • OP_LE arithmetic_expr
   91                | relational_expr • OP_GT arithmetic_expr
   92                | relational_expr • OP_GE arithmetic_expr
   93                | relational_expr • OP_EQ arithmetic_expr
   94                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 80
    OP_LE   shift, and go to state 81
    OP_GT   shift, and go to state 82
    OP_GE   shift, and go to state 83
    OP_EQ   shift, and go to state 84
    OP_NEQ  shift, and go to state 85

    $default  reduce using rule 85 (logical_expr)


State 49

   88 relational_expr: arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   96 arithmetic_expr: arithmetic_expr • OP_PLUS term
   97                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 88 (relational_expr)


State 50

   95 arithmetic_expr: term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   99 term: term • OP_MULT factor
  100     | term • OP_DIV factor
  101     | term • OP_MOD factor

    OP_MULT  shift, and go to state 88
    OP_DIV   shift, and go to state 89
    OP_MOD   shift, and go to state 90

    $default  reduce using rule 95 (arithmetic_expr)


State 51

   98 term: factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  105 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 98 (term)


State 52

  111 postfix: primary •

    $default  reduce using rule 111 (postfix)


State 53

  102 factor: postfix •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  112 postfix: postfix • LEFT_BRACKET expr RIGHT_BRACKET
  113        | postfix • DOT IDENTIFIER
  114        | postfix • DOT OP_HASH IDENTIFIER
  115        | postfix • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT           shift, and go to state 92
    LEFT_BRACKET  shift, and go to state 93

    $default  reduce using rule 102 (factor)


State 54

  109 primary: literal •

    $default  reduce using rule 109 (primary)


State 55

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 94
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 95
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 56

  129 type: IDENTIFIER •

    $default  reduce using rule 129 (type)


State 57

  125 type: KEYWORD_SCALAR •

    $default  reduce using rule 125 (type)


State 58

  126 type: KEYWORD_STR •

    $default  reduce using rule 126 (type)


State 59

  124 type: KEYWORD_INTEGER •

    $default  reduce using rule 124 (type)


State 60

  128 type: KEYWORD_COMP •

    $default  reduce using rule 128 (type)


State 61

  127 type: KEYWORD_BOOL •

    $default  reduce using rule 127 (type)


State 62

  130 type: LEFT_BRACKET • CONST_INT RIGHT_BRACKET COLON type
  131     | LEFT_BRACKET • RIGHT_BRACKET COLON type

    CONST_INT      shift, and go to state 96
    RIGHT_BRACKET  shift, and go to state 97


State 63

    8 var_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 98


State 64

   10 id_list: id_list COMMA id_decl •

    $default  reduce using rule 10 (id_list)


State 65

   19 func_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 99


State 66

    2 main_func: KEYWORD_DEF KEYWORD_MAIN • LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 100


State 67

   65 member_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 101


State 68

   68 method_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 102


State 69

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 103


State 70

   67 method_decls: method_decls method_decl •

    $default  reduce using rule 67 (method_decls)


State 71

   71 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON • type SEMICOLON
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 104


State 72

   80 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   81             | • arg_list
   82 arg_list: • expr
   83         | • arg_list COMMA expr
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 80 (arg_list_opt)

    arg_list_opt     go to state 105
    arg_list         go to state 106
    expr             go to state 107
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 73

  107 primary: OP_HASH IDENTIFIER •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, DOT, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  108        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
  117 postfix: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH IDENTIFIER • DOT IDENTIFIER

    DOT           shift, and go to state 108
    LEFT_BRACKET  shift, and go to state 109

    DOT           [reduce using rule 107 (primary)]
    LEFT_BRACKET  [reduce using rule 107 (primary)]
    $default      reduce using rule 107 (primary)

    shift/reduce conflict on token LEFT_BRACKET:
      107 primary: OP_HASH IDENTIFIER •
      108 primary: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Example: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Shift derivation
        postfix
        ↳ 111: primary
               ↳ 108: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Reduce derivation
        postfix
        ↳ 112: postfix                            LEFT_BRACKET expr RIGHT_BRACKET
               ↳ 111: primary
                      ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token DOT:
      107 primary: OP_HASH IDENTIFIER •
      117 postfix: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
      Example: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
      Shift derivation
        postfix
        ↳ 117: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                    ↳ 117: ε
      Reduce derivation
        postfix
        ↳ 115: postfix                            DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
               ↳ 111: primary                                                     ↳ 115: ε
                      ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token DOT:
      107 primary: OP_HASH IDENTIFIER •
      118 postfix: OP_HASH IDENTIFIER • DOT IDENTIFIER
      Example: OP_HASH IDENTIFIER • DOT IDENTIFIER
      Shift derivation
        postfix
        ↳ 118: OP_HASH IDENTIFIER • DOT IDENTIFIER
      Reduce derivation
        postfix
        ↳ 113: postfix                            DOT IDENTIFIER
               ↳ 111: primary
                      ↳ 107: OP_HASH IDENTIFIER •



State 74

  110 primary: LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 110


State 75

  103 factor: OP_MINUS factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  105       | factor • OP_POWER postfix

    $default  reduce using rule 103 (factor)

    Conflict between rule 103 and token OP_POWER resolved as reduce (OP_POWER < UMINUS).


State 76

  104 factor: OP_NOT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  105       | factor • OP_POWER postfix

    $default  reduce using rule 104 (factor)

    Conflict between rule 104 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT).


State 77

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 12 (id_decl)


State 78

   86 logical_expr: logical_expr OP_AND • relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    relational_expr  go to state 111
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 79

   87 logical_expr: logical_expr OP_OR • relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    relational_expr  go to state 112
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 80

   89 relational_expr: relational_expr OP_LT • arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 113
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 81

   90 relational_expr: relational_expr OP_LE • arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 114
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 82

   91 relational_expr: relational_expr OP_GT • arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 115
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 83

   92 relational_expr: relational_expr OP_GE • arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 116
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 84

   93 relational_expr: relational_expr OP_EQ • arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 117
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 85

   94 relational_expr: relational_expr OP_NEQ • arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    arithmetic_expr  go to state 118
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 86

   96 arithmetic_expr: arithmetic_expr OP_PLUS • term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    term     go to state 119
    factor   go to state 51
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 87

   97 arithmetic_expr: arithmetic_expr OP_MINUS • term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    term     go to state 120
    factor   go to state 51
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 88

   99 term: term OP_MULT • factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 121
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 89

  100 term: term OP_DIV • factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 122
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 90

  101 term: term OP_MOD • factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    factor   go to state 123
    primary  go to state 52
    postfix  go to state 53
    literal  go to state 54


State 91

  105 factor: factor OP_POWER • postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42

    primary  go to state 52
    postfix  go to state 124
    literal  go to state 54


State 92

  113 postfix: postfix DOT • IDENTIFIER
  114        | postfix DOT • OP_HASH IDENTIFIER
  115        | postfix DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER  shift, and go to state 125
    OP_HASH     shift, and go to state 126


State 93

   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  112        | postfix LEFT_BRACKET • expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 127
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 94

   16 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 16 (id_decl)


State 95

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 128


State 96

  130 type: LEFT_BRACKET CONST_INT • RIGHT_BRACKET COLON type

    RIGHT_BRACKET  shift, and go to state 129


State 97

  131 type: LEFT_BRACKET RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 130


State 98

    8 var_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 8 (var_decl)


State 99

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   22 param: • id_decl COLON type
   23 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   24               | • param_list
   25 param_list: • param
   26           | • param_list COMMA param

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 23 (param_list_opt)

    id_decl         go to state 131
    param           go to state 132
    param_list_opt  go to state 133
    param_list      go to state 134


State 100

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS • RIGHT_PARENTHESIS COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 135


State 101

   65 member_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 65 (member_decl)


State 102

   68 method_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 136


State 103

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON •

    $default  reduce using rule 5 (comp_decl)


State 104

   71 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 137


State 105

  116 postfix: IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 138


State 106

   81 arg_list_opt: arg_list •  [RIGHT_PARENTHESIS]
   83 arg_list: arg_list • COMMA expr

    COMMA  shift, and go to state 139

    $default  reduce using rule 81 (arg_list_opt)


State 107

   82 arg_list: expr •

    $default  reduce using rule 82 (arg_list)


State 108

  117 postfix: OP_HASH IDENTIFIER DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH IDENTIFIER DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 140


State 109

   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  108        | OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 141
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 110

  110 primary: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •

    $default  reduce using rule 110 (primary)


State 111

   86 logical_expr: logical_expr OP_AND relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   89 relational_expr: relational_expr • OP_LT arithmetic_expr
   90                | relational_expr • OP_LE arithmetic_expr
   91                | relational_expr • OP_GT arithmetic_expr
   92                | relational_expr • OP_GE arithmetic_expr
   93                | relational_expr • OP_EQ arithmetic_expr
   94                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 80
    OP_LE   shift, and go to state 81
    OP_GT   shift, and go to state 82
    OP_GE   shift, and go to state 83
    OP_EQ   shift, and go to state 84
    OP_NEQ  shift, and go to state 85

    $default  reduce using rule 86 (logical_expr)


State 112

   87 logical_expr: logical_expr OP_OR relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   89 relational_expr: relational_expr • OP_LT arithmetic_expr
   90                | relational_expr • OP_LE arithmetic_expr
   91                | relational_expr • OP_GT arithmetic_expr
   92                | relational_expr • OP_GE arithmetic_expr
   93                | relational_expr • OP_EQ arithmetic_expr
   94                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 80
    OP_LE   shift, and go to state 81
    OP_GT   shift, and go to state 82
    OP_GE   shift, and go to state 83
    OP_EQ   shift, and go to state 84
    OP_NEQ  shift, and go to state 85

    $default  reduce using rule 87 (logical_expr)


State 113

   89 relational_expr: relational_expr OP_LT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   96 arithmetic_expr: arithmetic_expr • OP_PLUS term
   97                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 89 (relational_expr)


State 114

   90 relational_expr: relational_expr OP_LE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   96 arithmetic_expr: arithmetic_expr • OP_PLUS term
   97                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 90 (relational_expr)


State 115

   91 relational_expr: relational_expr OP_GT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   96 arithmetic_expr: arithmetic_expr • OP_PLUS term
   97                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 91 (relational_expr)


State 116

   92 relational_expr: relational_expr OP_GE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   96 arithmetic_expr: arithmetic_expr • OP_PLUS term
   97                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 92 (relational_expr)


State 117

   93 relational_expr: relational_expr OP_EQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   96 arithmetic_expr: arithmetic_expr • OP_PLUS term
   97                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 93 (relational_expr)


State 118

   94 relational_expr: relational_expr OP_NEQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   96 arithmetic_expr: arithmetic_expr • OP_PLUS term
   97                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 86
    OP_MINUS  shift, and go to state 87

    $default  reduce using rule 94 (relational_expr)


State 119

   96 arithmetic_expr: arithmetic_expr OP_PLUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   99 term: term • OP_MULT factor
  100     | term • OP_DIV factor
  101     | term • OP_MOD factor

    OP_MULT  shift, and go to state 88
    OP_DIV   shift, and go to state 89
    OP_MOD   shift, and go to state 90

    $default  reduce using rule 96 (arithmetic_expr)


State 120

   97 arithmetic_expr: arithmetic_expr OP_MINUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   99 term: term • OP_MULT factor
  100     | term • OP_DIV factor
  101     | term • OP_MOD factor

    OP_MULT  shift, and go to state 88
    OP_DIV   shift, and go to state 89
    OP_MOD   shift, and go to state 90

    $default  reduce using rule 97 (arithmetic_expr)


State 121

   99 term: term OP_MULT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  105 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 99 (term)


State 122

  100 term: term OP_DIV factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  105 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 100 (term)


State 123

  101 term: term OP_MOD factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  105 factor: factor • OP_POWER postfix

    OP_POWER  shift, and go to state 91

    $default  reduce using rule 101 (term)


State 124

  105 factor: factor OP_POWER postfix •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  112 postfix: postfix • LEFT_BRACKET expr RIGHT_BRACKET
  113        | postfix • DOT IDENTIFIER
  114        | postfix • DOT OP_HASH IDENTIFIER
  115        | postfix • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT           shift, and go to state 92
    LEFT_BRACKET  shift, and go to state 93

    $default  reduce using rule 105 (factor)


State 125

  113 postfix: postfix DOT IDENTIFIER •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, DOT, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  115        | postfix DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 142

    $default  reduce using rule 113 (postfix)


State 126

  114 postfix: postfix DOT OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 143


State 127

  112 postfix: postfix LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 144


State 128

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 15 (id_decl)


State 129

  130 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 145


State 130

  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type
  131     | LEFT_BRACKET RIGHT_BRACKET COLON • type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 146


State 131

   22 param: id_decl • COLON type

    COLON  shift, and go to state 147


State 132

   25 param_list: param •

    $default  reduce using rule 25 (param_list)


State 133

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 148


State 134

   24 param_list_opt: param_list •  [RIGHT_PARENTHESIS]
   26 param_list: param_list • COMMA param

    COMMA  shift, and go to state 149

    $default  reduce using rule 24 (param_list_opt)


State 135

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 150


State 136

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   22 param: • id_decl COLON type
   23 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   24               | • param_list
   25 param_list: • param
   26           | • param_list COMMA param
   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    $default  reduce using rule 23 (param_list_opt)

    id_decl         go to state 131
    param           go to state 132
    param_list_opt  go to state 151
    param_list      go to state 134


State 137

   71 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON •

    $default  reduce using rule 71 (const_decl)


State 138

  116 postfix: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 116 (postfix)


State 139

   83 arg_list: arg_list COMMA • expr
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 152
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 140

  117 postfix: OP_HASH IDENTIFIER DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH IDENTIFIER DOT IDENTIFIER •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, DOT, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]

    LEFT_PARENTHESIS  shift, and go to state 153

    $default  reduce using rule 118 (postfix)


State 141

  108 primary: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 154


State 142

   80 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   81             | • arg_list
   82 arg_list: • expr
   83         | • arg_list COMMA expr
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  115        | postfix DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 80 (arg_list_opt)

    arg_list_opt     go to state 155
    arg_list         go to state 106
    expr             go to state 107
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 143

  114 postfix: postfix DOT OP_HASH IDENTIFIER •

    $default  reduce using rule 114 (postfix)


State 144

  112 postfix: postfix LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 112 (postfix)


State 145

  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  130     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON • type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 156


State 146

  131 type: LEFT_BRACKET RIGHT_BRACKET COLON type •

    $default  reduce using rule 131 (type)


State 147

   22 param: id_decl COLON • type
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 157


State 148

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   20 return_type_decl: ε •  [COLON]
   21                 | • ARROW type

    ARROW  shift, and go to state 158

    $default  reduce using rule 20 (return_type_decl)

    return_type_decl  go to state 159


State 149

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   22 param: • id_decl COLON type
   26 param_list: param_list COMMA • param

    IDENTIFIER  shift, and go to state 13
    OP_HASH     shift, and go to state 14

    id_decl  go to state 131
    param    go to state 160


State 150

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 161


State 151

   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 162


State 152

   83 arg_list: arg_list COMMA expr •

    $default  reduce using rule 83 (arg_list)


State 153

   80 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   81             | • arg_list
   82 arg_list: • expr
   83         | • arg_list COMMA expr
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 80 (arg_list_opt)

    arg_list_opt     go to state 163
    arg_list         go to state 106
    expr             go to state 107
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 154

  108 primary: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 108 (primary)


State 155

  115 postfix: postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 164


State 156

  130 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type •

    $default  reduce using rule 130 (type)


State 157

   22 param: id_decl COLON type •

    $default  reduce using rule 22 (param)


State 158

   21 return_type_decl: ARROW • type
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 165


State 159

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 166


State 160

   26 param_list: param_list COMMA param •

    $default  reduce using rule 26 (param_list)


State 161

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   71 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 175
    id_list               go to state 16
    id_decl               go to state 176
    stmts                 go to state 177
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    const_decl            go to state 186
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 162

   20 return_type_decl: ε •  [COLON]
   21                 | • ARROW type
   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    ARROW  shift, and go to state 158

    $default  reduce using rule 20 (return_type_decl)

    return_type_decl  go to state 189


State 163

  117 postfix: OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 190


State 164

  115 postfix: postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 115 (postfix)


State 165

   21 return_type_decl: ARROW type •

    $default  reduce using rule 21 (return_type_decl)


State 166

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 191


State 167

   11 id_decl: IDENTIFIER •  [OP_COLON_ASSIGN, COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   45 lvalue: IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   46       | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   49       | IDENTIFIER • DOT OP_HASH IDENTIFIER
   77 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: IDENTIFIER •  [DOT, LEFT_BRACKET]
  116 postfix: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT               shift, and go to state 192
    LEFT_PARENTHESIS  shift, and go to state 193
    LEFT_BRACKET      shift, and go to state 194

    OP_COLON_ASSIGN  reduce using rule 11 (id_decl)
    COLON            reduce using rule 11 (id_decl)
    COMMA            reduce using rule 11 (id_decl)
    DOT              [reduce using rule 106 (primary)]
    LEFT_BRACKET     [reduce using rule 106 (primary)]
    $default         reduce using rule 45 (lvalue)

    shift/reduce conflict on token LEFT_BRACKET:
      106 primary: IDENTIFIER •
       12 id_decl: IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                              $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                            main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls                                                                                         stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                          ↳ 28: local_decls var_decl
                                                                                                                                            ↳ 8: id_list                                                 COLON type SEMICOLON
                                                                                                                                                 ↳ 9: id_decl
                                                                                                                                                      ↳ 12: IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                                                    return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                                                         stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                                                          SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                                                           DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 112: postfix                    LEFT_BRACKET expr RIGHT_BRACKET
                                                                                                                                                                                ↳ 111: primary
                                                                                                                                                                                       ↳ 106: IDENTIFIER •

    shift/reduce conflict on token LEFT_BRACKET:
      106 primary: IDENTIFIER •
       13 id_decl: IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                       main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls                                                                                    stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                          ↳ 28: local_decls var_decl
                                                                                                                                            ↳ 8: id_list                                            COLON type SEMICOLON
                                                                                                                                                 ↳ 9: id_decl
                                                                                                                                                      ↳ 13: IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                                                    return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                                                         stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                                                          SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                                                           DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 112: postfix                    LEFT_BRACKET expr RIGHT_BRACKET
                                                                                                                                                                                ↳ 111: primary
                                                                                                                                                                                       ↳ 106: IDENTIFIER •

    shift/reduce conflict on token LEFT_BRACKET:
      106 primary: IDENTIFIER •
       46 lvalue: IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET OP_ASSIGN expr SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                                        main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                      ↳ 31: stmt                                                                                          stmts
                                                                                                                                            ↳ 32: simple_stmt
                                                                                                                                                  ↳ 34: assignment_statement
                                                                                                                                                        ↳ 39: lvalue                                             OP_ASSIGN expr SEMICOLON
                                                                                                                                                              ↳ 46: IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                          $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                                                    return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                                                         stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                                                          SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                                                           DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 112: postfix                    LEFT_BRACKET expr RIGHT_BRACKET
                                                                                                                                                                                ↳ 111: primary
                                                                                                                                                                                       ↳ 106: IDENTIFIER •

    shift/reduce conflict on token DOT:
      106 primary: IDENTIFIER •
       49 lvalue: IDENTIFIER • DOT OP_HASH IDENTIFIER
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • DOT OP_HASH IDENTIFIER OP_ASSIGN expr SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                               main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                            return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                      ↳ 31: stmt                                                                                 stmts
                                                                                                                                            ↳ 32: simple_stmt
                                                                                                                                                  ↳ 34: assignment_statement
                                                                                                                                                        ↳ 39: lvalue                                    OP_ASSIGN expr SEMICOLON
                                                                                                                                                              ↳ 49: IDENTIFIER • DOT OP_HASH IDENTIFIER
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                   $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                             return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                  stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                   SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                    DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 111: primary
                                                                                                                                                                                ↳ 106: IDENTIFIER •



State 168

   52 compound_stmt: KEYWORD_IF • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 195


State 169

   53 compound_stmt: KEYWORD_WHILE • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 196


State 170

   57 for_loop: KEYWORD_FOR • IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR • IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 197


State 171

   36 simple_stmt: KEYWORD_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 198


State 172

   37 simple_stmt: KEYWORD_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 199


State 173

   38 simple_stmt: SEMICOLON •

    $default  reduce using rule 38 (simple_stmt)


State 174

   14 id_decl: OP_HASH • IDENTIFIER
   15        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   47 lvalue: OP_HASH • IDENTIFIER
   48       | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   50       | OP_HASH • IDENTIFIER DOT IDENTIFIER
   51       | OP_HASH • IDENTIFIER DOT OP_HASH IDENTIFIER
   79 function_call: OP_HASH • IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  107 primary: OP_HASH • IDENTIFIER
  108        | OP_HASH • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  117 postfix: OP_HASH • IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH • IDENTIFIER DOT IDENTIFIER

    IDENTIFIER  shift, and go to state 200


State 175

   28 local_decls: local_decls var_decl •

    $default  reduce using rule 28 (local_decls)


State 176

    9 id_list: id_decl •  [COLON, COMMA]
   59 list_comp: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 201

    $default  reduce using rule 9 (id_list)


State 177

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   72 return_opt: ε •  [KEYWORD_ENDDEF]
   73           | • KEYWORD_RETURN SEMICOLON
   74           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 202

    $default  reduce using rule 72 (return_opt)

    return_opt  go to state 203


State 178

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF, KEYWORD_ENDWHILE, KEYWORD_ENDFOR, KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   31      | stmt • stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 204
    stmts                 go to state 205
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 179

   32 stmt: simple_stmt •

    $default  reduce using rule 32 (stmt)


State 180

   34 simple_stmt: assignment_statement •

    $default  reduce using rule 34 (simple_stmt)


State 181

   39 assignment_statement: lvalue • OP_ASSIGN expr SEMICOLON
   40                     | lvalue • OP_PLUS_ASSIGN expr SEMICOLON
   41                     | lvalue • OP_MINUS_ASSIGN expr SEMICOLON
   42                     | lvalue • OP_MULT_ASSIGN expr SEMICOLON
   43                     | lvalue • OP_DIV_ASSIGN expr SEMICOLON
   44                     | lvalue • OP_MOD_ASSIGN expr SEMICOLON

    OP_ASSIGN        shift, and go to state 206
    OP_PLUS_ASSIGN   shift, and go to state 207
    OP_MINUS_ASSIGN  shift, and go to state 208
    OP_MULT_ASSIGN   shift, and go to state 209
    OP_DIV_ASSIGN    shift, and go to state 210
    OP_MOD_ASSIGN    shift, and go to state 211


State 182

   33 stmt: compound_stmt •

    $default  reduce using rule 33 (stmt)


State 183

   54 compound_stmt: for_loop •

    $default  reduce using rule 54 (compound_stmt)


State 184

   55 compound_stmt: list_comp •

    $default  reduce using rule 55 (compound_stmt)


State 185

   56 compound_stmt: list_comp_array •

    $default  reduce using rule 56 (compound_stmt)


State 186

   29 local_decls: local_decls const_decl •

    $default  reduce using rule 29 (local_decls)


State 187

   35 simple_stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 212


State 188

   78 function_call: postfix • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  112 postfix: postfix • LEFT_BRACKET expr RIGHT_BRACKET
  113        | postfix • DOT IDENTIFIER
  114        | postfix • DOT OP_HASH IDENTIFIER
  115        | postfix • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    DOT           shift, and go to state 213
    LEFT_BRACKET  shift, and go to state 93


State 189

   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 214


State 190

  117 postfix: OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 117 (postfix)


State 191

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   71 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 175
    id_list               go to state 16
    id_decl               go to state 176
    stmts                 go to state 215
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    const_decl            go to state 186
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 192

   49 lvalue: IDENTIFIER DOT • OP_HASH IDENTIFIER

    OP_HASH  shift, and go to state 216


State 193

   77 function_call: IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   80 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   81             | • arg_list
   82 arg_list: • expr
   83         | • arg_list COMMA expr
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 80 (arg_list_opt)

    arg_list_opt     go to state 217
    arg_list         go to state 106
    expr             go to state 107
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 194

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   46 lvalue: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 43
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 218
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 195

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 219
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 196

   53 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 220
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 197

   57 for_loop: KEYWORD_FOR IDENTIFIER • KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER • KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    KEYWORD_IN  shift, and go to state 221


State 198

   36 simple_stmt: KEYWORD_BREAK SEMICOLON •

    $default  reduce using rule 36 (simple_stmt)


State 199

   37 simple_stmt: KEYWORD_CONTINUE SEMICOLON •

    $default  reduce using rule 37 (simple_stmt)


State 200

   14 id_decl: OP_HASH IDENTIFIER •  [OP_COLON_ASSIGN, COLON, COMMA]
   15        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   47 lvalue: OP_HASH IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   48       | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   50       | OP_HASH IDENTIFIER • DOT IDENTIFIER
   51       | OP_HASH IDENTIFIER • DOT OP_HASH IDENTIFIER
   79 function_call: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  107 primary: OP_HASH IDENTIFIER •  [DOT, LEFT_BRACKET]
  108        | OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
  117 postfix: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH IDENTIFIER • DOT IDENTIFIER

    DOT           shift, and go to state 222
    LEFT_BRACKET  shift, and go to state 223

    OP_COLON_ASSIGN  reduce using rule 14 (id_decl)
    COLON            reduce using rule 14 (id_decl)
    COMMA            reduce using rule 14 (id_decl)
    DOT              [reduce using rule 107 (primary)]
    LEFT_BRACKET     [reduce using rule 107 (primary)]
    $default         reduce using rule 47 (lvalue)

    shift/reduce conflict on token LEFT_BRACKET:
      107 primary: OP_HASH IDENTIFIER •
       15 id_decl: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                      $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                                    main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls                                                                                                 stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                          ↳ 28: local_decls var_decl
                                                                                                                                            ↳ 8: id_list                                                         COLON type SEMICOLON
                                                                                                                                                 ↳ 9: id_decl
                                                                                                                                                      ↳ 15: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                                                            return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                                                                 stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                                                                  SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                                                                   DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 112: postfix                            LEFT_BRACKET expr RIGHT_BRACKET
                                                                                                                                                                                ↳ 111: primary
                                                                                                                                                                                       ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token LEFT_BRACKET:
      107 primary: OP_HASH IDENTIFIER •
       16 id_decl: OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                               main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls                                                                                            stmts return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                          ↳ 28: local_decls var_decl
                                                                                                                                            ↳ 8: id_list                                                    COLON type SEMICOLON
                                                                                                                                                 ↳ 9: id_decl
                                                                                                                                                      ↳ 16: OP_HASH IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                                                            return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                                                                 stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                                                                  SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                                                                   DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 112: postfix                            LEFT_BRACKET expr RIGHT_BRACKET
                                                                                                                                                                                ↳ 111: primary
                                                                                                                                                                                       ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token LEFT_BRACKET:
      107 primary: OP_HASH IDENTIFIER •
       48 lvalue: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET OP_ASSIGN expr SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                                                main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                             return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                      ↳ 31: stmt                                                                                                  stmts
                                                                                                                                            ↳ 32: simple_stmt
                                                                                                                                                  ↳ 34: assignment_statement
                                                                                                                                                        ↳ 39: lvalue                                                     OP_ASSIGN expr SEMICOLON
                                                                                                                                                              ↳ 48: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                                                                  $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                                                            return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                                                                 stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                                                                  SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                                                                   DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 112: postfix                            LEFT_BRACKET expr RIGHT_BRACKET
                                                                                                                                                                                ↳ 111: primary
                                                                                                                                                                                       ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token DOT:
      107 primary: OP_HASH IDENTIFIER •
       50 lvalue: OP_HASH IDENTIFIER • DOT IDENTIFIER
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • DOT IDENTIFIER OP_ASSIGN expr SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                 $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                               main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                            return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                      ↳ 31: stmt                                                                                 stmts
                                                                                                                                            ↳ 32: simple_stmt
                                                                                                                                                  ↳ 34: assignment_statement
                                                                                                                                                        ↳ 39: lvalue                                    OP_ASSIGN expr SEMICOLON
                                                                                                                                                              ↳ 50: OP_HASH IDENTIFIER • DOT IDENTIFIER
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                          stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                           SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                            DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 111: primary
                                                                                                                                                                                ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token DOT:
      107 primary: OP_HASH IDENTIFIER •
       51 lvalue: OP_HASH IDENTIFIER • DOT OP_HASH IDENTIFIER
      First example: comp_decls const_decls var_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • DOT OP_HASH IDENTIFIER OP_ASSIGN expr SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON main_func $end
      Shift derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                         $end
             ↳ 1: comp_decls const_decls var_decls main_func                                                                                                                                                                                                                       main_func
                                                   ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                    return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                      ↳ 31: stmt                                                                                         stmts
                                                                                                                                            ↳ 32: simple_stmt
                                                                                                                                                  ↳ 34: assignment_statement
                                                                                                                                                        ↳ 39: lvalue                                            OP_ASSIGN expr SEMICOLON
                                                                                                                                                              ↳ 51: OP_HASH IDENTIFIER • DOT OP_HASH IDENTIFIER
      Second example: comp_decls const_decls var_decls func_decls KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS SEMICOLON stmts return_opt KEYWORD_ENDDEF SEMICOLON $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                                                                                                                                                                                                                           $end
             ↳ 1: comp_decls const_decls var_decls func_decls main_func
                                                              ↳ 2: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts                                                                                                                                     return_opt KEYWORD_ENDDEF SEMICOLON
                                                                                                                                                 ↳ 31: stmt                                                                                                                          stmts
                                                                                                                                                       ↳ 32: simple_stmt
                                                                                                                                                             ↳ 35: function_call                                                                                           SEMICOLON
                                                                                                                                                                   ↳ 78: postfix                            DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                                                                                                                         ↳ 111: primary
                                                                                                                                                                                ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token DOT:
      107 primary: OP_HASH IDENTIFIER •
       79 function_call: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
      Example: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
      Shift derivation
        function_call
        ↳ 79: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                   ↳ 79: ε
      Reduce derivation
        function_call
        ↳ 78: postfix                            DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
              ↳ 111: primary                                                     ↳ 78: ε
                     ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token LEFT_BRACKET:
      107 primary: OP_HASH IDENTIFIER •
      108 primary: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Example: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Shift derivation
        postfix
        ↳ 111: primary
               ↳ 108: OP_HASH IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
      Reduce derivation
        postfix
        ↳ 112: postfix                            LEFT_BRACKET expr RIGHT_BRACKET
               ↳ 111: primary
                      ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token DOT:
      107 primary: OP_HASH IDENTIFIER •
      117 postfix: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
      Example: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
      Shift derivation
        postfix
        ↳ 117: OP_HASH IDENTIFIER • DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
                                                                    ↳ 117: ε
      Reduce derivation
        postfix
        ↳ 115: postfix                            DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
               ↳ 111: primary                                                     ↳ 115: ε
                      ↳ 107: OP_HASH IDENTIFIER •

    shift/reduce conflict on token DOT:
      107 primary: OP_HASH IDENTIFIER •
      118 postfix: OP_HASH IDENTIFIER • DOT IDENTIFIER
      Example: OP_HASH IDENTIFIER • DOT IDENTIFIER
      Shift derivation
        postfix
        ↳ 118: OP_HASH IDENTIFIER • DOT IDENTIFIER
      Reduce derivation
        postfix
        ↳ 113: postfix                            DOT IDENTIFIER
               ↳ 111: primary
                      ↳ 107: OP_HASH IDENTIFIER •



State 201

   59 list_comp: id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    LEFT_BRACKET  shift, and go to state 224


State 202

   73 return_opt: KEYWORD_RETURN • SEMICOLON
   74           | KEYWORD_RETURN • expr SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    SEMICOLON         shift, and go to state 225
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 226
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 203

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 227


State 204

   59 list_comp: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 201


State 205

   31 stmts: stmt stmts •

    $default  reduce using rule 31 (stmts)


State 206

   39 assignment_statement: lvalue OP_ASSIGN • expr SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 228
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 207

   40 assignment_statement: lvalue OP_PLUS_ASSIGN • expr SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 229
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 208

   41 assignment_statement: lvalue OP_MINUS_ASSIGN • expr SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 230
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 209

   42 assignment_statement: lvalue OP_MULT_ASSIGN • expr SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 231
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 210

   43 assignment_statement: lvalue OP_DIV_ASSIGN • expr SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 232
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 211

   44 assignment_statement: lvalue OP_MOD_ASSIGN • expr SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 233
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 212

   35 simple_stmt: function_call SEMICOLON •

    $default  reduce using rule 35 (simple_stmt)


State 213

   78 function_call: postfix DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  113 postfix: postfix DOT • IDENTIFIER
  114        | postfix DOT • OP_HASH IDENTIFIER
  115        | postfix DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER  shift, and go to state 234
    OP_HASH     shift, and go to state 126


State 214

   27 local_decls: ε •
   28            | • local_decls var_decl
   29            | • local_decls const_decl
   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    $default  reduce using rule 27 (local_decls)

    local_decls  go to state 235


State 215

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   72 return_opt: ε •  [KEYWORD_ENDDEF]
   73           | • KEYWORD_RETURN SEMICOLON
   74           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 202

    $default  reduce using rule 72 (return_opt)

    return_opt  go to state 236


State 216

   49 lvalue: IDENTIFIER DOT OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 237


State 217

   77 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS
  116 postfix: IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 238


State 218

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   46 lvalue: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 239


State 219

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 240


State 220

   53 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 241


State 221

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN • LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER KEYWORD_IN • LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    LEFT_BRACKET  shift, and go to state 242


State 222

   50 lvalue: OP_HASH IDENTIFIER DOT • IDENTIFIER
   51       | OP_HASH IDENTIFIER DOT • OP_HASH IDENTIFIER
   79 function_call: OP_HASH IDENTIFIER DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117 postfix: OP_HASH IDENTIFIER DOT • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH IDENTIFIER DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 243
    OP_HASH     shift, and go to state 244


State 223

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   16        | OP_HASH IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  108        | OP_HASH IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    RIGHT_BRACKET     shift, and go to state 94
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 245
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 224

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 246
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 225

   73 return_opt: KEYWORD_RETURN SEMICOLON •

    $default  reduce using rule 73 (return_opt)


State 226

   74 return_opt: KEYWORD_RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 247


State 227

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 248


State 228

   39 assignment_statement: lvalue OP_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 249


State 229

   40 assignment_statement: lvalue OP_PLUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 250


State 230

   41 assignment_statement: lvalue OP_MINUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 251


State 231

   42 assignment_statement: lvalue OP_MULT_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 252


State 232

   43 assignment_statement: lvalue OP_DIV_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 253


State 233

   44 assignment_statement: lvalue OP_MOD_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 254


State 234

   78 function_call: postfix DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  113 postfix: postfix DOT IDENTIFIER •  [DOT, LEFT_BRACKET]
  115        | postfix DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 255

    $default  reduce using rule 113 (postfix)


State 235

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   28 local_decls: local_decls • var_decl
   29            | local_decls • const_decl
   30 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   71 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    KEYWORD_CONST     shift, and go to state 8
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    var_decl              go to state 175
    id_list               go to state 16
    id_decl               go to state 176
    stmts                 go to state 256
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    const_decl            go to state 186
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 236

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 257


State 237

   49 lvalue: IDENTIFIER DOT OP_HASH IDENTIFIER •

    $default  reduce using rule 49 (lvalue)


State 238

   77 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •  [SEMICOLON]
  116 postfix: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •  [DOT, LEFT_BRACKET]

    SEMICOLON  reduce using rule 77 (function_call)
    $default   reduce using rule 116 (postfix)


State 239

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN, COLON, COMMA]
   46 lvalue: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]

    OP_COLON_ASSIGN  reduce using rule 12 (id_decl)
    COLON            reduce using rule 12 (id_decl)
    COMMA            reduce using rule 12 (id_decl)
    $default         reduce using rule 46 (lvalue)


State 240

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    COLON  shift, and go to state 258


State 241

   53 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDWHILE SEMICOLON

    COLON  shift, and go to state 259


State 242

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET • expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET • expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 260
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 243

   50 lvalue: OP_HASH IDENTIFIER DOT IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   79 function_call: OP_HASH IDENTIFIER DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117 postfix: OP_HASH IDENTIFIER DOT IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | OP_HASH IDENTIFIER DOT IDENTIFIER •  [DOT, LEFT_BRACKET]

    LEFT_PARENTHESIS  shift, and go to state 261

    DOT           reduce using rule 118 (postfix)
    LEFT_BRACKET  reduce using rule 118 (postfix)
    $default      reduce using rule 50 (lvalue)


State 244

   51 lvalue: OP_HASH IDENTIFIER DOT OP_HASH • IDENTIFIER

    IDENTIFIER  shift, and go to state 262


State 245

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
  108 primary: OP_HASH IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 263


State 246

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_FOR  shift, and go to state 264


State 247

   74 return_opt: KEYWORD_RETURN expr SEMICOLON •

    $default  reduce using rule 74 (return_opt)


State 248

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 2 (main_func)


State 249

   39 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON •

    $default  reduce using rule 39 (assignment_statement)


State 250

   40 assignment_statement: lvalue OP_PLUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 40 (assignment_statement)


State 251

   41 assignment_statement: lvalue OP_MINUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 41 (assignment_statement)


State 252

   42 assignment_statement: lvalue OP_MULT_ASSIGN expr SEMICOLON •

    $default  reduce using rule 42 (assignment_statement)


State 253

   43 assignment_statement: lvalue OP_DIV_ASSIGN expr SEMICOLON •

    $default  reduce using rule 43 (assignment_statement)


State 254

   44 assignment_statement: lvalue OP_MOD_ASSIGN expr SEMICOLON •

    $default  reduce using rule 44 (assignment_statement)


State 255

   78 function_call: postfix DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   80 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   81             | • arg_list
   82 arg_list: • expr
   83         | • arg_list COMMA expr
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  115        | postfix DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 80 (arg_list_opt)

    arg_list_opt     go to state 265
    arg_list         go to state 106
    expr             go to state 107
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 256

   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   72 return_opt: ε •  [KEYWORD_ENDDEF]
   73           | • KEYWORD_RETURN SEMICOLON
   74           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 202

    $default  reduce using rule 72 (return_opt)

    return_opt  go to state 266


State 257

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 267


State 258

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   52              | KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 204
    stmts                 go to state 268
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 259

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDWHILE]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   53              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 204
    stmts                 go to state 269
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 260

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr • COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr • COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 270


State 261

   79 function_call: OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   80 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   81             | • arg_list
   82 arg_list: • expr
   83         | • arg_list COMMA expr
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    $default  reduce using rule 80 (arg_list_opt)

    arg_list_opt     go to state 271
    arg_list         go to state 106
    expr             go to state 107
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 262

   51 lvalue: OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER •

    $default  reduce using rule 51 (lvalue)


State 263

   15 id_decl: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN, COLON, COMMA]
   48 lvalue: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
  108 primary: OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [DOT, LEFT_BRACKET]

    OP_COLON_ASSIGN  reduce using rule 15 (id_decl)
    COLON            reduce using rule 15 (id_decl)
    COMMA            reduce using rule 15 (id_decl)
    DOT              reduce using rule 108 (primary)
    LEFT_BRACKET     reduce using rule 108 (primary)
    $default         reduce using rule 48 (lvalue)


State 264

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 272


State 265

   78 function_call: postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS
  115 postfix: postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 273


State 266

   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 274


State 267

   19 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 19 (func_decl)


State 268

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • else_part KEYWORD_ENDIF SEMICOLON
   75 else_part: ε •  [KEYWORD_ENDIF]
   76          | • KEYWORD_ELSE COLON stmts

    KEYWORD_ELSE  shift, and go to state 275

    $default  reduce using rule 75 (else_part)

    else_part  go to state 276


State 269

   53 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDWHILE SEMICOLON

    KEYWORD_ENDWHILE  shift, and go to state 277


State 270

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON • expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON • expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 278
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 271

   79 function_call: OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS
  117 postfix: OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 279


State 272

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    COLON  shift, and go to state 280


State 273

   78 function_call: postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •  [SEMICOLON]
  115 postfix: postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •  [DOT, LEFT_BRACKET]

    SEMICOLON  reduce using rule 78 (function_call)
    $default   reduce using rule 115 (postfix)


State 274

   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 281


State 275

   76 else_part: KEYWORD_ELSE • COLON stmts

    COLON  shift, and go to state 282


State 276

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part • KEYWORD_ENDIF SEMICOLON

    KEYWORD_ENDIF  shift, and go to state 283


State 277

   53 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 284


State 278

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr • RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr • COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON          shift, and go to state 285
    RIGHT_BRACKET  shift, and go to state 286


State 279

   79 function_call: OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •  [SEMICOLON]
  117 postfix: OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •  [DOT, LEFT_BRACKET]

    SEMICOLON  reduce using rule 79 (function_call)
    $default   reduce using rule 117 (postfix)


State 280

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER        shift, and go to state 287
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_SCALAR    shift, and go to state 57
    KEYWORD_STR       shift, and go to state 58
    KEYWORD_INTEGER   shift, and go to state 59
    KEYWORD_COMP      shift, and go to state 60
    KEYWORD_BOOL      shift, and go to state 61
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    LEFT_BRACKET      shift, and go to state 62
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 288
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54
    type             go to state 289


State 281

   68 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 68 (method_decl)


State 282

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDIF]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   76 else_part: KEYWORD_ELSE COLON • stmts
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 204
    stmts                 go to state 290
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 283

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 291


State 284

   53 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 53 (compound_stmt)


State 285

   58 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON • expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 292
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 286

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 293


State 287

  106 primary: IDENTIFIER •  [DOT, LEFT_BRACKET, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
  116 postfix: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  129 type: IDENTIFIER •  [KEYWORD_IN]

    LEFT_PARENTHESIS  shift, and go to state 72

    KEYWORD_IN  reduce using rule 129 (type)
    $default    reduce using rule 106 (primary)


State 288

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 294


State 289

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type • KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_IN  shift, and go to state 295


State 290

   76 else_part: KEYWORD_ELSE COLON stmts •

    $default  reduce using rule 76 (else_part)


State 291

   52 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON •

    $default  reduce using rule 52 (compound_stmt)


State 292

   58 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr • RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON

    RIGHT_BRACKET  shift, and go to state 296


State 293

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDFOR]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   57         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON • stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 204
    stmts                 go to state 297
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 294

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 298


State 295

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN • IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 299


State 296

   58 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 300


State 297

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts • KEYWORD_ENDFOR SEMICOLON

    KEYWORD_ENDFOR  shift, and go to state 301


State 298

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON • type SEMICOLON
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 302


State 299

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER • KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_OF  shift, and go to state 303


State 300

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14        | • OP_HASH IDENTIFIER
   15        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   16        | • OP_HASH IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   30 stmts: ε •  [KEYWORD_ENDFOR]
   31      | • stmt stmts
   32 stmt: • simple_stmt
   33     | • compound_stmt
   34 simple_stmt: • assignment_statement
   35            | • function_call SEMICOLON
   36            | • KEYWORD_BREAK SEMICOLON
   37            | • KEYWORD_CONTINUE SEMICOLON
   38            | • SEMICOLON
   39 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   42                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   43                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   44                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   45 lvalue: • IDENTIFIER
   46       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   47       | • OP_HASH IDENTIFIER
   48       | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   49       | • IDENTIFIER DOT OP_HASH IDENTIFIER
   50       | • OP_HASH IDENTIFIER DOT IDENTIFIER
   51       | • OP_HASH IDENTIFIER DOT OP_HASH IDENTIFIER
   52 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   53              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   54              | • for_loop
   55              | • list_comp
   56              | • list_comp_array
   57 for_loop: • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | • KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON
   58         | KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON • stmts KEYWORD_ENDFOR SEMICOLON
   59 list_comp: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   60 list_comp_array: • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   77 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78              | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79              | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 167
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    KEYWORD_IF        shift, and go to state 168
    KEYWORD_WHILE     shift, and go to state 169
    KEYWORD_FOR       shift, and go to state 170
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    KEYWORD_BREAK     shift, and go to state 171
    KEYWORD_CONTINUE  shift, and go to state 172
    SEMICOLON         shift, and go to state 173
    OP_HASH           shift, and go to state 174
    LEFT_PARENTHESIS  shift, and go to state 42

    $default  reduce using rule 30 (stmts)

    id_decl               go to state 204
    stmts                 go to state 304
    stmt                  go to state 178
    simple_stmt           go to state 179
    assignment_statement  go to state 180
    lvalue                go to state 181
    compound_stmt         go to state 182
    for_loop              go to state 183
    list_comp             go to state 184
    list_comp_array       go to state 185
    function_call         go to state 187
    primary               go to state 52
    postfix               go to state 188
    literal               go to state 54


State 301

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 305


State 302

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 306


State 303

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF • expr RIGHT_BRACKET COLON type SEMICOLON
   84 expr: • logical_expr
   85 logical_expr: • relational_expr
   86             | • logical_expr OP_AND relational_expr
   87             | • logical_expr OP_OR relational_expr
   88 relational_expr: • arithmetic_expr
   89                | • relational_expr OP_LT arithmetic_expr
   90                | • relational_expr OP_LE arithmetic_expr
   91                | • relational_expr OP_GT arithmetic_expr
   92                | • relational_expr OP_GE arithmetic_expr
   93                | • relational_expr OP_EQ arithmetic_expr
   94                | • relational_expr OP_NEQ arithmetic_expr
   95 arithmetic_expr: • term
   96                | • arithmetic_expr OP_PLUS term
   97                | • arithmetic_expr OP_MINUS term
   98 term: • factor
   99     | • term OP_MULT factor
  100     | • term OP_DIV factor
  101     | • term OP_MOD factor
  102 factor: • postfix
  103       | • OP_MINUS factor
  104       | • OP_NOT factor
  105       | • factor OP_POWER postfix
  106 primary: • IDENTIFIER
  107        | • OP_HASH IDENTIFIER
  108        | • OP_HASH IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
  109        | • literal
  110        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  111 postfix: • primary
  112        | • postfix LEFT_BRACKET expr RIGHT_BRACKET
  113        | • postfix DOT IDENTIFIER
  114        | • postfix DOT OP_HASH IDENTIFIER
  115        | • postfix DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  116        | • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  117        | • OP_HASH IDENTIFIER DOT IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
  118        | • OP_HASH IDENTIFIER DOT IDENTIFIER
  119 literal: • CONST_INT
  120        | • CONST_REAL
  121        | • CONST_STRING
  122        | • BOOL_TRUE
  123        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 40
    CONST_STRING      shift, and go to state 34
    CONST_INT         shift, and go to state 35
    CONST_REAL        shift, and go to state 36
    BOOL_TRUE         shift, and go to state 37
    BOOL_FALSE        shift, and go to state 38
    OP_HASH           shift, and go to state 41
    LEFT_PARENTHESIS  shift, and go to state 42
    OP_MINUS          shift, and go to state 44
    OP_NOT            shift, and go to state 45

    expr             go to state 307
    logical_expr     go to state 47
    relational_expr  go to state 48
    arithmetic_expr  go to state 49
    term             go to state 50
    factor           go to state 51
    primary          go to state 52
    postfix          go to state 53
    literal          go to state 54


State 304

   58 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts • KEYWORD_ENDFOR SEMICOLON

    KEYWORD_ENDFOR  shift, and go to state 308


State 305

   57 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 57 (for_loop)


State 306

   59 list_comp: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 59 (list_comp)


State 307

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 309


State 308

   58 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 310


State 309

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 311


State 310

   58 for_loop: KEYWORD_FOR IDENTIFIER KEYWORD_IN LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 58 (for_loop)


State 311

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON • type SEMICOLON
  124 type: • KEYWORD_INTEGER
  125     | • KEYWORD_SCALAR
  126     | • KEYWORD_STR
  127     | • KEYWORD_BOOL
  128     | • KEYWORD_COMP
  129     | • IDENTIFIER
  130     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  131     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 56
    KEYWORD_SCALAR   shift, and go to state 57
    KEYWORD_STR      shift, and go to state 58
    KEYWORD_INTEGER  shift, and go to state 59
    KEYWORD_COMP     shift, and go to state 60
    KEYWORD_BOOL     shift, and go to state 61
    LEFT_BRACKET     shift, and go to state 62

    type  go to state 312


State 312

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 313


State 313

   60 list_comp_array: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 60 (list_comp_array)
