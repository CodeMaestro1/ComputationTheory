Nonterminals useless in grammar

    type_decls
    type_basic_decl
    complex_type_decls
    array_decls


Terminals unused in grammar

    DOT


Rules useless in grammar

  114 type_decls: ε
  115           | type_decls type_basic_decl
  116           | type_decls complex_type_decls

  117 type_basic_decl: KEYWORD_INTEGER
  118                | KEYWORD_SCALAR
  119                | KEYWORD_STR
  120                | KEYWORD_BOOL

  121 complex_type_decls: comp_decl
  122                   | array_decls

  123 array_decls: id_decl LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type SEMICOLON
  124            | id_decl LEFT_BRACKET RIGHT_BRACKET COLON type SEMICOLON


Grammar

    0 $accept: program $end

    1 program: comp_decls const_decls var_decls func_decls main_func

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    3 comp_decls: ε
    4           | comp_decls comp_decl

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    6 var_decls: ε
    7          | var_decls var_decl

    8 var_decl: id_list COLON type SEMICOLON

    9 id_list: id_decl
   10        | id_list COMMA id_decl

   11 id_decl: IDENTIFIER
   12        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   14 func_decls: ε
   15           | func_decls func_decl

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   17 return_type_decl: ε
   18                 | ARROW return_type_opt

   19 param: id_decl COLON type

   20 param_list_opt: ε
   21               | param_list

   22 param_list: param
   23           | param_list COMMA param

   24 local_decls: ε
   25            | local_decls var_decl
   26            | local_decls const_decl

   27 stmts: ε
   28      | stmt stmts

   29 stmt: simple_stmt
   30     | compound_stmt

   31 simple_stmt: assignment_statement
   32            | function_call SEMICOLON
   33            | KEYWORD_BREAK SEMICOLON
   34            | KEYWORD_CONTINUE SEMICOLON
   35            | SEMICOLON

   36 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON
   37                     | lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | lvalue OP_MOD_ASSIGN expr SEMICOLON

   42 lvalue: IDENTIFIER
   43       | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

   49 member_decls: ε
   50             | member_decl_list

   51 member_decl_list: member_decl
   52                 | member_decl_list member_decl

   53 member_decl: id_list COLON type SEMICOLON

   54 method_decls: ε
   55             | method_decls method_decl

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

   57 const_decls: ε
   58            | const_decls const_decl

   59 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

   60 return_type_opt: ε
   61                | type

   62 return_opt: ε
   63           | KEYWORD_RETURN SEMICOLON
   64           | KEYWORD_RETURN expr SEMICOLON

   65 else_part: ε
   66          | KEYWORD_ELSE COLON stmts

   67 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

   68 arg_list_opt: ε
   69             | arg_list

   70 arg_list: expr
   71         | arg_list COMMA expr

   72 expr: logical_expr

   73 logical_expr: relational_expr
   74             | logical_expr OP_AND relational_expr
   75             | logical_expr OP_OR relational_expr

   76 relational_expr: arithmetic_expr
   77                | relational_expr OP_LT arithmetic_expr
   78                | relational_expr OP_LE arithmetic_expr
   79                | relational_expr OP_GT arithmetic_expr
   80                | relational_expr OP_GE arithmetic_expr
   81                | relational_expr OP_EQ arithmetic_expr
   82                | relational_expr OP_NEQ arithmetic_expr

   83 arithmetic_expr: term
   84                | arithmetic_expr OP_PLUS term
   85                | arithmetic_expr OP_MINUS term

   86 term: factor
   87     | term OP_MULT factor
   88     | term OP_DIV factor
   89     | term OP_MOD factor

   90 factor: primary
   91       | OP_MINUS factor
   92       | OP_NOT factor
   93       | factor OP_POWER primary

   94 primary: IDENTIFIER
   95        | IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | literal
   97        | function_call
   98        | LEFT_PARENTHESIS expr RIGHT_PARENTHESIS

   99 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET
  100           | LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

  101 literal: CONST_INT
  102        | CONST_REAL
  103        | CONST_STRING
  104        | BOOL_TRUE
  105        | BOOL_FALSE

  106 type: KEYWORD_INTEGER
  107     | KEYWORD_SCALAR
  108     | KEYWORD_STR
  109     | KEYWORD_BOOL
  110     | KEYWORD_COMP
  111     | IDENTIFIER
  112     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | LEFT_BRACKET RIGHT_BRACKET COLON type


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER <stringVal> (258) 5 11 12 13 16 42 43 46 47 48 56 59 67 94 95 111
    CONST_STRING <stringVal> (259) 103
    CONST_INT <integerVal> (260) 101 112
    CONST_REAL <floatVal> (261) 102
    KEYWORD_SCALAR (262) 107
    KEYWORD_STR <stringVal> (263) 108
    OP_COLON_ASSIGN <stringVal> (264) 47 48
    KEYWORD_INTEGER <integerVal> (265) 106
    KEYWORD_IF (266) 44
    KEYWORD_ELSE (267) 66
    KEYWORD_ENDIF (268) 44
    KEYWORD_WHILE (269) 45
    KEYWORD_ENDWHILE (270) 45
    KEYWORD_FOR (271) 46 47 48
    KEYWORD_IN (272) 46 48
    KEYWORD_ENDFOR (273) 46
    KEYWORD_DEF (274) 2 16 56
    KEYWORD_ENDDEF (275) 2 16 56
    KEYWORD_MAIN (276) 2
    KEYWORD_RETURN (277) 63 64
    KEYWORD_CONST (278) 59
    KEYWORD_COMP (279) 5 110
    KEYWORD_ENDCOMP (280) 5
    KEYWORD_OF (281) 48
    KEYWORD_BOOL (282) 109
    BOOL_TRUE (283) 104
    BOOL_FALSE (284) 105
    KEYWORD_BREAK (285) 33
    KEYWORD_CONTINUE (286) 34
    SEMICOLON (287) 2 5 8 16 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 53 56 59 63 64
    COLON (288) 2 5 8 16 19 44 45 46 47 48 53 56 59 66 99 100 112 113
    COMMA (289) 10 23 71
    ARROW (290) 18
    DOT (291)
    LEFT_PARENTHESIS (292) 2 16 44 45 56 67 98
    RIGHT_PARENTHESIS (293) 2 16 44 45 56 67 98
    LEFT_BRACKET (294) 12 13 43 47 48 95 99 100 112 113
    RIGHT_BRACKET (295) 12 13 43 47 48 95 99 100 112 113
    OP_POWER (296) 93
    UMINUS (297)
    OP_MULT (298) 87
    OP_DIV (299) 88
    OP_MOD (300) 89
    OP_PLUS (301) 84
    OP_MINUS (302) 85 91
    OP_LT (303) 77
    OP_LE (304) 78
    OP_GT (305) 79
    OP_GE (306) 80
    OP_EQ (307) 81
    OP_NEQ (308) 82
    OP_NOT (309) 92
    OP_AND (310) 74
    OP_OR (311) 75
    OP_ASSIGN (312) 36 59
    OP_PLUS_ASSIGN (313) 37
    OP_MINUS_ASSIGN (314) 38
    OP_MULT_ASSIGN (315) 39
    OP_DIV_ASSIGN (316) 40
    OP_MOD_ASSIGN (317) 41


Nonterminals, with rules where they appear

    $accept (63)
        on left: 0
    program (64)
        on left: 1
        on right: 0
    main_func (65)
        on left: 2
        on right: 1
    comp_decls (66)
        on left: 3 4
        on right: 1 4
    comp_decl (67)
        on left: 5
        on right: 4
    var_decls (68)
        on left: 6 7
        on right: 1 7
    var_decl (69)
        on left: 8
        on right: 7 25
    id_list (70)
        on left: 9 10
        on right: 8 10 53
    id_decl <stringVal> (71)
        on left: 11 12 13
        on right: 9 10 19 47 48
    func_decls (72)
        on left: 14 15
        on right: 1 15
    func_decl (73)
        on left: 16
        on right: 15
    return_type_decl (74)
        on left: 17 18
        on right: 16
    param (75)
        on left: 19
        on right: 22 23
    param_list_opt (76)
        on left: 20 21
        on right: 16 56
    param_list (77)
        on left: 22 23
        on right: 21 23
    local_decls (78)
        on left: 24 25 26
        on right: 2 16 25 26 56
    stmts (79)
        on left: 27 28
        on right: 2 16 28 44 45 46 56 66
    stmt (80)
        on left: 29 30
        on right: 28
    simple_stmt (81)
        on left: 31 32 33 34 35
        on right: 29
    assignment_statement (82)
        on left: 36 37 38 39 40 41
        on right: 31
    lvalue (83)
        on left: 42 43
        on right: 36 37 38 39 40 41
    compound_stmt (84)
        on left: 44 45 46 47 48
        on right: 30
    member_decls (85)
        on left: 49 50
        on right: 5
    member_decl_list (86)
        on left: 51 52
        on right: 50 52
    member_decl (87)
        on left: 53
        on right: 51 52
    method_decls (88)
        on left: 54 55
        on right: 5 55
    method_decl (89)
        on left: 56
        on right: 55
    const_decls (90)
        on left: 57 58
        on right: 1 58
    const_decl (91)
        on left: 59
        on right: 26 58
    return_type_opt (92)
        on left: 60 61
        on right: 18 56
    return_opt (93)
        on left: 62 63 64
        on right: 16 56
    else_part (94)
        on left: 65 66
        on right: 44
    function_call (95)
        on left: 67
        on right: 32 97
    arg_list_opt (96)
        on left: 68 69
        on right: 67
    arg_list (97)
        on left: 70 71
        on right: 69 71
    expr (98)
        on left: 72
        on right: 12 36 37 38 39 40 41 43 44 45 47 48 64 70 71 95 98 99 100
    logical_expr (99)
        on left: 73 74 75
        on right: 72 74 75
    relational_expr (100)
        on left: 76 77 78 79 80 81 82
        on right: 73 74 75 77 78 79 80 81 82
    arithmetic_expr (101)
        on left: 83 84 85
        on right: 76 77 78 79 80 81 82 84 85
    term (102)
        on left: 86 87 88 89
        on right: 83 84 85 87 88 89
    factor (103)
        on left: 90 91 92 93
        on right: 86 87 88 89 91 92 93
    primary (104)
        on left: 94 95 96 97 98
        on right: 90 93
    range_expr (105)
        on left: 99 100
        on right: 46
    literal (106)
        on left: 101 102 103 104 105
        on right: 59 96
    type (107)
        on left: 106 107 108 109 110 111 112 113
        on right: 8 19 47 48 53 59 61 112 113


State 0

    0 $accept: • program $end
    1 program: • comp_decls const_decls var_decls func_decls main_func
    3 comp_decls: ε •
    4           | • comp_decls comp_decl

    $default  reduce using rule 3 (comp_decls)

    program     go to state 1
    comp_decls  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: comp_decls • const_decls var_decls func_decls main_func
    4 comp_decls: comp_decls • comp_decl
    5 comp_decl: • KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
   57 const_decls: ε •  [IDENTIFIER, KEYWORD_DEF, KEYWORD_CONST]
   58            | • const_decls const_decl

    KEYWORD_COMP  shift, and go to state 4

    $default  reduce using rule 57 (const_decls)

    comp_decl    go to state 5
    const_decls  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    5 comp_decl: KEYWORD_COMP • IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    IDENTIFIER  shift, and go to state 7


State 5

    4 comp_decls: comp_decls comp_decl •

    $default  reduce using rule 4 (comp_decls)


State 6

    1 program: comp_decls const_decls • var_decls func_decls main_func
    6 var_decls: ε •  [IDENTIFIER, KEYWORD_DEF]
    7          | • var_decls var_decl
   58 const_decls: const_decls • const_decl
   59 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    KEYWORD_CONST  shift, and go to state 8

    $default  reduce using rule 6 (var_decls)

    var_decls   go to state 9
    const_decl  go to state 10


State 7

    5 comp_decl: KEYWORD_COMP IDENTIFIER • COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON

    COLON  shift, and go to state 11


State 8

   59 const_decl: KEYWORD_CONST • IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 12


State 9

    1 program: comp_decls const_decls var_decls • func_decls main_func
    7 var_decls: var_decls • var_decl
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   14 func_decls: ε •  [KEYWORD_DEF]
   15           | • func_decls func_decl

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 14 (func_decls)

    var_decl    go to state 14
    id_list     go to state 15
    id_decl     go to state 16
    func_decls  go to state 17


State 10

   58 const_decls: const_decls const_decl •

    $default  reduce using rule 58 (const_decls)


State 11

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON • member_decls method_decls KEYWORD_ENDCOMP SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   49 member_decls: ε •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   50             | • member_decl_list
   51 member_decl_list: • member_decl
   52                 | • member_decl_list member_decl
   53 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 49 (member_decls)

    id_list           go to state 18
    id_decl           go to state 16
    member_decls      go to state 19
    member_decl_list  go to state 20
    member_decl       go to state 21


State 12

   59 const_decl: KEYWORD_CONST IDENTIFIER • OP_ASSIGN literal COLON type SEMICOLON

    OP_ASSIGN  shift, and go to state 22


State 13

   11 id_decl: IDENTIFIER •  [COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 23

    $default  reduce using rule 11 (id_decl)


State 14

    7 var_decls: var_decls var_decl •

    $default  reduce using rule 7 (var_decls)


State 15

    8 var_decl: id_list • COLON type SEMICOLON
   10 id_list: id_list • COMMA id_decl

    COLON  shift, and go to state 24
    COMMA  shift, and go to state 25


State 16

    9 id_list: id_decl •

    $default  reduce using rule 9 (id_list)


State 17

    1 program: comp_decls const_decls var_decls func_decls • main_func
    2 main_func: • KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON
   15 func_decls: func_decls • func_decl
   16 func_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF  shift, and go to state 26

    main_func  go to state 27
    func_decl  go to state 28


State 18

   10 id_list: id_list • COMMA id_decl
   53 member_decl: id_list • COLON type SEMICOLON

    COLON  shift, and go to state 29
    COMMA  shift, and go to state 25


State 19

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls • method_decls KEYWORD_ENDCOMP SEMICOLON
   54 method_decls: ε •
   55             | • method_decls method_decl

    $default  reduce using rule 54 (method_decls)

    method_decls  go to state 30


State 20

    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   50 member_decls: member_decl_list •  [KEYWORD_DEF, KEYWORD_ENDCOMP]
   52 member_decl_list: member_decl_list • member_decl
   53 member_decl: • id_list COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 50 (member_decls)

    id_list      go to state 18
    id_decl      go to state 16
    member_decl  go to state 31


State 21

   51 member_decl_list: member_decl •

    $default  reduce using rule 51 (member_decl_list)


State 22

   59 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN • literal COLON type SEMICOLON
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    CONST_STRING  shift, and go to state 32
    CONST_INT     shift, and go to state 33
    CONST_REAL    shift, and go to state 34
    BOOL_TRUE     shift, and go to state 35
    BOOL_FALSE    shift, and go to state 36

    literal  go to state 37


State 23

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    RIGHT_BRACKET     shift, and go to state 40
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 44
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 24

    8 var_decl: id_list COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 59


State 25

   10 id_list: id_list COMMA • id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 13

    id_decl  go to state 60


State 26

    2 main_func: KEYWORD_DEF • KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON
   16 func_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER    shift, and go to state 61
    KEYWORD_MAIN  shift, and go to state 62


State 27

    1 program: comp_decls const_decls var_decls func_decls main_func •

    $default  reduce using rule 1 (program)


State 28

   15 func_decls: func_decls func_decl •

    $default  reduce using rule 15 (func_decls)


State 29

   53 member_decl: id_list COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 63


State 30

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls • KEYWORD_ENDCOMP SEMICOLON
   55 method_decls: method_decls • method_decl
   56 method_decl: • KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    KEYWORD_DEF      shift, and go to state 64
    KEYWORD_ENDCOMP  shift, and go to state 65

    method_decl  go to state 66


State 31

   52 member_decl_list: member_decl_list member_decl •

    $default  reduce using rule 52 (member_decl_list)


State 32

  103 literal: CONST_STRING •

    $default  reduce using rule 103 (literal)


State 33

  101 literal: CONST_INT •

    $default  reduce using rule 101 (literal)


State 34

  102 literal: CONST_REAL •

    $default  reduce using rule 102 (literal)


State 35

  104 literal: BOOL_TRUE •

    $default  reduce using rule 104 (literal)


State 36

  105 literal: BOOL_FALSE •

    $default  reduce using rule 105 (literal)


State 37

   59 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal • COLON type SEMICOLON

    COLON  shift, and go to state 67


State 38

   67 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   94 primary: IDENTIFIER •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   95        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET

    LEFT_PARENTHESIS  shift, and go to state 68
    LEFT_BRACKET      shift, and go to state 69

    $default  reduce using rule 94 (primary)


State 39

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   98        | LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 70
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 40

   13 id_decl: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET •

    $default  reduce using rule 13 (id_decl)


State 41

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   90 factor: • primary
   91       | • OP_MINUS factor
   91       | OP_MINUS • factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call  go to state 43
    factor         go to state 71
    primary        go to state 50
    literal        go to state 51


State 42

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   92       | OP_NOT • factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call  go to state 43
    factor         go to state 72
    primary        go to state 50
    literal        go to state 51


State 43

   97 primary: function_call •

    $default  reduce using rule 97 (primary)


State 44

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 73


State 45

   72 expr: logical_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET]
   74 logical_expr: logical_expr • OP_AND relational_expr
   75             | logical_expr • OP_OR relational_expr

    OP_AND  shift, and go to state 74
    OP_OR   shift, and go to state 75

    $default  reduce using rule 72 (expr)


State 46

   73 logical_expr: relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   77 relational_expr: relational_expr • OP_LT arithmetic_expr
   78                | relational_expr • OP_LE arithmetic_expr
   79                | relational_expr • OP_GT arithmetic_expr
   80                | relational_expr • OP_GE arithmetic_expr
   81                | relational_expr • OP_EQ arithmetic_expr
   82                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 76
    OP_LE   shift, and go to state 77
    OP_GT   shift, and go to state 78
    OP_GE   shift, and go to state 79
    OP_EQ   shift, and go to state 80
    OP_NEQ  shift, and go to state 81

    $default  reduce using rule 73 (logical_expr)


State 47

   76 relational_expr: arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   84 arithmetic_expr: arithmetic_expr • OP_PLUS term
   85                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 82
    OP_MINUS  shift, and go to state 83

    $default  reduce using rule 76 (relational_expr)


State 48

   83 arithmetic_expr: term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   87 term: term • OP_MULT factor
   88     | term • OP_DIV factor
   89     | term • OP_MOD factor

    OP_MULT  shift, and go to state 84
    OP_DIV   shift, and go to state 85
    OP_MOD   shift, and go to state 86

    $default  reduce using rule 83 (arithmetic_expr)


State 49

   86 term: factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   93 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 87

    $default  reduce using rule 86 (term)


State 50

   90 factor: primary •

    $default  reduce using rule 90 (factor)


State 51

   96 primary: literal •

    $default  reduce using rule 96 (primary)


State 52

  111 type: IDENTIFIER •

    $default  reduce using rule 111 (type)


State 53

  107 type: KEYWORD_SCALAR •

    $default  reduce using rule 107 (type)


State 54

  108 type: KEYWORD_STR •

    $default  reduce using rule 108 (type)


State 55

  106 type: KEYWORD_INTEGER •

    $default  reduce using rule 106 (type)


State 56

  110 type: KEYWORD_COMP •

    $default  reduce using rule 110 (type)


State 57

  109 type: KEYWORD_BOOL •

    $default  reduce using rule 109 (type)


State 58

  112 type: LEFT_BRACKET • CONST_INT RIGHT_BRACKET COLON type
  113     | LEFT_BRACKET • RIGHT_BRACKET COLON type

    CONST_INT      shift, and go to state 88
    RIGHT_BRACKET  shift, and go to state 89


State 59

    8 var_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 90


State 60

   10 id_list: id_list COMMA id_decl •

    $default  reduce using rule 10 (id_list)


State 61

   16 func_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 91


State 62

    2 main_func: KEYWORD_DEF KEYWORD_MAIN • LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 92


State 63

   53 member_decl: id_list COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 93


State 64

   56 method_decl: KEYWORD_DEF • IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 94


State 65

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP • SEMICOLON

    SEMICOLON  shift, and go to state 95


State 66

   55 method_decls: method_decls method_decl •

    $default  reduce using rule 55 (method_decls)


State 67

   59 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 96


State 68

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   67              | IDENTIFIER LEFT_PARENTHESIS • arg_list_opt RIGHT_PARENTHESIS
   68 arg_list_opt: ε •  [RIGHT_PARENTHESIS]
   69             | • arg_list
   70 arg_list: • expr
   71         | • arg_list COMMA expr
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    $default  reduce using rule 68 (arg_list_opt)

    function_call    go to state 43
    arg_list_opt     go to state 97
    arg_list         go to state 98
    expr             go to state 99
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 69

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   95        | IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 100
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 70

   98 primary: LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 101


State 71

   91 factor: OP_MINUS factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   93       | factor • OP_POWER primary

    $default  reduce using rule 91 (factor)

    Conflict between rule 91 and token OP_POWER resolved as reduce (OP_POWER < UMINUS).


State 72

   92 factor: OP_NOT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   93       | factor • OP_POWER primary

    $default  reduce using rule 92 (factor)

    Conflict between rule 92 and token OP_POWER resolved as reduce (OP_POWER < OP_NOT).


State 73

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 12 (id_decl)


State 74

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   74 logical_expr: logical_expr OP_AND • relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    relational_expr  go to state 102
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 75

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   75 logical_expr: logical_expr OP_OR • relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    relational_expr  go to state 103
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 76

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   77 relational_expr: relational_expr OP_LT • arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    arithmetic_expr  go to state 104
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 77

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   78 relational_expr: relational_expr OP_LE • arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    arithmetic_expr  go to state 105
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 78

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   79 relational_expr: relational_expr OP_GT • arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    arithmetic_expr  go to state 106
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 79

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   80 relational_expr: relational_expr OP_GE • arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    arithmetic_expr  go to state 107
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 80

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   81 relational_expr: relational_expr OP_EQ • arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    arithmetic_expr  go to state 108
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 81

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   82 relational_expr: relational_expr OP_NEQ • arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    arithmetic_expr  go to state 109
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 82

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   84 arithmetic_expr: arithmetic_expr OP_PLUS • term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call  go to state 43
    term           go to state 110
    factor         go to state 49
    primary        go to state 50
    literal        go to state 51


State 83

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   85 arithmetic_expr: arithmetic_expr OP_MINUS • term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call  go to state 43
    term           go to state 111
    factor         go to state 49
    primary        go to state 50
    literal        go to state 51


State 84

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   87 term: term OP_MULT • factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call  go to state 43
    factor         go to state 112
    primary        go to state 50
    literal        go to state 51


State 85

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   88 term: term OP_DIV • factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call  go to state 43
    factor         go to state 113
    primary        go to state 50
    literal        go to state 51


State 86

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   89 term: term OP_MOD • factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call  go to state 43
    factor         go to state 114
    primary        go to state 50
    literal        go to state 51


State 87

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   93 factor: factor OP_POWER • primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39

    function_call  go to state 43
    primary        go to state 115
    literal        go to state 51


State 88

  112 type: LEFT_BRACKET CONST_INT • RIGHT_BRACKET COLON type

    RIGHT_BRACKET  shift, and go to state 116


State 89

  113 type: LEFT_BRACKET RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 117


State 90

    8 var_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 8 (var_decl)


State 91

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   19 param: • id_decl COLON type
   20 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   21               | • param_list
   22 param_list: • param
   23           | • param_list COMMA param

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 20 (param_list_opt)

    id_decl         go to state 118
    param           go to state 119
    param_list_opt  go to state 120
    param_list      go to state 121


State 92

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS • RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 122


State 93

   53 member_decl: id_list COLON type SEMICOLON •

    $default  reduce using rule 53 (member_decl)


State 94

   56 method_decl: KEYWORD_DEF IDENTIFIER • LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 123


State 95

    5 comp_decl: KEYWORD_COMP IDENTIFIER COLON member_decls method_decls KEYWORD_ENDCOMP SEMICOLON •

    $default  reduce using rule 5 (comp_decl)


State 96

   59 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 124


State 97

   67 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt • RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS  shift, and go to state 125


State 98

   69 arg_list_opt: arg_list •  [RIGHT_PARENTHESIS]
   71 arg_list: arg_list • COMMA expr

    COMMA  shift, and go to state 126

    $default  reduce using rule 69 (arg_list_opt)


State 99

   70 arg_list: expr •

    $default  reduce using rule 70 (arg_list)


State 100

   95 primary: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 127


State 101

   98 primary: LEFT_PARENTHESIS expr RIGHT_PARENTHESIS •

    $default  reduce using rule 98 (primary)


State 102

   74 logical_expr: logical_expr OP_AND relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   77 relational_expr: relational_expr • OP_LT arithmetic_expr
   78                | relational_expr • OP_LE arithmetic_expr
   79                | relational_expr • OP_GT arithmetic_expr
   80                | relational_expr • OP_GE arithmetic_expr
   81                | relational_expr • OP_EQ arithmetic_expr
   82                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 76
    OP_LE   shift, and go to state 77
    OP_GT   shift, and go to state 78
    OP_GE   shift, and go to state 79
    OP_EQ   shift, and go to state 80
    OP_NEQ  shift, and go to state 81

    $default  reduce using rule 74 (logical_expr)


State 103

   75 logical_expr: logical_expr OP_OR relational_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_AND, OP_OR]
   77 relational_expr: relational_expr • OP_LT arithmetic_expr
   78                | relational_expr • OP_LE arithmetic_expr
   79                | relational_expr • OP_GT arithmetic_expr
   80                | relational_expr • OP_GE arithmetic_expr
   81                | relational_expr • OP_EQ arithmetic_expr
   82                | relational_expr • OP_NEQ arithmetic_expr

    OP_LT   shift, and go to state 76
    OP_LE   shift, and go to state 77
    OP_GT   shift, and go to state 78
    OP_GE   shift, and go to state 79
    OP_EQ   shift, and go to state 80
    OP_NEQ  shift, and go to state 81

    $default  reduce using rule 75 (logical_expr)


State 104

   77 relational_expr: relational_expr OP_LT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   84 arithmetic_expr: arithmetic_expr • OP_PLUS term
   85                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 82
    OP_MINUS  shift, and go to state 83

    $default  reduce using rule 77 (relational_expr)


State 105

   78 relational_expr: relational_expr OP_LE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   84 arithmetic_expr: arithmetic_expr • OP_PLUS term
   85                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 82
    OP_MINUS  shift, and go to state 83

    $default  reduce using rule 78 (relational_expr)


State 106

   79 relational_expr: relational_expr OP_GT arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   84 arithmetic_expr: arithmetic_expr • OP_PLUS term
   85                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 82
    OP_MINUS  shift, and go to state 83

    $default  reduce using rule 79 (relational_expr)


State 107

   80 relational_expr: relational_expr OP_GE arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   84 arithmetic_expr: arithmetic_expr • OP_PLUS term
   85                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 82
    OP_MINUS  shift, and go to state 83

    $default  reduce using rule 80 (relational_expr)


State 108

   81 relational_expr: relational_expr OP_EQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   84 arithmetic_expr: arithmetic_expr • OP_PLUS term
   85                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 82
    OP_MINUS  shift, and go to state 83

    $default  reduce using rule 81 (relational_expr)


State 109

   82 relational_expr: relational_expr OP_NEQ arithmetic_expr •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   84 arithmetic_expr: arithmetic_expr • OP_PLUS term
   85                | arithmetic_expr • OP_MINUS term

    OP_PLUS   shift, and go to state 82
    OP_MINUS  shift, and go to state 83

    $default  reduce using rule 82 (relational_expr)


State 110

   84 arithmetic_expr: arithmetic_expr OP_PLUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   87 term: term • OP_MULT factor
   88     | term • OP_DIV factor
   89     | term • OP_MOD factor

    OP_MULT  shift, and go to state 84
    OP_DIV   shift, and go to state 85
    OP_MOD   shift, and go to state 86

    $default  reduce using rule 84 (arithmetic_expr)


State 111

   85 arithmetic_expr: arithmetic_expr OP_MINUS term •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   87 term: term • OP_MULT factor
   88     | term • OP_DIV factor
   89     | term • OP_MOD factor

    OP_MULT  shift, and go to state 84
    OP_DIV   shift, and go to state 85
    OP_MOD   shift, and go to state 86

    $default  reduce using rule 85 (arithmetic_expr)


State 112

   87 term: term OP_MULT factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   93 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 87

    $default  reduce using rule 87 (term)


State 113

   88 term: term OP_DIV factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   93 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 87

    $default  reduce using rule 88 (term)


State 114

   89 term: term OP_MOD factor •  [KEYWORD_FOR, SEMICOLON, COLON, COMMA, RIGHT_PARENTHESIS, RIGHT_BRACKET, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   93 factor: factor • OP_POWER primary

    OP_POWER  shift, and go to state 87

    $default  reduce using rule 89 (term)


State 115

   93 factor: factor OP_POWER primary •

    $default  reduce using rule 93 (factor)


State 116

  112 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET • COLON type

    COLON  shift, and go to state 128


State 117

  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type
  113     | LEFT_BRACKET RIGHT_BRACKET COLON • type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 129


State 118

   19 param: id_decl • COLON type

    COLON  shift, and go to state 130


State 119

   22 param_list: param •

    $default  reduce using rule 22 (param_list)


State 120

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 131


State 121

   21 param_list_opt: param_list •  [RIGHT_PARENTHESIS]
   23 param_list: param_list • COMMA param

    COMMA  shift, and go to state 132

    $default  reduce using rule 21 (param_list_opt)


State 122

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS • COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 133


State 123

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 param: • id_decl COLON type
   20 param_list_opt: ε •  [RIGHT_PARENTHESIS]
   21               | • param_list
   22 param_list: • param
   23           | • param_list COMMA param
   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS • param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 20 (param_list_opt)

    id_decl         go to state 118
    param           go to state 119
    param_list_opt  go to state 134
    param_list      go to state 121


State 124

   59 const_decl: KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON •

    $default  reduce using rule 59 (const_decl)


State 125

   67 function_call: IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS •

    $default  reduce using rule 67 (function_call)


State 126

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   71 arg_list: arg_list COMMA • expr
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 135
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 127

   95 primary: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 95 (primary)


State 128

  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  112     | LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON • type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 136


State 129

  113 type: LEFT_BRACKET RIGHT_BRACKET COLON type •

    $default  reduce using rule 113 (type)


State 130

   19 param: id_decl COLON • type
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 137


State 131

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   17 return_type_decl: ε •  [COLON]
   18                 | • ARROW return_type_opt

    ARROW  shift, and go to state 138

    $default  reduce using rule 17 (return_type_decl)

    return_type_decl  go to state 139


State 132

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   19 param: • id_decl COLON type
   23 param_list: param_list COMMA • param

    IDENTIFIER  shift, and go to state 13

    id_decl  go to state 118
    param    go to state 140


State 133

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON • local_decls stmts KEYWORD_ENDDEF SEMICOLON
   24 local_decls: ε •
   25            | • local_decls var_decl
   26            | • local_decls const_decl

    $default  reduce using rule 24 (local_decls)

    local_decls  go to state 141


State 134

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt • RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 142


State 135

   71 arg_list: arg_list COMMA expr •

    $default  reduce using rule 71 (arg_list)


State 136

  112 type: LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type •

    $default  reduce using rule 112 (type)


State 137

   19 param: id_decl COLON type •

    $default  reduce using rule 19 (param)


State 138

   18 return_type_decl: ARROW • return_type_opt
   60 return_type_opt: ε •  [COLON]
   61                | • type
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    $default  reduce using rule 60 (return_type_opt)

    return_type_opt  go to state 143
    type             go to state 144


State 139

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 145


State 140

   23 param_list: param_list COMMA param •

    $default  reduce using rule 23 (param_list)


State 141

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls • stmts KEYWORD_ENDDEF SEMICOLON
    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   25 local_decls: local_decls • var_decl
   26            | local_decls • const_decl
   27 stmts: ε •  [KEYWORD_ENDDEF]
   28      | • stmt stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   59 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_CONST     shift, and go to state 8
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    var_decl              go to state 153
    id_list               go to state 15
    id_decl               go to state 154
    stmts                 go to state 155
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    const_decl            go to state 161
    function_call         go to state 162


State 142

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS • return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   60 return_type_opt: ε •  [COLON]
   61                | • type
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    $default  reduce using rule 60 (return_type_opt)

    return_type_opt  go to state 163
    type             go to state 144


State 143

   18 return_type_decl: ARROW return_type_opt •

    $default  reduce using rule 18 (return_type_decl)


State 144

   61 return_type_opt: type •

    $default  reduce using rule 61 (return_type_opt)


State 145

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON
   24 local_decls: ε •
   25            | • local_decls var_decl
   26            | • local_decls const_decl

    $default  reduce using rule 24 (local_decls)

    local_decls  go to state 164


State 146

   11 id_decl: IDENTIFIER •  [OP_COLON_ASSIGN, COLON, COMMA]
   12        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   13        | IDENTIFIER • LEFT_BRACKET RIGHT_BRACKET
   42 lvalue: IDENTIFIER •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]
   43       | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
   67 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS  shift, and go to state 68
    LEFT_BRACKET      shift, and go to state 165

    OP_COLON_ASSIGN  reduce using rule 11 (id_decl)
    COLON            reduce using rule 11 (id_decl)
    COMMA            reduce using rule 11 (id_decl)
    $default         reduce using rule 42 (lvalue)


State 147

   44 compound_stmt: KEYWORD_IF • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 166


State 148

   45 compound_stmt: KEYWORD_WHILE • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    LEFT_PARENTHESIS  shift, and go to state 167


State 149

   46 compound_stmt: KEYWORD_FOR • IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    IDENTIFIER  shift, and go to state 168


State 150

   33 simple_stmt: KEYWORD_BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 169


State 151

   34 simple_stmt: KEYWORD_CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 170


State 152

   35 simple_stmt: SEMICOLON •

    $default  reduce using rule 35 (simple_stmt)


State 153

   25 local_decls: local_decls var_decl •

    $default  reduce using rule 25 (local_decls)


State 154

    9 id_list: id_decl •  [COLON, COMMA]
   47 compound_stmt: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 171

    $default  reduce using rule 9 (id_list)


State 155

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 172


State 156

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   27 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF, KEYWORD_ENDWHILE, KEYWORD_ENDFOR, KEYWORD_ENDDEF, KEYWORD_RETURN]
   28      | • stmt stmts
   28      | stmt • stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    id_decl               go to state 173
    stmts                 go to state 174
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    function_call         go to state 162


State 157

   29 stmt: simple_stmt •

    $default  reduce using rule 29 (stmt)


State 158

   31 simple_stmt: assignment_statement •

    $default  reduce using rule 31 (simple_stmt)


State 159

   36 assignment_statement: lvalue • OP_ASSIGN expr SEMICOLON
   37                     | lvalue • OP_PLUS_ASSIGN expr SEMICOLON
   38                     | lvalue • OP_MINUS_ASSIGN expr SEMICOLON
   39                     | lvalue • OP_MULT_ASSIGN expr SEMICOLON
   40                     | lvalue • OP_DIV_ASSIGN expr SEMICOLON
   41                     | lvalue • OP_MOD_ASSIGN expr SEMICOLON

    OP_ASSIGN        shift, and go to state 175
    OP_PLUS_ASSIGN   shift, and go to state 176
    OP_MINUS_ASSIGN  shift, and go to state 177
    OP_MULT_ASSIGN   shift, and go to state 178
    OP_DIV_ASSIGN    shift, and go to state 179
    OP_MOD_ASSIGN    shift, and go to state 180


State 160

   30 stmt: compound_stmt •

    $default  reduce using rule 30 (stmt)


State 161

   26 local_decls: local_decls const_decl •

    $default  reduce using rule 26 (local_decls)


State 162

   32 simple_stmt: function_call • SEMICOLON

    SEMICOLON  shift, and go to state 181


State 163

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt • COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    COLON  shift, and go to state 182


State 164

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   25 local_decls: local_decls • var_decl
   26            | local_decls • const_decl
   27 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   28      | • stmt stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   59 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_CONST     shift, and go to state 8
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    var_decl              go to state 153
    id_list               go to state 15
    id_decl               go to state 154
    stmts                 go to state 183
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    const_decl            go to state 161
    function_call         go to state 162


State 165

   12 id_decl: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   13        | IDENTIFIER LEFT_BRACKET • RIGHT_BRACKET
   43 lvalue: IDENTIFIER LEFT_BRACKET • expr RIGHT_BRACKET
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    RIGHT_BRACKET     shift, and go to state 40
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 184
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 166

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 185
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 167

   45 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS • expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 186
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 168

   46 compound_stmt: KEYWORD_FOR IDENTIFIER • KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON

    KEYWORD_IN  shift, and go to state 187


State 169

   33 simple_stmt: KEYWORD_BREAK SEMICOLON •

    $default  reduce using rule 33 (simple_stmt)


State 170

   34 simple_stmt: KEYWORD_CONTINUE SEMICOLON •

    $default  reduce using rule 34 (simple_stmt)


State 171

   47 compound_stmt: id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl OP_COLON_ASSIGN • LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    LEFT_BRACKET  shift, and go to state 188


State 172

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 189


State 173

   47 compound_stmt: id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl • OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    OP_COLON_ASSIGN  shift, and go to state 171


State 174

   28 stmts: stmt stmts •

    $default  reduce using rule 28 (stmts)


State 175

   36 assignment_statement: lvalue OP_ASSIGN • expr SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 190
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 176

   37 assignment_statement: lvalue OP_PLUS_ASSIGN • expr SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 191
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 177

   38 assignment_statement: lvalue OP_MINUS_ASSIGN • expr SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 192
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 178

   39 assignment_statement: lvalue OP_MULT_ASSIGN • expr SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 193
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 179

   40 assignment_statement: lvalue OP_DIV_ASSIGN • expr SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 194
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 180

   41 assignment_statement: lvalue OP_MOD_ASSIGN • expr SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 195
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 181

   32 simple_stmt: function_call SEMICOLON •

    $default  reduce using rule 32 (simple_stmt)


State 182

   24 local_decls: ε •
   25            | • local_decls var_decl
   26            | • local_decls const_decl
   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON • local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON

    $default  reduce using rule 24 (local_decls)

    local_decls  go to state 196


State 183

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   62 return_opt: ε •  [KEYWORD_ENDDEF]
   63           | • KEYWORD_RETURN SEMICOLON
   64           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 197

    $default  reduce using rule 62 (return_opt)

    return_opt  go to state 198


State 184

   12 id_decl: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET
   43 lvalue: IDENTIFIER LEFT_BRACKET expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 199


State 185

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 200


State 186

   45 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr • RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON

    RIGHT_PARENTHESIS  shift, and go to state 201


State 187

   46 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN • range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   99 range_expr: • LEFT_BRACKET expr COLON expr RIGHT_BRACKET
  100           | • LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 202

    range_expr  go to state 203


State 188

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl OP_COLON_ASSIGN LEFT_BRACKET • expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 204
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 189

    2 main_func: KEYWORD_DEF KEYWORD_MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS COLON local_decls stmts KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 2 (main_func)


State 190

   36 assignment_statement: lvalue OP_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 205


State 191

   37 assignment_statement: lvalue OP_PLUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 206


State 192

   38 assignment_statement: lvalue OP_MINUS_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 207


State 193

   39 assignment_statement: lvalue OP_MULT_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 208


State 194

   40 assignment_statement: lvalue OP_DIV_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 209


State 195

   41 assignment_statement: lvalue OP_MOD_ASSIGN expr • SEMICOLON

    SEMICOLON  shift, and go to state 210


State 196

    8 var_decl: • id_list COLON type SEMICOLON
    9 id_list: • id_decl
   10        | • id_list COMMA id_decl
   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   25 local_decls: local_decls • var_decl
   26            | local_decls • const_decl
   27 stmts: ε •  [KEYWORD_ENDDEF, KEYWORD_RETURN]
   28      | • stmt stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls • stmts return_opt KEYWORD_ENDDEF SEMICOLON
   59 const_decl: • KEYWORD_CONST IDENTIFIER OP_ASSIGN literal COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_CONST     shift, and go to state 8
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    var_decl              go to state 153
    id_list               go to state 15
    id_decl               go to state 154
    stmts                 go to state 211
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    const_decl            go to state 161
    function_call         go to state 162


State 197

   63 return_opt: KEYWORD_RETURN • SEMICOLON
   64           | KEYWORD_RETURN • expr SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    SEMICOLON         shift, and go to state 212
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 213
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 198

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 214


State 199

   12 id_decl: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_COLON_ASSIGN, COLON, COMMA]
   43 lvalue: IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET •  [OP_ASSIGN, OP_PLUS_ASSIGN, OP_MINUS_ASSIGN, OP_MULT_ASSIGN, OP_DIV_ASSIGN, OP_MOD_ASSIGN]

    OP_COLON_ASSIGN  reduce using rule 12 (id_decl)
    COLON            reduce using rule 12 (id_decl)
    COMMA            reduce using rule 12 (id_decl)
    $default         reduce using rule 43 (lvalue)


State 200

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts else_part KEYWORD_ENDIF SEMICOLON

    COLON  shift, and go to state 215


State 201

   45 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS • COLON stmts KEYWORD_ENDWHILE SEMICOLON

    COLON  shift, and go to state 216


State 202

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   99 range_expr: LEFT_BRACKET • expr COLON expr RIGHT_BRACKET
  100           | LEFT_BRACKET • expr COLON expr COLON expr RIGHT_BRACKET
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 217
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 203

   46 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr • COLON stmts KEYWORD_ENDFOR SEMICOLON

    COLON  shift, and go to state 218


State 204

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr • KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_FOR  shift, and go to state 219


State 205

   36 assignment_statement: lvalue OP_ASSIGN expr SEMICOLON •

    $default  reduce using rule 36 (assignment_statement)


State 206

   37 assignment_statement: lvalue OP_PLUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 37 (assignment_statement)


State 207

   38 assignment_statement: lvalue OP_MINUS_ASSIGN expr SEMICOLON •

    $default  reduce using rule 38 (assignment_statement)


State 208

   39 assignment_statement: lvalue OP_MULT_ASSIGN expr SEMICOLON •

    $default  reduce using rule 39 (assignment_statement)


State 209

   40 assignment_statement: lvalue OP_DIV_ASSIGN expr SEMICOLON •

    $default  reduce using rule 40 (assignment_statement)


State 210

   41 assignment_statement: lvalue OP_MOD_ASSIGN expr SEMICOLON •

    $default  reduce using rule 41 (assignment_statement)


State 211

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts • return_opt KEYWORD_ENDDEF SEMICOLON
   62 return_opt: ε •  [KEYWORD_ENDDEF]
   63           | • KEYWORD_RETURN SEMICOLON
   64           | • KEYWORD_RETURN expr SEMICOLON

    KEYWORD_RETURN  shift, and go to state 197

    $default  reduce using rule 62 (return_opt)

    return_opt  go to state 220


State 212

   63 return_opt: KEYWORD_RETURN SEMICOLON •

    $default  reduce using rule 63 (return_opt)


State 213

   64 return_opt: KEYWORD_RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 221


State 214

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 222


State 215

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   27 stmts: ε •  [KEYWORD_ELSE, KEYWORD_ENDIF]
   28      | • stmt stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   44              | KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    id_decl               go to state 173
    stmts                 go to state 223
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    function_call         go to state 162


State 216

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   27 stmts: ε •  [KEYWORD_ENDWHILE]
   28      | • stmt stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   45              | KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON • stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    id_decl               go to state 173
    stmts                 go to state 224
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    function_call         go to state 162


State 217

   99 range_expr: LEFT_BRACKET expr • COLON expr RIGHT_BRACKET
  100           | LEFT_BRACKET expr • COLON expr COLON expr RIGHT_BRACKET

    COLON  shift, and go to state 225


State 218

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   27 stmts: ε •  [KEYWORD_ENDFOR]
   28      | • stmt stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   46              | KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON • stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    id_decl               go to state 173
    stmts                 go to state 226
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    function_call         go to state 162


State 219

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR • IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 227


State 220

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt • KEYWORD_ENDDEF SEMICOLON

    KEYWORD_ENDDEF  shift, and go to state 228


State 221

   64 return_opt: KEYWORD_RETURN expr SEMICOLON •

    $default  reduce using rule 64 (return_opt)


State 222

   16 func_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_decl COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 16 (func_decl)


State 223

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • else_part KEYWORD_ENDIF SEMICOLON
   65 else_part: ε •  [KEYWORD_ENDIF]
   66          | • KEYWORD_ELSE COLON stmts

    KEYWORD_ELSE  shift, and go to state 229

    $default  reduce using rule 65 (else_part)

    else_part  go to state 230


State 224

   45 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts • KEYWORD_ENDWHILE SEMICOLON

    KEYWORD_ENDWHILE  shift, and go to state 231


State 225

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
   99 range_expr: LEFT_BRACKET expr COLON • expr RIGHT_BRACKET
  100           | LEFT_BRACKET expr COLON • expr COLON expr RIGHT_BRACKET
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 232
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 226

   46 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts • KEYWORD_ENDFOR SEMICOLON

    KEYWORD_ENDFOR  shift, and go to state 233


State 227

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER • COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    COLON  shift, and go to state 234


State 228

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF • SEMICOLON

    SEMICOLON  shift, and go to state 235


State 229

   66 else_part: KEYWORD_ELSE • COLON stmts

    COLON  shift, and go to state 236


State 230

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part • KEYWORD_ENDIF SEMICOLON

    KEYWORD_ENDIF  shift, and go to state 237


State 231

   45 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE • SEMICOLON

    SEMICOLON  shift, and go to state 238


State 232

   99 range_expr: LEFT_BRACKET expr COLON expr • RIGHT_BRACKET
  100           | LEFT_BRACKET expr COLON expr • COLON expr RIGHT_BRACKET

    COLON          shift, and go to state 239
    RIGHT_BRACKET  shift, and go to state 240


State 233

   46 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR • SEMICOLON

    SEMICOLON  shift, and go to state 241


State 234

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • expr RIGHT_BRACKET COLON type SEMICOLON
   48              | id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON • type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER        shift, and go to state 242
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    KEYWORD_SCALAR    shift, and go to state 53
    KEYWORD_STR       shift, and go to state 54
    KEYWORD_INTEGER   shift, and go to state 55
    KEYWORD_COMP      shift, and go to state 56
    KEYWORD_BOOL      shift, and go to state 57
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    LEFT_BRACKET      shift, and go to state 58
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 243
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51
    type             go to state 244


State 235

   56 method_decl: KEYWORD_DEF IDENTIFIER LEFT_PARENTHESIS param_list_opt RIGHT_PARENTHESIS return_type_opt COLON local_decls stmts return_opt KEYWORD_ENDDEF SEMICOLON •

    $default  reduce using rule 56 (method_decl)


State 236

   11 id_decl: • IDENTIFIER
   12        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   13        | • IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
   27 stmts: ε •  [KEYWORD_ENDIF]
   28      | • stmt stmts
   29 stmt: • simple_stmt
   30     | • compound_stmt
   31 simple_stmt: • assignment_statement
   32            | • function_call SEMICOLON
   33            | • KEYWORD_BREAK SEMICOLON
   34            | • KEYWORD_CONTINUE SEMICOLON
   35            | • SEMICOLON
   36 assignment_statement: • lvalue OP_ASSIGN expr SEMICOLON
   37                     | • lvalue OP_PLUS_ASSIGN expr SEMICOLON
   38                     | • lvalue OP_MINUS_ASSIGN expr SEMICOLON
   39                     | • lvalue OP_MULT_ASSIGN expr SEMICOLON
   40                     | • lvalue OP_DIV_ASSIGN expr SEMICOLON
   41                     | • lvalue OP_MOD_ASSIGN expr SEMICOLON
   42 lvalue: • IDENTIFIER
   43       | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   44 compound_stmt: • KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON
   45              | • KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON
   46              | • KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON
   47              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON
   48              | • id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON
   66 else_part: KEYWORD_ELSE COLON • stmts
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS

    IDENTIFIER        shift, and go to state 146
    KEYWORD_IF        shift, and go to state 147
    KEYWORD_WHILE     shift, and go to state 148
    KEYWORD_FOR       shift, and go to state 149
    KEYWORD_BREAK     shift, and go to state 150
    KEYWORD_CONTINUE  shift, and go to state 151
    SEMICOLON         shift, and go to state 152

    $default  reduce using rule 27 (stmts)

    id_decl               go to state 173
    stmts                 go to state 245
    stmt                  go to state 156
    simple_stmt           go to state 157
    assignment_statement  go to state 158
    lvalue                go to state 159
    compound_stmt         go to state 160
    function_call         go to state 162


State 237

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF • SEMICOLON

    SEMICOLON  shift, and go to state 246


State 238

   45 compound_stmt: KEYWORD_WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts KEYWORD_ENDWHILE SEMICOLON •

    $default  reduce using rule 45 (compound_stmt)


State 239

   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  100 range_expr: LEFT_BRACKET expr COLON expr COLON • expr RIGHT_BRACKET
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 247
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 240

   99 range_expr: LEFT_BRACKET expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 99 (range_expr)


State 241

   46 compound_stmt: KEYWORD_FOR IDENTIFIER KEYWORD_IN range_expr COLON stmts KEYWORD_ENDFOR SEMICOLON •

    $default  reduce using rule 46 (compound_stmt)


State 242

   67 function_call: IDENTIFIER • LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   94 primary: IDENTIFIER •  [RIGHT_BRACKET, OP_POWER, OP_MULT, OP_DIV, OP_MOD, OP_PLUS, OP_MINUS, OP_LT, OP_LE, OP_GT, OP_GE, OP_EQ, OP_NEQ, OP_AND, OP_OR]
   95        | IDENTIFIER • LEFT_BRACKET expr RIGHT_BRACKET
  111 type: IDENTIFIER •  [KEYWORD_IN]

    LEFT_PARENTHESIS  shift, and go to state 68
    LEFT_BRACKET      shift, and go to state 69

    KEYWORD_IN  reduce using rule 111 (type)
    $default    reduce using rule 94 (primary)


State 243

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 248


State 244

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type • KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_IN  shift, and go to state 249


State 245

   66 else_part: KEYWORD_ELSE COLON stmts •

    $default  reduce using rule 66 (else_part)


State 246

   44 compound_stmt: KEYWORD_IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS COLON stmts else_part KEYWORD_ENDIF SEMICOLON •

    $default  reduce using rule 44 (compound_stmt)


State 247

  100 range_expr: LEFT_BRACKET expr COLON expr COLON expr • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 250


State 248

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 251


State 249

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN • IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    IDENTIFIER  shift, and go to state 252


State 250

  100 range_expr: LEFT_BRACKET expr COLON expr COLON expr RIGHT_BRACKET •

    $default  reduce using rule 100 (range_expr)


State 251

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 253


State 252

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER • KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON

    KEYWORD_OF  shift, and go to state 254


State 253

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 255


State 254

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF • expr RIGHT_BRACKET COLON type SEMICOLON
   67 function_call: • IDENTIFIER LEFT_PARENTHESIS arg_list_opt RIGHT_PARENTHESIS
   72 expr: • logical_expr
   73 logical_expr: • relational_expr
   74             | • logical_expr OP_AND relational_expr
   75             | • logical_expr OP_OR relational_expr
   76 relational_expr: • arithmetic_expr
   77                | • relational_expr OP_LT arithmetic_expr
   78                | • relational_expr OP_LE arithmetic_expr
   79                | • relational_expr OP_GT arithmetic_expr
   80                | • relational_expr OP_GE arithmetic_expr
   81                | • relational_expr OP_EQ arithmetic_expr
   82                | • relational_expr OP_NEQ arithmetic_expr
   83 arithmetic_expr: • term
   84                | • arithmetic_expr OP_PLUS term
   85                | • arithmetic_expr OP_MINUS term
   86 term: • factor
   87     | • term OP_MULT factor
   88     | • term OP_DIV factor
   89     | • term OP_MOD factor
   90 factor: • primary
   91       | • OP_MINUS factor
   92       | • OP_NOT factor
   93       | • factor OP_POWER primary
   94 primary: • IDENTIFIER
   95        | • IDENTIFIER LEFT_BRACKET expr RIGHT_BRACKET
   96        | • literal
   97        | • function_call
   98        | • LEFT_PARENTHESIS expr RIGHT_PARENTHESIS
  101 literal: • CONST_INT
  102        | • CONST_REAL
  103        | • CONST_STRING
  104        | • BOOL_TRUE
  105        | • BOOL_FALSE

    IDENTIFIER        shift, and go to state 38
    CONST_STRING      shift, and go to state 32
    CONST_INT         shift, and go to state 33
    CONST_REAL        shift, and go to state 34
    BOOL_TRUE         shift, and go to state 35
    BOOL_FALSE        shift, and go to state 36
    LEFT_PARENTHESIS  shift, and go to state 39
    OP_MINUS          shift, and go to state 41
    OP_NOT            shift, and go to state 42

    function_call    go to state 43
    expr             go to state 256
    logical_expr     go to state 45
    relational_expr  go to state 46
    arithmetic_expr  go to state 47
    term             go to state 48
    factor           go to state 49
    primary          go to state 50
    literal          go to state 51


State 255

   47 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 47 (compound_stmt)


State 256

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr • RIGHT_BRACKET COLON type SEMICOLON

    RIGHT_BRACKET  shift, and go to state 257


State 257

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET • COLON type SEMICOLON

    COLON  shift, and go to state 258


State 258

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON • type SEMICOLON
  106 type: • KEYWORD_INTEGER
  107     | • KEYWORD_SCALAR
  108     | • KEYWORD_STR
  109     | • KEYWORD_BOOL
  110     | • KEYWORD_COMP
  111     | • IDENTIFIER
  112     | • LEFT_BRACKET CONST_INT RIGHT_BRACKET COLON type
  113     | • LEFT_BRACKET RIGHT_BRACKET COLON type

    IDENTIFIER       shift, and go to state 52
    KEYWORD_SCALAR   shift, and go to state 53
    KEYWORD_STR      shift, and go to state 54
    KEYWORD_INTEGER  shift, and go to state 55
    KEYWORD_COMP     shift, and go to state 56
    KEYWORD_BOOL     shift, and go to state 57
    LEFT_BRACKET     shift, and go to state 58

    type  go to state 259


State 259

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type • SEMICOLON

    SEMICOLON  shift, and go to state 260


State 260

   48 compound_stmt: id_decl OP_COLON_ASSIGN LEFT_BRACKET expr KEYWORD_FOR IDENTIFIER COLON type KEYWORD_IN IDENTIFIER KEYWORD_OF expr RIGHT_BRACKET COLON type SEMICOLON •

    $default  reduce using rule 48 (compound_stmt)
